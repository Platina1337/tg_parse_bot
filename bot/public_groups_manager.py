import logging
import re
from typing import Optional, Dict, List
from pyrogram import Client
from pyrogram.types import Message, BotCommand
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from bot.states import user_states, FSM_MAIN_MENU
from bot.core import api_client, show_main_menu
from bot.handlers import safe_edit_message, safe_edit_callback_message, resolve_channel, resolve_group

logger = logging.getLogger(__name__)

def safe_markdown_text(text: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è markdown"""
    if not text:
        return ""
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
FSM_PUBLIC_GROUPS_SOURCE = "public_groups_source"
FSM_PUBLIC_GROUPS_TARGET = "public_groups_target"
FSM_PUBLIC_GROUPS_SETTINGS = "public_groups_settings"

async def start_public_groups_manager(client: Client, message: Message):
    """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    user_id = message.from_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_PUBLIC_GROUPS_SOURCE}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    kb = await get_source_channel_keyboard(user_id)
    sent = await message.reply(
        "üéØ **–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã:",
        reply_markup=kb or ReplyKeyboardRemove()
    )
    
    if sent is not None:
        user_states[user_id]["last_msg_id"] = sent.id

async def handle_public_groups_text(client: Client, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states.get(user_id, {}).get('state')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
    if state and state.startswith('public_groups_'):
        if state == FSM_PUBLIC_GROUPS_SOURCE:
            return await handle_source_selection(client, message)
        elif state == FSM_PUBLIC_GROUPS_TARGET:
            return await handle_target_selection(client, message)
        elif state == FSM_PUBLIC_GROUPS_SETTINGS:
            return await handle_settings_input(client, message)
    
    return False

async def handle_source_selection(client: Client, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    if text == "–ù–∞–∑–∞–¥":
        await show_main_menu(client, message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        return True
    
    # –ü–∞—Ä—Å–∏–º –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    match = re.match(r"(.+) \(ID: (-?\d+)(?:, @(\w+))?\)", text)
    if match:
        channel_title = match.group(1)
        channel_id = match.group(2)
        username = match.group(3)
        
        user_states[user_id]["public_source_id"] = int(channel_id)
        user_states[user_id]["public_source_title"] = channel_title
        if username:
            user_states[user_id]["public_source_username"] = username
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
        channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
        
        if not channel_id:
            sent = await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ ID.")
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            return True
        
        user_states[user_id]["public_source_id"] = int(channel_id)
        user_states[user_id]["public_source_title"] = channel_title
        if channel_username:
            user_states[user_id]["public_source_username"] = channel_username
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
    await show_public_groups_selection(client, message)
    return True

async def handle_target_selection(client: Client, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    if text == "–ù–∞–∑–∞–¥":
        kb = await get_source_channel_keyboard(user_id)
        sent = await message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª-–∏—Å—Ç–æ—á–Ω–∏–∫:",
            reply_markup=kb or ReplyKeyboardRemove()
        )
        if sent is not None:
            user_states[user_id]["last_msg_id"] = sent.id
        user_states[user_id]["state"] = FSM_PUBLIC_GROUPS_SOURCE
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    try:
        groups = await api_client.get_user_groups(user_id)
        for group in groups:
            group_id = group.get('group_id', '')
            group_title = group.get('group_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            username = group.get('username', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
            possible_texts = [
                f"{group_title} (@{username})" if username else f"{group_title} [ID: {group_id}]",
                f"{group_title} (@{username})" if username else f"{group_title}",
                f"@{username}" if username else f"{group_id}"
            ]
            
            if text in possible_texts:
                user_states[user_id]["public_target_id"] = group_id
                user_states[user_id]["public_target_name"] = group_title
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                await api_client.update_user_group_last_used(user_id, str(group_id))
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await show_public_groups_settings(client, message)
                return True
    except Exception as e:
        logger.error(f"[PUBLIC_GROUPS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
    
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é
    try:
        # –†–∞–∑—Ä–µ—à–∞–µ–º –≥—Ä—É–ø–ø—É (–ø–æ–ª—É—á–∞–µ–º ID, title, username)
        group_id, group_title, username = await resolve_group(api_client, text)
        
        if not group_id:
            sent = await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏–ª–∏ username –≥—Ä—É–ø–ø—ã.")
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            return True
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await api_client.add_user_group(user_id, str(group_id), group_title, username)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await api_client.update_user_group_last_used(user_id, str(group_id))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        user_states[user_id]["public_target_id"] = str(group_id)
        user_states[user_id]["public_target_name"] = group_title
        
        try:
            await message.reply(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞!\n\n"
                f"üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {safe_markdown_text(group_title)}\n"
                f"üÜî **ID:** {group_id}\n"
                f"üîó **Username:** @{username if username else '–ù–µ—Ç'}\n\n"
                f"–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏.",
                parse_mode="markdown"
            )
        except Exception as e:
            logger.error(f"[PUBLIC_GROUPS] –û—à–∏–±–∫–∞ markdown –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ markdown
            await message.reply(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –≤—ã–±—Ä–∞–Ω–∞!\n\n"
                f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {group_title}\n"
                f"üÜî ID: {group_id}\n"
                f"üîó Username: @{username if username else '–ù–µ—Ç'}\n\n"
                f"–ì—Ä—É–ø–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏."
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await show_public_groups_settings(client, message)
        return True
        
    except Exception as e:
        logger.error(f"[PUBLIC_GROUPS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {e}")
        sent = await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã: {str(e)}")
        if sent is not None:
            user_states[user_id]["last_msg_id"] = sent.id
        return True

async def handle_settings_input(client: Client, message: Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = message.from_user.id
    text = message.text.strip()
    
    if text == "–ù–∞–∑–∞–¥":
        await show_public_groups_selection(client, message)
        return True
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await show_public_groups_settings(client, message)
    return True

async def show_public_groups_selection(client: Client, message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        groups = await api_client.get_user_groups(user_id)
        
        if not groups:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é
            keyboard = ReplyKeyboardMarkup([
                ["üîô –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True)
            
            try:
                sent = await message.reply(
                    "üì¢ **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n"
                    "üìù **–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `-1001234567890`\n"
                    "‚Ä¢ Username: `@mygroup` –∏–ª–∏ `mygroup`",
                    reply_markup=keyboard,
                    parse_mode="markdown"
                )
            except Exception as e:
                logger.error(f"[PUBLIC_GROUPS] –û—à–∏–±–∫–∞ markdown –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                # –ü—Ä–æ–±—É–µ–º –±–µ–∑ markdown
                sent = await message.reply(
                    "üì¢ –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã –∏–ª–∏ username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n"
                    "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
                    "‚Ä¢ ID –≥—Ä—É–ø–ø—ã: -1001234567890\n"
                    "‚Ä¢ Username: @mygroup –∏–ª–∏ mygroup",
                    reply_markup=keyboard
                )
        else:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏–∑ –ë–î
            keyboard_buttons = []
            for group in groups:
                group_id = group.get('group_id', '')
                group_title = group.get('group_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                username = group.get('username', '')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–±–µ–∑ markdown, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
                if username:
                    button_text = f"{group_title} (@{username})"
                else:
                    button_text = f"{group_title} [ID: {group_id}]"
                
                keyboard_buttons.append([button_text])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard_buttons.append(["üîô –ù–∞–∑–∞–¥"])
            
            keyboard = ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            text = "üì¢ **–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏**\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é:\n\n"
            
            for i, group in enumerate(groups, 1):
                group_id = group.get('group_id', '')
                group_title = safe_markdown_text(group.get('group_title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                username = group.get('username', '')
                last_used = group.get('last_used', '')
                
                if username:
                    text += f"{i}. **{group_title}** (@{username})\n"
                else:
                    text += f"{i}. **{group_title}** [ID: {group_id}]\n"
                
                if last_used:
                    text += f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {last_used}\n"
                text += "\n"
            
            text += "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID/username –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã:"
            
            try:
                sent = await message.reply(text, reply_markup=keyboard, parse_mode="markdown")
            except Exception as e:
                logger.error(f"[PUBLIC_GROUPS] –û—à–∏–±–∫–∞ markdown –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                # –ü—Ä–æ–±—É–µ–º –±–µ–∑ markdown
                text_plain = text.replace('**', '').replace('`', '')
                sent = await message.reply(text_plain, reply_markup=keyboard)
        
        if sent is not None:
            user_states[user_id]["last_msg_id"] = sent.id
        user_states[user_id]["state"] = FSM_PUBLIC_GROUPS_TARGET
        
    except Exception as e:
        logger.error(f"[PUBLIC_GROUPS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        sent = await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {str(e)}")
        if sent is not None:
            user_states[user_id]["last_msg_id"] = sent.id
        user_states[user_id]["state"] = FSM_PUBLIC_GROUPS_TARGET

async def show_public_groups_settings(client: Client, message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    user_id = message.from_user.id
    
    source_title = user_states[user_id].get("public_source_title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    target_name = user_states[user_id].get("public_target_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    kb = get_public_groups_settings_keyboard()
    text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã**

üì§ –ò—Å—Ç–æ—á–Ω–∏–∫: {source_title}
üì¢ –¶–µ–ª—å: {target_name}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
"""
    
    sent = await message.reply(text, reply_markup=kb)
    
    if sent is not None:
        user_states[user_id]["last_msg_id"] = sent.id
    user_states[user_id]["state"] = FSM_PUBLIC_GROUPS_SETTINGS

async def get_source_channel_keyboard(user_id: int) -> Optional[ReplyKeyboardMarkup]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–∞–Ω–∞–ª–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    channels = await api_client.get_user_channels(user_id)
    
    if not channels:
        return None
    
    buttons = []
    for ch in channels:
        title = ch.get('title', '')
        channel_id = ch.get('id', '')
        username = ch.get('username', '')
        if username:
            btn_text = f"{title} (ID: {channel_id}, @{username})"
        else:
            btn_text = f"{title} (ID: {channel_id})"
        buttons.append([KeyboardButton(btn_text)])
    
    buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)



def get_public_groups_settings_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="public_stats"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="public_settings")
        ],
        [
            InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="public_start"),
            InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="public_stop")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="public_back")
        ]
    ])



async def handle_public_groups_callback(client: Client, callback_query) -> bool:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    data = callback_query.data
    
    if not data.startswith('public_'):
        return False
    
    if data == "public_stats":
        await show_public_stats(client, callback_query)
    elif data == "public_settings":
        await show_public_settings(client, callback_query)
    elif data == "public_start":
        await start_public_forwarding(client, callback_query)
    elif data == "public_stop":
        await stop_public_forwarding(client, callback_query)
    elif data == "public_back":
        await go_back_to_public_groups(client, callback_query)
    
    return True

async def show_public_stats(client: Client, callback_query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    user_id = callback_query.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
        result = await api_client.get_all_public_groups_tasks()
        
        if result.get("status") == "success":
            tasks = result.get("tasks", [])
            user_tasks = [task for task in tasks if task.get("user_id") == user_id]
            
            if user_tasks:
                total_forwarded = sum(task.get("forwarded_count", 0) for task in user_tasks)
                active_tasks = [task for task in user_tasks if task.get("status") == "running"]
                
                text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã**

üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {total_forwarded}
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {len(active_tasks)}
üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(user_tasks)}
"""
            else:
                text = """
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã**

üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ: 0
üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: 0
üìã –í—Å–µ–≥–æ –∑–∞–¥–∞—á: 0
"""
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        await safe_edit_callback_message(callback_query, text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø: {e}")
        await safe_edit_callback_message(callback_query, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def show_public_settings(client: Client, callback_query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    user_id = callback_query.from_user.id
    
    text = """
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã**

üîç –†–µ–∂–∏–º: –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: 0 —Å–µ–∫
üìù –ü—Ä–∏–ø–∏—Å–∫–∞: –ù–µ—Ç
"""
    
    await safe_edit_callback_message(callback_query, text)

async def start_public_forwarding(client: Client, callback_query):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
    user_id = callback_query.from_user.id
    
    source_id = user_states[user_id].get("public_source_id")
    target_id = user_states[user_id].get("public_target_id")
    
    if not source_id or not target_id:
        await safe_edit_callback_message(callback_query, "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —Ü–µ–ª—å")
        return
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        settings = {
            "max_posts": 10,
            "delay_seconds": 0,
            "media_filter": "all",
            "footer_text": ""
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
        result = await api_client.start_public_groups_forwarding(
            str(source_id),
            target_id,
            user_id,
            settings
        )
        
        if result.get("status") == "success":
            task_id = result.get("task_id")
            user_states[user_id]["public_task_id"] = task_id
            
            text = f"‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!\n\nüì§ –ò—Å—Ç–æ—á–Ω–∏–∫: {user_states[user_id].get('public_source_title')}\nüì¢ –¶–µ–ª—å: {user_states[user_id].get('public_target_name')}\nüÜî –ó–∞–¥–∞—á–∞: {task_id}"
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        await safe_edit_callback_message(callback_query, text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {e}")
        await safe_edit_callback_message(callback_query, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def stop_public_forwarding(client: Client, callback_query):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
    user_id = callback_query.from_user.id
    
    task_id = user_states[user_id].get("public_task_id")
    
    if not task_id:
        await safe_edit_callback_message(callback_query, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        return
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
        result = await api_client.stop_public_groups_forwarding(task_id)
        
        if result.get("status") == "success":
            text = "‚èπÔ∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            # –û—á–∏—â–∞–µ–º task_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_states[user_id].pop("public_task_id", None)
        else:
            text = f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        await safe_edit_callback_message(callback_query, text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã: {e}")
        await safe_edit_callback_message(callback_query, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def go_back_to_public_groups(client: Client, callback_query):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø"""
    user_id = callback_query.from_user.id
    
    await show_public_groups_selection(client, callback_query.message)

 