import re
from pyrogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from typing import Dict, Optional
import httpx
from bot.config import config
from bot.api_client import api_client
import textwrap
import os
from datetime import datetime
import pytz

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
posting_stats: Dict[int, Dict] = {}

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FSM –∏ last_msg_id) ---
user_states = {}

# --- FSM: —ç—Ç–∞–ø—ã ---
FSM_MAIN_MENU = "main_menu"
FSM_NONE = None

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
FSM_FORWARD_CHANNEL = "forward_channel"
FSM_FORWARD_TARGET = "forward_target"
FSM_FORWARD_SETTINGS = "forward_settings"
FSM_FORWARD_HASHTAG = "forward_hashtag"
FSM_FORWARD_DELAY = "forward_delay"
FSM_FORWARD_FOOTER = "forward_footer"
FSM_FORWARD_FOOTER_LINK = "forward_footer_link"
FSM_FORWARD_FOOTER_LINK_TEXT = "forward_footer_link_text"
FSM_FORWARD_TEXT_MODE = "forward_text_mode"
FSM_FORWARD_LIMIT = "forward_limit"
FSM_FORWARD_DIRECTION = "forward_direction"
FSM_FORWARD_MEDIA_FILTER = "forward_media_filter"
FSM_FORWARD_RANGE = "forward_range"
FSM_FORWARD_RANGE_START = "forward_range_start"
FSM_FORWARD_RANGE_END = "forward_range_end"

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–π
FSM_REACTION_CHANNEL = "reaction_channel"
FSM_REACTION_SETTINGS = "reaction_settings"
FSM_REACTION_EMOJIS = "reaction_emojis"
FSM_REACTION_MODE = "reaction_mode"
FSM_REACTION_HASHTAG = "reaction_hashtag"
FSM_REACTION_DATE = "reaction_date"
FSM_REACTION_DATE_RANGE = "reaction_date_range"
FSM_REACTION_COUNT = "reaction_count"
FSM_REACTION_CONFIRM = "reaction_confirm"

# --- –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º ---
FSM_NAVIGATION_MENU = "navigation_menu"
FSM_NAVIGATION_AWAIT_CHANNEL = "navigation_await_channel"
FSM_NAVIGATION_CONFIRM = "navigation_confirm"

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º")],
            [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á")],
            [KeyboardButton("‚≠ê –ü–µ—Ä–µ—Å—ã–ª–∫–∞")],
            [KeyboardButton("üì¢ –ü—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã")],
            [KeyboardButton("‚≠ê –†–µ–∞–∫—Ü–∏–∏")],
        ],
        resize_keyboard=True
    )

# --- –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∫–∞–Ω–∞–ª–æ–≤ ---
async def get_channel_history_keyboard(user_id):
    channels = await api_client.get_user_channels(user_id)
    print(f"[DEBUG] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è user_id={user_id}. –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã: {channels}")
    if not channels:
        print(f"[DEBUG] –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id={user_id}")
        return None
    buttons = []
    for ch in channels:
        title = ch.get('title', '')
        channel_id = ch.get('id', '')
        username = ch.get('username', '')
        if username:
            btn_text = f"{title} (ID: {channel_id}, @{username})"
        else:
            btn_text = f"{title} (ID: {channel_id})"
        buttons.append([KeyboardButton(btn_text)])
    buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    print(f"[DEBUG] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è user_id={user_id}: {[ch['title'] for ch in channels]}")
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# --- –ü–æ–ª—É—á–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ---
async def get_target_channel_history_keyboard(user_id):
    channels = await api_client.get_user_target_channels(user_id)
    print(f"[DEBUG] –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è user_id={user_id}. –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã: {channels}")
    if not channels:
        print(f"[DEBUG] –ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id={user_id}")
        return None
    buttons = []
    for ch in channels:
        title = ch.get('title', '')
        channel_id = ch.get('id', '')
        username = ch.get('username', '')
        if username:
            btn_text = f"{title} (ID: {channel_id}, @{username})"
        else:
            btn_text = f"{title} (ID: {channel_id})"
        buttons.append([KeyboardButton(btn_text)])
    buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    print(f"[DEBUG] –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è user_id={user_id}: {[ch['title'] for ch in channels]}")
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# --- –ù–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
def get_forwarding_keyboard(channel_id=None, target_channel=None):
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –∏ —Ü–µ–ª–∏ (–æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)."""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def get_forwarding_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üîç –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data="forward_parse_mode"),
            InlineKeyboardButton("üè∑Ô∏è –•—ç—à—Ç–µ–≥ —Ñ–∏–ª—å—Ç—Ä", callback_data="forward_hashtag")
        ],
        [
            InlineKeyboardButton("‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞", callback_data="forward_delay"),
            InlineKeyboardButton("üìù –ü—Ä–∏–ø–∏—Å–∫–∞", callback_data="forward_footer")
        ],
        [
            InlineKeyboardButton("üîó –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–∏–ø–∏—Å–∫–µ", callback_data="forward_footer_link")
        ],
        [
            InlineKeyboardButton("üìÑ –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞", callback_data="forward_text_mode"),
            InlineKeyboardButton("üìä –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤", callback_data="forward_limit")
        ],
        [
            InlineKeyboardButton("‚≠ê –ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="forward_paid_content"),
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="forward_clear_history")
        ],
        [
            InlineKeyboardButton("üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="forward_direction"),
            InlineKeyboardButton("üì∑ –§–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞", callback_data="forward_media_filter")
        ],
        [
            InlineKeyboardButton("üìã –î–∏–∞–ø–∞–∑–æ–Ω ID", callback_data="forward_range")
        ],
        [
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="forward_save")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_stats")
        ]
    ])

def get_parse_mode_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üè∑Ô∏è –ü–æ —Ö—ç—à—Ç–µ–≥–∞–º"), KeyboardButton("üìÑ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def get_text_mode_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—Å—Ç"), KeyboardButton("üìÑ –ö–∞–∫ –µ—Å—Ç—å")],
        [KeyboardButton("üè∑Ô∏è –¢–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def get_direction_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üîÑ –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º"), KeyboardButton("üîÑ –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def get_media_filter_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ–¥–∏–∞"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìÑ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"), KeyboardButton("üì∑ –¢–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def get_range_mode_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"""
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìÑ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"), KeyboardButton("üìã –ü–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É ID")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)





# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
def format_channel_stats(stats: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    return f"""
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats.get('members_count', 'N/A')}
üÜî –ü–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: {stats.get('last_message_id', 'N/A')}
üìù –°–ø–∞—Ä—à–µ–Ω–æ: {stats.get('parsed_posts', 'N/A')}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {stats.get('description', 'N/A')[:100] if stats.get('description') else 'N/A'}...
"""

def format_forwarding_config(config: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    paid_content_stars = config.get('paid_content_stars', 0)
    paid_content_status = f"–í–∫–ª—é—á–µ–Ω—ã ({paid_content_stars} –∑–≤–µ–∑–¥–æ—á–µ–∫)" if paid_content_stars > 0 else "–û—Ç–∫–ª—é—á–µ–Ω—ã"
    direction = config.get('parse_direction', 'backward')
    direction_text = "–û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º" if direction == "forward" else "–û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º"
    media_filter = config.get('media_filter', 'media_only')
    media_filter_text = "–¢–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞" if media_filter == "media_only" else "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
    range_mode = config.get('range_mode', 'all')
    if range_mode == "range":
        start_id = config.get('range_start_id')
        end_id = config.get('range_end_id')
        if start_id and end_id:
            range_text = f"–î–∏–∞–ø–∞–∑–æ–Ω: {start_id} - {end_id}"
        else:
            range_text = "–î–∏–∞–ø–∞–∑–æ–Ω (–Ω–µ –∑–∞–¥–∞–Ω)"
        limit_text = "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
    else:
        range_text = "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        limit_val = config.get('max_posts')
        limit_text = f"{limit_val}" if limit_val else "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
    last_id = config.get('last_message_id')
    last_id_text = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_id}" if last_id else ""
    # –ò–º—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    target_channel = config.get('target_channel')
    target_channel_title = config.get('target_channel_title') or config.get('target_channel_name')
    if target_channel_title:
        target_channel_display = target_channel_title
    elif target_channel:
        target_channel_display = str(target_channel)
    else:
        target_channel_display = '–ù–µ –≤—ã–±—Ä–∞–Ω'
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–µ
    footer_link = config.get('footer_link')
    footer_link_text = config.get('footer_link_text')
    footer_full_link = config.get('footer_full_link', False)
    
    if footer_link:
        if footer_full_link:
            hyperlink_info = f"üîó –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: –í—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ ‚Üí {footer_link}"
        elif footer_link_text:
            hyperlink_info = f"üîó –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: \"{footer_link_text}\" ‚Üí {footer_link}"
        else:
            hyperlink_info = f"üîó –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞: {footer_link}"
    else:
        hyperlink_info = ""
    
    return f"""
üè∑Ô∏è –†–µ–∂–∏–º: {'–ü–æ —Ö—ç—à—Ç–µ–≥–∞–º' if config.get('parse_mode') == 'hashtags' else '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}
{'üè∑Ô∏è –•—ç—à—Ç–µ–≥: ' + config.get('hashtag_filter') if config.get('hashtag_filter') else ''}
‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {config.get('delay_seconds', 0)} —Å–µ–∫
üìù –ü—Ä–∏–ø–∏—Å–∫–∞: {config.get('footer_text') or '–ù–µ—Ç'}
{hyperlink_info}
üìÑ –¢–µ–∫—Å—Ç: {'–£–¥–∞–ª–∏—Ç—å' if config.get('text_mode') == 'remove' else '–ö–∞–∫ –µ—Å—Ç—å' if config.get('text_mode') == 'as_is' else '–¢–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏'}
üìä –õ–∏–º–∏—Ç: {limit_text}
‚≠êÔ∏è –ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã: {paid_content_status}
üîÑ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction_text}
üì∑ –§–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞: {media_filter_text}
üìã –î–∏–∞–ø–∞–∑–æ–Ω: {range_text}
{last_id_text}
üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_channel_display}
"""

def format_forwarding_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    return f"""
üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:
üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats.get('total_forwarded', 0)}
üìÖ –°–µ–≥–æ–¥–Ω—è: {stats.get('today_forwarded', 0)}
üè∑Ô∏è –ü–æ —Ö—ç—à—Ç–µ–≥–∞–º: {stats.get('hashtag_matches', 0)}
‚ùå –û—à–∏–±–æ–∫: {stats.get('errors_count', 0)}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('last_activity', 'N/A')}
"""





# --- API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
async def start_forwarding_api(user_id: int) -> bool:
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        return await api_client.start_forwarding(user_id)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return False

async def stop_forwarding_api(user_id: int) -> bool:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        return await api_client.stop_forwarding(user_id)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return False

async def get_forwarding_stats_api(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        return await api_client.get_forwarding_stats(user_id)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return {}

async def save_forwarding_config_api(user_id: int) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = user_states.get(user_id, {}).get('forward_settings', {})
        if not settings:
            print(f"[ERROR] –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º target_channel –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'forward_target_channel' in user_states.get(user_id, {}):
            settings['target_channel'] = user_states[user_id]['forward_target_channel']
        
        return await api_client.save_forwarding_config(user_id, settings)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return False

async def start_forwarding_parsing_api(user_id: int) -> dict:
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings = user_states.get(user_id, {}).get('forward_settings', {})
        if not settings:
            print(f"[ERROR] –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return {"success": False, "error": "–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"}
        
        # –î–æ–±–∞–≤–ª—è–µ–º target_channel –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'forward_target_channel' in user_states.get(user_id, {}):
            settings['target_channel'] = user_states[user_id]['forward_target_channel']
        
        # –ü–æ–ª—É—á–∞–µ–º source_channel
        source_channel = user_states.get(user_id, {}).get('forward_channel_id')
        target_channel = user_states.get(user_id, {}).get('forward_target_channel')
        
        if not source_channel or not target_channel:
            return {"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –∏–ª–∏ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª"}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        result = await api_client.start_parsing_background(str(source_channel), str(target_channel), settings)
        
        if result.get("status") == "started":
            return {
                "success": True, 
                "task_id": result.get("task_id"),
                "message": result.get("message", "–ü–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            }
        else:
            return {"success": False, "error": result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")}
            
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return {"success": False, "error": str(e)}

async def clear_forwarding_history_api(channel_id: int = None, target_channel: str = None) -> dict:
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        return await api_client.clear_forwarding_history(channel_id, target_channel)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return {}

async def get_forwarding_history_stats_api(channel_id: int = None, target_channel: str = None) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        return await api_client.get_forwarding_history_stats(channel_id, target_channel)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API: {e}")
        return {}

async def get_channel_info(channel_id: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ API"""
    try:
        return await api_client.get_channel_stats(channel_id)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ API: {e}")
        return {
            "id": channel_id,
            "title": f"–ö–∞–Ω–∞–ª {channel_id}",
            "username": "",
            "members_count": "N/A",
            "last_message_id": "N/A",
            "parsed_posts": "0",
            "description": ""
        }

async def get_target_channel_info(target_channel: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ API"""
    try:
        return await api_client.get_channel_stats(target_channel)
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ API: {e}")
        return {
            "id": target_channel,
            "title": f"–ö–∞–Ω–∞–ª {target_channel}",
            "username": "",
            "members_count": "N/A",
            "last_message_id": "N/A",
            "parsed_posts": "0",
            "description": ""
        }

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–¥–∞—á–∏
def get_stop_last_task_inline_keyboard(task_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"stop_task:{task_id}")]
    ])

def get_forwarding_inline_keyboard(channel_id=None, target_channel=None, last_task_id=None):
    buttons = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="forward_start"),
         InlineKeyboardButton("üì• –ü–∞—Ä—Å–∏–Ω–≥ + –ø–µ—Ä–µ—Å—ã–ª–∫–∞", callback_data="forward_parse_and_forward")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="forward_settings")],
    ]
    if last_task_id:
        buttons.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"stop_task:{last_task_id}")])
    buttons.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á", callback_data="check_tasks_status")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back")])
    return InlineKeyboardMarkup(buttons) 

def get_reaction_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π"""
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üòÄ –≠–º–æ–¥–∑–∏", callback_data="reaction_emojis"),
            InlineKeyboardButton("‚öôÔ∏è –†–µ–∂–∏–º", callback_data="reaction_mode")
        ],
        [
            InlineKeyboardButton("‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞", callback_data="reaction_delay")
        ],
        [
            InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="reaction_save"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reaction_back_to_stats")
        ]
    ])

def get_reaction_inline_keyboard(channel_id=None, last_task_id=None):
    buttons = [
        [InlineKeyboardButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="reaction_start")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="reaction_settings")],
    ]
    if last_task_id:
        buttons.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data=f"stop_reaction_task:{last_task_id}")])
    buttons.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á", callback_data="check_reaction_tasks_status")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reaction_back")])
    return InlineKeyboardMarkup(buttons) 

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_channels + user_target_channels –±–µ–∑ –¥—É–±–ª–µ–π) ---
async def get_unique_channels_keyboard(user_id):
    user_channels = await api_client.get_user_channels(user_id)
    target_channels = await api_client.get_user_target_channels(user_id)
    all_channels = {str(ch['id']): ch for ch in user_channels}
    for ch in target_channels:
        all_channels[str(ch['id'])] = ch  # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥–æ–±–∞–≤–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç
    buttons = []
    for ch in all_channels.values():
        title = ch.get('title') or ch.get('username') or f"ID: {ch['id']}"
        channel_id = ch['id']
        username = ch.get('username', '')
        if username:
            btn_text = f"{title} (ID: {channel_id}, @{username})"
        else:
            btn_text = f"{title} (ID: {channel_id})"
        buttons.append([KeyboardButton(btn_text)])
    buttons.append([KeyboardButton("–ù–∞–∑–∞–¥")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True) 