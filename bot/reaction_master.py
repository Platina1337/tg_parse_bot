import logging
import re
import asyncio
from pyrogram import Client
from pyrogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from bot.states import (
    user_states, FSM_REACTION_CHANNEL, FSM_REACTION_SETTINGS, FSM_REACTION_CONFIRM, FSM_MAIN_MENU,
    get_reaction_settings_keyboard, get_reaction_inline_keyboard,
    get_unique_channels_keyboard
)
from bot.api_client import api_client

# --- FSM: –ú–∞—Å—Ç–µ—Ä –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π ---
async def start_reaction_master(client: Client, message: Message):
    user_id = message.from_user.id
    user_states[user_id] = user_states.get(user_id, {})
    user_states[user_id]["state"] = FSM_REACTION_CHANNEL
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫—É
    user_states[user_id]["reaction_settings"] = {
        "emojis": ["üòç", "‚ù§Ô∏è"],
        "delay": 1
    }
    kb = await get_unique_channels_keyboard(user_id)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    sent = await message.reply("–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã:", reply_markup=kb or ReplyKeyboardRemove())
    user_states[user_id]["last_msg_id"] = sent.id if sent else None

async def process_reaction_fsm(client: Client, message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    state = user_states[user_id].get("state")
    logging.info(f"[FSM][REACTION] process_reaction_fsm called for user {user_id}, state={state}, text={text!r}")
    if state == FSM_REACTION_CHANNEL:
        # --- –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ '–ù–∞–∑–≤–∞–Ω–∏–µ (ID: -100..., @username)' ---
        match = re.match(r"(.+) \(ID: (-?\d+)(?:, @(\w+))?\)", text)
        if match:
            channel_id = match.group(2)
            channel_title = match.group(1)
            channel_username = match.group(3)
            logging.info(f"[FSM][REACTION] parsed from button: channel_id={channel_id}, channel_title={channel_title}, username={channel_username}")
        else:
            channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
            logging.info(f"[FSM][REACTION] resolved: channel_id={channel_id!r}, channel_title={channel_title!r}, channel_username={channel_username!r}")
        if not channel_id or channel_id in ("None", "null", ""):
            sent = await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ ID.")
            user_states[user_id]["last_msg_id"] = sent.id if sent else None
            logging.info(f"[FSM][REACTION] sent error message about channel_id")
            return
        user_states[user_id]["reaction_channel_id"] = channel_id
        user_states[user_id]["reaction_channel_title"] = channel_title
        try:
            logging.info(f"[FSM][REACTION] calling get_channel_stats for {channel_id}")
            stats = await api_client.get_channel_stats(channel_id)
            logging.info(f"[FSM][REACTION] got stats: {stats}")
            stat_text = format_channel_stats(stats)
        except Exception as e:
            logging.error(f"[FSM][REACTION] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            stat_text = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        sent = await message.reply(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_title} (ID: {channel_id}):\n\n{stat_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_reaction_inline_keyboard(channel_id)
        )
        logging.info(f"[FSM][REACTION] sent stats message: {sent}")
        user_states[user_id]["last_msg_id"] = sent.id if sent else None
        user_states[user_id]["state"] = FSM_REACTION_SETTINGS
        # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º reaction_settings, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏
        return
    if state == FSM_REACTION_SETTINGS:
        reaction_state = user_states[user_id].get("reaction_state")
        reaction_settings = user_states[user_id].setdefault("reaction_settings", {})
        if reaction_state == "emojis_input":
            emojis = text.split()
            reaction_settings["emojis"] = emojis
            user_states[user_id]["reaction_state"] = None
            await message.reply(f"–≠–º–æ–¥–∑–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(emojis)}")
            return
        if reaction_state == "date_input":
            reaction_settings["date"] = text
            user_states[user_id]["reaction_state"] = None
            await message.reply(f"–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {text}")
            return
        if reaction_state == "count_input":
            try:
                count = int(text)
                reaction_settings["count"] = count
                user_states[user_id]["reaction_state"] = None
                await message.reply(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {count}")
            except Exception:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
            return
        if reaction_state == "hashtag_input":
            reaction_settings["hashtag"] = text.strip()
            user_states[user_id]["reaction_state"] = None
            await message.reply(f"–•—ç—à—Ç–µ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {text.strip()}")
            return
        if reaction_state == "period_input":
            try:
                date_from, date_to = text.split()
                reaction_settings["date_from"] = date_from
                reaction_settings["date_to"] = date_to
                user_states[user_id]["reaction_state"] = None
                await message.reply(f"–ü–µ—Ä–∏–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {date_from} - {date_to}")
            except Exception:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î")
            return
        if reaction_state == "delay_input":
            try:
                delay = float(text)
                reaction_settings["delay"] = delay
                user_states[user_id]["reaction_state"] = None
                await message.reply(f"–ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {delay} —Å–µ–∫.")
            except Exception:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å–µ–∫—É–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 0.5)")
            return
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥—Ä–µ–∂–∏–º–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        return
    if state == FSM_REACTION_CONFIRM:
        channel_id = user_states[user_id]["reaction_channel_id"]
        settings = user_states[user_id]["reaction_settings"]
        result = await api_client.start_mass_reactions(channel_id, settings)
        if result.get("success"):
            task_id = result.get("task_id", "")
            await message.reply(f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!\n\n{result.get('message','')}\n\nüÜî ID –∑–∞–¥–∞—á–∏: {task_id}")
        else:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.get('error','')}")
        user_states[user_id]["state"] = FSM_MAIN_MENU
        return

async def reaction_callback_handler(client, callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data
    if user_id not in user_states:
        await callback_query.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ /start –∏–ª–∏ /sessions", show_alert=True)
        return
    state = user_states[user_id].get("state")
    reaction_settings = user_states[user_id].setdefault("reaction_settings", {})
    channel_id = user_states[user_id].get("reaction_channel_id")
    if data == "reaction_start":
        user_states[user_id]["state"] = FSM_REACTION_CONFIRM
        await callback_query.answer("–ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π!")
        logging.info(f"[BOT][REACTIONS] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ API: channel_id={channel_id}, settings={reaction_settings}")
        result = await api_client.start_mass_reactions(channel_id, reaction_settings)
        if result.get("success"):
            task_id = result.get("task_id", "")
            await callback_query.message.reply(f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!\n\n{result.get('message','')}\n\nüÜî ID –∑–∞–¥–∞—á–∏: {task_id}")
        else:
            await callback_query.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.get('error','')}")
        logging.info(f"[BOT][REACTIONS] –ó–∞–ø—É—â–µ–Ω–∞ –º–∞—Å—Å–æ–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {reaction_settings}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        user_states[user_id]["state"] = FSM_MAIN_MENU
        return
    if data == "reaction_settings":
        await callback_query.answer()
        await callback_query.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=get_reaction_settings_keyboard()
        )
        user_states[user_id]["state"] = FSM_REACTION_SETTINGS
        return
    if data == "reaction_emojis":
        await callback_query.answer()
        current_emojis = reaction_settings.get('emojis', ["üòç", "‚ù§Ô∏è"])
        if not current_emojis:
            current_emojis = ["üòç", "‚ù§Ô∏è"]
        await callback_query.message.edit_text(
            f"–¢–µ–∫—É—â–∏–µ —ç–º–æ–¥–∑–∏: {', '.join(current_emojis)}\n\n–í–≤–µ–¥–∏—Ç–µ —ç–º–æ–¥–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: üòç ‚ù§Ô∏è):",
            reply_markup=get_reaction_settings_keyboard()
        )
        user_states[user_id]["reaction_state"] = "emojis_input"
        return
    if data == "reaction_mode":
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ù–∞ –≤—Å–µ –ø–æ—Å—Ç—ã –∑–∞ –¥–µ–Ω—å", callback_data="reaction_mode_day")],
            [InlineKeyboardButton("–ù–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ—Å—Ç–æ–≤", callback_data="reaction_mode_last_n")],
            [InlineKeyboardButton("–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö", callback_data="reaction_mode_from_last")],
            [InlineKeyboardButton("–ù–∞ –ø–æ—Å—Ç—ã —Å —Ö—ç—à—Ç–µ–≥–æ–º", callback_data="reaction_mode_hashtag")],
            [InlineKeyboardButton("–ù–∞ –ø–æ—Å—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="reaction_mode_period")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="reaction_settings")],
        ])
        await callback_query.answer()
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π:", reply_markup=kb)
        user_states[user_id]["reaction_state"] = None
        return
    if data == "reaction_mode_day":
        reaction_settings["mode"] = "by_date"
        await callback_query.answer("–†–µ–∂–∏–º: –≤—Å–µ –ø–æ—Å—Ç—ã –∑–∞ –¥–µ–Ω—å")
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î):", reply_markup=get_reaction_settings_keyboard())
        user_states[user_id]["reaction_state"] = "date_input"
        return
    if data == "reaction_mode_last_n":
        reaction_settings["mode"] = "last_n"
        await callback_query.answer("–†–µ–∂–∏–º: –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–æ—Å—Ç–æ–≤")
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤:", reply_markup=get_reaction_settings_keyboard())
        user_states[user_id]["reaction_state"] = "count_input"
        return
    if data == "reaction_mode_from_last":
        reaction_settings["mode"] = "from_last"
        await callback_query.answer("–†–µ–∂–∏–º: —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö")
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏:", reply_markup=get_reaction_settings_keyboard())
        user_states[user_id]["reaction_state"] = "count_input"
        return
    if data == "reaction_mode_hashtag":
        reaction_settings["mode"] = "by_hashtag"
        await callback_query.answer("–†–µ–∂–∏–º: –ø–æ —Ö—ç—à—Ç–µ–≥—É")
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #):", reply_markup=get_reaction_settings_keyboard())
        user_states[user_id]["reaction_state"] = "hashtag_input"
        return
    if data == "reaction_mode_period":
        reaction_settings["mode"] = "by_period"
        await callback_query.answer("–†–µ–∂–∏–º: –∑–∞ –ø–µ—Ä–∏–æ–¥")
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î (–æ—Ç –∏ –¥–æ):", reply_markup=get_reaction_settings_keyboard())
        user_states[user_id]["reaction_state"] = "period_input"
        return
    if data == "reaction_hashtag":
        await callback_query.answer()
        await callback_query.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π —Ö—ç—à—Ç–µ–≥: {reaction_settings.get('hashtag', '–ù–µ—Ç')}\n\n–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #):",
            reply_markup=get_reaction_settings_keyboard()
        )
        user_states[user_id]["reaction_state"] = "hashtag_input"
        return
    if data == "reaction_date_range":
        await callback_query.answer()
        await callback_query.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: {reaction_settings.get('date_from', '–ù–µ—Ç')} - {reaction_settings.get('date_to', '–ù–µ—Ç')}\n\n–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ì–ì–ì–ì-–ú–ú-–î–î (–æ—Ç –∏ –¥–æ):",
            reply_markup=get_reaction_settings_keyboard()
        )
        user_states[user_id]["reaction_state"] = "period_input"
        return
    if data == "reaction_count":
        await callback_query.answer()
        await callback_query.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {reaction_settings.get('count', '–ù–µ—Ç')}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤:",
            reply_markup=get_reaction_settings_keyboard()
        )
        user_states[user_id]["reaction_state"] = "count_input"
        return
    if data == "reaction_delay":
        await callback_query.answer()
        delay_val = reaction_settings.get('delay', 1)
        await callback_query.message.edit_text(
            f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay_val} —Å–µ–∫.\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1):",
            reply_markup=get_reaction_settings_keyboard()
        )
        user_states[user_id]["reaction_state"] = "delay_input"
        return
    if data == "reaction_save":
        await callback_query.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await callback_query.message.edit_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_reaction_inline_keyboard(channel_id)
        )
        user_states[user_id]["state"] = FSM_REACTION_SETTINGS
        return
    if data == "reaction_back_to_stats":
        stats = await api_client.get_channel_stats(channel_id)
        stat_text = format_channel_stats(stats)
        await callback_query.answer()
        await callback_query.message.edit_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {user_states[user_id]['reaction_channel_title']} (ID: {channel_id}):\n\n{stat_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_reaction_inline_keyboard(channel_id)
        )
        user_states[user_id]["state"] = FSM_REACTION_SETTINGS
        return
    if data == "reaction_back":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞–Ω–∞–ª–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ reaction_settings —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
        user_states[user_id]["state"] = FSM_REACTION_CHANNEL
        kb = await get_unique_channels_keyboard(user_id)
        await callback_query.answer()
        await callback_query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã:",
            reply_markup=kb or ReplyKeyboardRemove()
        )
        return
    await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è resolve_channel ---
async def resolve_channel(api_client, text):
    stats = await api_client.get_channel_stats(text)
    if stats and stats.get("id") and not stats.get("error"):
        return stats
    return None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ ---
def format_channel_stats(stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not stats:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    
    subscribers = stats.get("members_count", "N/A")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: members_count –≤–º–µ—Å—Ç–æ subscribers
    last_message_id = stats.get("last_message_id", "N/A")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: N/A –≤–º–µ—Å—Ç–æ None
    parsed_count = stats.get("parsed_posts", 0)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: parsed_posts –≤–º–µ—Å—Ç–æ parsed_count
    description = stats.get("description", "N/A")
    
    return f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}\nüÜî –ü–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: {last_message_id}\nüìù –°–ø–∞—Ä—à–µ–Ω–æ: {parsed_count}\nüìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}"

# --- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ bot_main.py ---
__all__ = [
    "start_reaction_master",
    "process_reaction_fsm",
    "reaction_callback_handler"
] 