import re
import asyncio
import logging
import os
from datetime import datetime
import pytz
from typing import Dict, Optional
import httpx
import textwrap
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, InputMediaPhoto, InputMediaVideo, ReplyKeyboardMarkup, KeyboardButton
from pyrogram.errors import MessageNotModified, ChatAdminRequired, PeerIdInvalid, ChannelPrivate
from shared.models import ParseConfig, ParseMode, PostingSettings
from bot.settings import get_user_settings, update_user_settings, clear_user_settings, get_user_templates, save_user_template, DB_PATH
from bot.states import (
    user_states, FSM_MAIN_MENU,
    FSM_AWAIT_MONITOR_CHANNEL, FSM_AWAIT_MONITOR_TARGET, FSM_AWAIT_MONITOR_STATUS,
    FSM_FORWARD_CHANNEL, FSM_FORWARD_TARGET, FSM_FORWARD_SETTINGS, FSM_FORWARD_HASHTAG,
    FSM_FORWARD_DELAY, FSM_FORWARD_FOOTER, FSM_FORWARD_TEXT_MODE, FSM_FORWARD_LIMIT,
    FSM_FORWARD_DIRECTION, FSM_FORWARD_MEDIA_FILTER, FSM_FORWARD_RANGE, FSM_FORWARD_RANGE_START, FSM_FORWARD_RANGE_END,
    get_main_keyboard, get_channel_history_keyboard, get_target_channel_history_keyboard,
    get_forwarding_keyboard, get_forwarding_settings_keyboard, get_parse_mode_keyboard, get_text_mode_keyboard,
    get_direction_keyboard, get_media_filter_keyboard, get_range_mode_keyboard,
    get_monitor_settings_keyboard, get_monitoring_stop_keyboard,
    posting_stats, start_forwarding_parsing_api, get_forwarding_history_stats_api, 
    clear_forwarding_history_api, get_channel_info, get_target_channel_info
)
from bot.config import config
from bot.core import (
    show_main_menu, format_channel_stats, format_forwarding_stats,
    start_forwarding_api, stop_forwarding_api, get_forwarding_stats_api, save_forwarding_config_api,
    check_monitoring_status, get_monitor_stat_text,
    start_forwarding_parsing_api, get_forwarding_history_stats_api, clear_forwarding_history_api,
    get_channel_info, get_target_channel_info
)
from bot.api_client import api_client
from bot.states import format_forwarding_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def safe_edit_message(client, chat_id: int, message_id: int, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ MESSAGE_NOT_MODIFIED"""
    try:
        await client.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
    except Exception as e:
        if "MESSAGE_NOT_MODIFIED" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.debug(f"Message not modified, ignoring: {e}")
            return
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"Error editing message: {e}")
            await client.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup
            )

async def safe_edit_callback_message(callback_query, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ MESSAGE_NOT_MODIFIED"""
    try:
        await callback_query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        if "MESSAGE_NOT_MODIFIED" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.debug(f"Callback message not modified, ignoring: {e}")
            return
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"Error editing callback message: {e}")
            await callback_query.message.reply(text, reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start_command(client: Client, message: Message):
    await show_main_menu(client, message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º Telegram-–∫–∞–Ω–∞–ª–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def text_handler(client: Client, message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    if user_id not in user_states:
        user_states[user_id] = {}
    last_msg_id = user_states[user_id].get('last_msg_id')
    state = user_states[user_id].get('state', None)
    old_state = state
    print(f"[FSM][DEBUG][ENTER] user_id={user_id} | old_state={old_state} | text='{text}'")
    print(f"[FSM][DEBUG] user_states[{user_id}] –Ω–∞ –≤—Ö–æ–¥–µ: {user_states[user_id]}")
    
    def set_state(new_state):
        nonlocal old_state
        print(f"[FSM][DEBUG][STATE_CHANGE] user_id={user_id} | from={old_state} -> to={new_state} | text='{text}'")
        user_states[user_id]['state'] = new_state
        old_state = new_state
        print(f"[FSM][DEBUG] user_states[{user_id}] –ø–æ—Å–ª–µ set_state: {user_states[user_id]}")
    
    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if state == FSM_MAIN_MENU or state is None:
        print(f"[FSM][DEBUG] MAIN_MENU | text='{text}'")

        if text in ["–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª", "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª"]:
            kb = await get_channel_history_keyboard(user_id)
            sent = await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=kb or ReplyKeyboardRemove())
            if last_msg_id:
                try:
                    await client.delete_messages(message.chat.id, last_msg_id)
                except Exception:
                    pass
            if sent is not None:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_AWAIT_MONITOR_CHANNEL, "last_msg_id": sent.id}
            else:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_AWAIT_MONITOR_CHANNEL}
            return
        elif text in ["–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"]:
            monitorings = await api_client.get_user_monitorings(user_id)
            if not monitorings:
                sent = await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤.", reply_markup=get_main_keyboard())
            else:
                user_channels = {ch['id']: ch['title'] for ch in await api_client.get_user_channels(user_id)}
                user_targets = {ch['id']: ch['title'] for ch in await api_client.get_user_target_channels(user_id)}
                msg = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏:\n"
                for m in monitorings:
                    src_title = user_channels.get(m['channel_id'], m['channel_id'])
                    tgt_title = user_targets.get(m['target_channel'], m['target_channel'])
                    msg += f"\n–ò–∑ {src_title} –≤ {tgt_title} (—Å {m['created_at']})"
                sent = await message.reply(msg, reply_markup=get_main_keyboard())
            last_msg_id = user_states.get(user_id, {}).get("last_msg_id")
            if last_msg_id:
                try:
                    await client.delete_messages(message.chat.id, last_msg_id)
                except Exception:
                    pass
            if sent is not None:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_MAIN_MENU, "last_msg_id": sent.id}
            else:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_MAIN_MENU}
            return

        elif text in ["–ü–µ—Ä–µ—Å—ã–ª–∫–∞ ‚≠ê", "‚≠ê –ü–µ—Ä–µ—Å—ã–ª–∫–∞"]:
            kb = await get_channel_history_keyboard(user_id)
            sent = await message.reply(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID/—Å—Å—ã–ª–∫—É:",
                reply_markup=kb or ReplyKeyboardRemove()
            )
            if last_msg_id:
                try:
                    await client.delete_messages(message.chat.id, last_msg_id)
                except Exception:
                    pass
            if sent is not None:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_FORWARD_CHANNEL, "last_msg_id": sent.id}
            else:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_FORWARD_CHANNEL}
            return
        elif text in ["–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º", "üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º"]:
            from bot.navigation_manager import navigation_menu_handler
            await navigation_menu_handler(client, message)
            return
        else:
            await show_main_menu(client, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
            return




    # --- FSM: –ü–µ—Ä–µ—Å—ã–ª–∫–∞ ---
    if state == FSM_FORWARD_CHANNEL:
        print(f"[FSM][DEBUG] FSM_FORWARD_CHANNEL | text='{text}'")
        if text == "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª":
            sent = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞:", reply_markup=ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            return
        if text == "–ù–∞–∑–∞–¥":
            await show_main_menu(client, message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            return
        match = re.match(r"(.+) \(ID: (-?\d+)\)", text)
        if match:
            channel_title = match.group(1)
            channel_id = match.group(2)
            channel_link = channel_id
            await api_client.update_user_channel_last_used(user_id, channel_id)
            user_states[user_id]["forward_channel_id"] = int(channel_id)
            user_states[user_id]["forward_channel_title"] = channel_title
        else:
            # --- –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
            channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
            user_states[user_id]["forward_channel_id"] = channel_id
            user_states[user_id]["forward_channel_title"] = channel_title
            await api_client.add_user_channel(user_id, channel_id, channel_title)
        # --- –î–û–ë–ê–í–õ–ï–ù–û: media_filter –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
        if "forward_settings" not in user_states[user_id]:
            user_states[user_id]["forward_settings"] = {}
        if "media_filter" not in user_states[user_id]["forward_settings"]:
            user_states[user_id]["forward_settings"]["media_filter"] = "media_only"
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        kb = await get_target_channel_history_keyboard(user_id)
        sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=kb or ReplyKeyboardRemove())
        if sent is not None:
            user_states[user_id]["last_msg_id"] = sent.id
        user_states[user_id]["state"] = FSM_FORWARD_TARGET
        return

    # --- FSM: –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if state == FSM_FORWARD_TARGET:
        print(f"[FSM][DEBUG] FSM_FORWARD_TARGET | text='{text}'")
        if text == "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª":
            sent = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:", reply_markup=ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            return
        if text == "–ù–∞–∑–∞–¥":
            kb = await get_channel_history_keyboard(user_id)
            sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=kb or ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            user_states[user_id]["state"] = FSM_FORWARD_CHANNEL
            return
        match = re.match(r"(.+) \(ID: (-?\d+)\)", text)
        if match:
            channel_title = match.group(1)
            channel_id = match.group(2)
            user_states[user_id]["forward_target_channel"] = channel_id
            user_states[user_id]["forward_target_title"] = channel_title
            await api_client.update_user_target_channel_last_used(user_id, channel_id)
        else:
            # --- –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
            channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
            user_states[user_id]["forward_target_channel"] = channel_id
            user_states[user_id]["forward_target_title"] = channel_title
            await api_client.add_user_target_channel(user_id, channel_id, channel_title)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        user_states[user_id]['forward_settings'] = {
            'parse_mode': 'all',  # all –∏–ª–∏ hashtags
            'hashtag_filter': None,
            'delay_seconds': 1,  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫—É–Ω–¥–∞
            'footer_text': '@TESAMSH',  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–ø–∏—Å–∫–∞
            'text_mode': 'hashtags_only',  # remove, as_is, hashtags_only
            'max_posts': None,
            'hide_sender': True
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ –∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
        try:
            stats = await api_client.get_channel_stats(str(user_states[user_id]['forward_channel_id']))
            stat_text = format_channel_stats(stats)
            sent_stat = await message.reply(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {user_states[user_id]['forward_channel_title']}:\n\n{stat_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_forwarding_keyboard()
            )
            if sent_stat is not None:
                user_states[user_id]["last_msg_id"] = sent_stat.id
            user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
            return
        except Exception as e:
            sent = await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", reply_markup=get_main_keyboard())
            user_states[user_id]["state"] = FSM_MAIN_MENU
            return

    # --- FSM: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ---
    if state == FSM_AWAIT_MONITOR_CHANNEL:
        print(f"[FSM][DEBUG] FSM_AWAIT_MONITOR_CHANNEL | text='{text}'")
        if text == "–ù–∞–∑–∞–¥":
            await show_main_menu(client, message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            return
        if text == "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª":
            sent = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞:", reply_markup=ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            return
        match = re.match(r"(.+) \(ID: (-?\d+)\)", text)
        if match:
            channel_title = match.group(1)
            channel_id = match.group(2)
            channel_link = channel_id
            await api_client.update_user_channel_last_used(user_id, channel_id)
            user_states[user_id]["monitor_channel_id"] = int(channel_id)
            user_states[user_id]["monitor_channel_title"] = channel_title
        else:
            # --- –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
            channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
            user_states[user_id]["monitor_channel_id"] = channel_id
            user_states[user_id]["monitor_channel_title"] = channel_title
            await api_client.add_user_channel(user_id, channel_id, channel_title)
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        kb = await get_target_channel_history_keyboard(user_id)
        sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=kb or ReplyKeyboardRemove())
        if sent is not None:
            user_states[user_id]["last_msg_id"] = sent.id
        user_states[user_id]["state"] = FSM_AWAIT_MONITOR_TARGET
        return

    if state == FSM_AWAIT_MONITOR_TARGET:
        print(f"[FSM][DEBUG] FSM_AWAIT_MONITOR_TARGET | text='{text}'")
        if text == "–ù–∞–∑–∞–¥":
            kb = await get_channel_history_keyboard(user_id)
            sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:", reply_markup=kb or ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            user_states[user_id]["state"] = FSM_AWAIT_MONITOR_CHANNEL
            return
        if text == "–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª":
            sent = await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ ID —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞:", reply_markup=ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            return
        match = re.match(r"(.+) \(ID: (-?\d+)\)", text)
        if match:
            channel_title = match.group(1)
            channel_id = match.group(2)
            channel_link = channel_id
            await api_client.update_user_channel_last_used(user_id, channel_id)
            user_states[user_id]["monitor_target_id"] = int(channel_id)
            user_states[user_id]["monitor_target_title"] = channel_title
        else:
            # --- –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
            channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
            user_states[user_id]["monitor_target_id"] = channel_id
            user_states[user_id]["monitor_target_title"] = channel_title
            await api_client.add_user_channel(user_id, channel_id, channel_title)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        try:
            stats = await api_client.get_channel_stats(str(user_states[user_id]['monitor_channel_id']))
            stat_text = get_monitor_stat_text(stats, user_states[user_id].get('monitor_settings', {}))
            sent_stat = await message.reply(stat_text, reply_markup=ReplyKeyboardRemove())
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton("üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")],
                    [KeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")],
                    [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
                    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                    [KeyboardButton("üîô –ù–∞–∑–∞–¥")],
                ],
                resize_keyboard=True
            )
            sent2 = await message.reply("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:", reply_markup=kb)
            try:
                last_msg_id = user_states.get(user_id, {}).get("last_msg_id")
                if last_msg_id:
                    await client.delete_messages(message.chat.id, last_msg_id)
            except Exception:
                pass
            user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_AWAIT_MONITOR_STATUS, "last_msg_id": sent2.id, "stat_msg_id": sent_stat.id}
            return
        except Exception as e:
            sent = await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", reply_markup=get_main_keyboard())
            last_msg_id = user_states.get(user_id, {}).get("last_msg_id")
            if last_msg_id:
                try:
                    await client.delete_messages(message.chat.id, last_msg_id)
                except Exception:
                    pass
            user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_MAIN_MENU, "last_msg_id": sent.id}
            return
        return

    if state == FSM_AWAIT_MONITOR_STATUS:
        print(f"[FSM][DEBUG] FSM_AWAIT_MONITOR_STATUS | text='{text}'")
        if text == "üîô –ù–∞–∑–∞–¥":
            await show_main_menu(client, message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            return
        if text == "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API
            try:
                async with httpx.AsyncClient(timeout=10.0) as client_api:
                    resp = await client_api.post(
                        f"{config.PARSER_SERVICE_URL}/monitor/start",
                        json={
                            "source_channel_id": user_states[user_id]["monitor_channel_id"],
                            "target_channel_id": user_states[user_id]["monitor_target_id"],
                            "settings": user_states[user_id].get('monitor_settings', {})
                        }
                    )
                if resp.status_code == 200:
                    sent = await message.reply("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!", reply_markup=get_main_keyboard())
                else:
                    sent = await message.reply(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {resp.status_code} {resp.text}", reply_markup=get_main_keyboard())
            except Exception as e:
                sent = await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", reply_markup=get_main_keyboard())
            try:
                await client.delete_messages(message.chat.id, last_msg_id)
            except Exception:
                pass
            user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_MAIN_MENU, "last_msg_id": sent.id}
            return
        elif text == "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ API
            try:
                async with httpx.AsyncClient(timeout=10.0) as client_api:
                    resp = await client_api.post(
                        f"{config.PARSER_SERVICE_URL}/monitor/stop",
                        json={
                            "source_channel_id": user_states[user_id]["monitor_channel_id"],
                            "target_channel_id": user_states[user_id]["monitor_target_id"]
                        }
                    )
                if resp.status_code == 200:
                    sent = await message.reply("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_main_keyboard())
                else:
                    sent = await message.reply(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {resp.status_code} {resp.text}", reply_markup=get_main_keyboard())
            except Exception as e:
                sent = await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", reply_markup=get_main_keyboard())
            try:
                await client.delete_messages(message.chat.id, last_msg_id)
            except Exception:
                pass
            user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_MAIN_MENU, "last_msg_id": sent.id}
            return
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            # –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            settings = user_states[user_id].get('monitor_settings', {})
            settings_text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
            settings_text += f"–ó–∞–¥–µ—Ä–∂–∫–∞: {settings.get('delay', 0)} —Å–µ–∫\n"
            settings_text += f"–§–∏–ª—å—Ç—Ä –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º: {settings.get('hashtag_filter', '–ù–µ—Ç')}\n"
            settings_text += f"–î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–ø–∏—Å–∫—É: {settings.get('add_footer', False)}\n"
            settings_text += f"–ü—Ä–∏–ø–∏—Å–∫–∞: {settings.get('footer_text', '')}\n"
            sent = await message.reply(settings_text, reply_markup=get_main_keyboard())
            try:
                await client.delete_messages(message.chat.id, last_msg_id)
            except Exception:
                pass
            user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_MAIN_MENU, "last_msg_id": sent.id}
            return
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            try:
                stats = await api_client.get_monitor_stats(user_states[user_id]['monitor_channel_id'], user_states[user_id]['monitor_target_id'])
                stat_text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n\n"
                stat_text += f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('processed', 0)}\n"
                stat_text += f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats.get('forwarded', 0)}\n"
                stat_text += f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats.get('skipped', 0)}\n"
                stat_text += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('last_activity', '–ù–µ—Ç')}\n"
                sent = await message.reply(stat_text, reply_markup=get_main_keyboard())
            except Exception as e:
                sent = await message.reply(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", reply_markup=get_main_keyboard())
            try:
                await client.delete_messages(message.chat.id, last_msg_id)
            except Exception:
                pass
            user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_MAIN_MENU, "last_msg_id": sent.id}
            return
        else:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
            return





    # --- FSM: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if state == FSM_FORWARD_SETTINGS:
        print(f"[FSM][DEBUG] FSM_FORWARD_SETTINGS | text='{text}'")
        forward_state = user_states[user_id].get('forward_state')
        if forward_state == 'paid_content_every_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                every = int(text.strip())
                if every <= 0:
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_every'] = every
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                return
        # --- –î–ª—è hashtag_select: —Å–Ω–∞—á–∞–ª–∞ —Ö—ç—à—Ç–µ–≥, –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–π N-–π, –ø–æ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å ---
        if forward_state == 'paid_content_hashtag_input_for_every':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            hashtag = text.strip().lstrip('#')
            user_states[user_id]['forward_settings']['paid_content_hashtag'] = hashtag
            user_states[user_id]['forward_state'] = 'paid_content_every_input_for_hashtag'
            await message.reply("–ö–∞–∂–¥—ã–π –∫–∞–∫–æ–π –ø–æ—Å—Ç —Å —ç—Ç–∏–º —Ö—ç—à—Ç–µ–≥–æ–º –¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
            return
        if forward_state == 'paid_content_every_input_for_hashtag':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                every = int(text.strip())
                if every <= 0:
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_every'] = every
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'paid_content_hashtag_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            hashtag = text.strip().lstrip('#')
            user_states[user_id]['forward_settings']['paid_content_hashtag'] = hashtag
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º hashtag_random, –ø–æ—Å–ª–µ —Ö—ç—à—Ç–µ–≥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–Ω—Å
            if user_states[user_id]['forward_settings']['paid_content_mode'] == 'hashtag_random':
                user_states[user_id]['forward_state'] = 'paid_content_chance_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å (–æ—Ç 1 –¥–æ 10), —Å –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º:", reply_markup=ReplyKeyboardRemove())
                return
            else:
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'paid_content_chance_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                chance = int(text.strip())
                if not (1 <= chance <= 10):
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 ‚Äî 20% –ø–æ—Å—Ç–æ–≤ –±—É–¥—É—Ç –ø–ª–∞—Ç–Ω—ã–º–∏)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_chance'] = chance
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 ‚Äî 20% –ø–æ—Å—Ç–æ–≤ –±—É–¥—É—Ç –ø–ª–∞—Ç–Ω—ã–º–∏)", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'paid_content_stars_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                stars = int(text.strip())
                if stars <= 0:
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_stars'] = stars
                user_states[user_id]['forward_state'] = None
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                await show_forwarding_settings(client, message, user_id)
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'hashtag_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö—ç—à—Ç–µ–≥–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            hashtag = text.strip()
            if hashtag.startswith('#'):
                hashtag = hashtag[1:]  # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ "–ü–æ —Ö—ç—à—Ç–µ–≥–∞–º" –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω —Ö—ç—à—Ç–µ–≥
            user_states[user_id]['forward_settings']['hashtag_filter'] = hashtag
            user_states[user_id]['forward_settings']['parse_mode'] = 'hashtags'  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            user_states[user_id]['forward_state'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            sent = await message.reply(
                f"‚úÖ –•—ç—à—Ç–µ–≥ '{hashtag}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif forward_state == 'delay_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            try:
                delay = int(text.strip())
                if delay < 0:
                    delay = 0
                user_states[user_id]['forward_settings']['delay_seconds'] = delay
                user_states[user_id]['forward_state'] = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏.")
                return
        elif forward_state == 'footer_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–ø–∏—Å–∫–∏
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            footer = text.strip()
            if footer.lower() == '—É–±—Ä–∞—Ç—å':
                footer = ''
            user_states[user_id]['forward_settings']['footer_text'] = footer
            user_states[user_id]['forward_state'] = None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            footer_display = footer if footer else '–ù–µ—Ç'
            sent = await message.reply(
                f"‚úÖ –ü—Ä–∏–ø–∏—Å–∫–∞ '{footer_display}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif forward_state == 'limit_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            try:
                if text.strip().lower() == '0' or text.strip().lower() == '–±–µ–∑ –ª–∏–º–∏—Ç–∞':
                    limit = None
                else:
                    limit = int(text.strip())
                    if limit < 0:
                        limit = None
                user_states[user_id]['forward_settings']['max_posts'] = limit
                user_states[user_id]['forward_state'] = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                limit_display = str(limit) if limit else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'
                sent = await message.reply(
                    f"‚úÖ –õ–∏–º–∏—Ç {limit_display} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∏–ª–∏ '0' –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞.")
                return
        
        # --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
        elif forward_state == 'range_start_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ID –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            try:
                start_id = int(text.strip())
                if start_id < 0:
                    await message.reply("ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    return
                
                user_states[user_id]['forward_settings']['range_start_id'] = start_id
                user_states[user_id]['forward_state'] = 'range_end_input'
                
                sent = await message.reply(
                    f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π ID: {start_id}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
        
        elif forward_state == 'range_end_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ ID –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ID
                user_states[user_id]['forward_state'] = 'range_start_input'
                sent = await message.reply(
                    "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            
            try:
                end_id = int(text.strip())
                if end_id < 0:
                    await message.reply("ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    return
                
                start_id = user_states[user_id]['forward_settings'].get('range_start_id')
                if start_id and end_id < start_id:
                    await message.reply("–ö–æ–Ω–µ—á–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—å–Ω–æ–º—É ID.")
                    return
                
                user_states[user_id]['forward_settings']['range_end_id'] = end_id
                user_states[user_id]['forward_state'] = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω ID: {start_id} - {end_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
        elif text == "üè∑Ô∏è –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            current_mode = user_states[user_id]['forward_settings'].get('parse_mode', 'all')
            new_mode = 'hashtags' if current_mode == 'all' else 'all'
            user_states[user_id]['forward_settings']['parse_mode'] = new_mode
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", –æ—á–∏—â–∞–µ–º —Ö—ç—à—Ç–µ–≥
            if new_mode == 'all':
                user_states[user_id]['forward_settings']['hashtag_filter'] = None
            
            mode_text = "–ü–æ —Ö—ç—à—Ç–µ–≥–∞–º" if new_mode == 'hashtags' else "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            sent = await message.reply(
                f"‚úÖ –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: {mode_text}!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
            current_delay = user_states[user_id]['forward_settings'].get('delay_seconds', 0)
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {current_delay} —Å–µ–∫\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            user_states[user_id]['forward_state'] = 'delay_input'
            return
        elif text == "üìù –ü—Ä–∏–ø–∏—Å–∫–∞":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–ø–∏—Å–∫–∏
            current_footer = user_states[user_id]['forward_settings'].get('footer_text', '')
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞: '{current_footer or '–ù–µ—Ç'}'\\n\\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–ø–∏—Å–∫—É (–∏–ª–∏ '—É–±—Ä–∞—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            user_states[user_id]['forward_state'] = 'footer_input'
            return
        elif text == "üìÑ –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞
            current_mode = user_states[user_id]['forward_settings'].get('text_mode', 'hashtags_only')
            modes = ['hashtags_only', 'as_is', 'no_text']
            current_index = modes.index(current_mode)
            new_index = (current_index + 1) % len(modes)
            new_mode = modes[new_index]
            user_states[user_id]['forward_settings']['text_mode'] = new_mode
            
            mode_texts = {
                'hashtags_only': '–¢–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏',
                'as_is': '–ö–∞–∫ –µ—Å—Ç—å',
                'no_text': '–£–¥–∞–ª–∏—Ç—å'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            sent = await message.reply(
                f"‚úÖ –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞: {mode_texts[new_mode]}!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üìä –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ª–∏–º–∏—Ç–∞
            current_limit = user_states[user_id]['forward_settings'].get('max_posts')
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_limit or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}\\n\\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ (–∏–ª–∏ '0' –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            user_states[user_id]['forward_state'] = 'limit_input'
            return
        elif text == "üè∑Ô∏è –•—ç—à—Ç–µ–≥ —Ñ–∏–ª—å—Ç—Ä":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ö—ç—à—Ç–µ–≥–∞
            current_hashtag = user_states[user_id]['forward_settings'].get('hashtag_filter', '')
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∏–π —Ö—ç—à—Ç–µ–≥: '{current_hashtag or '–ù–µ—Ç'}'\\n\\n–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ #):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            user_states[user_id]['forward_state'] = 'hashtag_input'
            return
        elif text == "üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            kb = await get_target_channel_history_keyboard(user_id)
            sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=kb or ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            user_states[user_id]['state'] = FSM_FORWARD_TARGET
            return
        elif text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = await save_forwarding_config_api(user_id)
            if success:
                sent = await message.reply("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=get_main_keyboard())
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['state'] = FSM_MAIN_MENU
            else:
                sent = await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=get_forwarding_settings_keyboard())
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üîô –ù–∞–∑–∞–¥":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            await show_forwarding_menu(client, message, user_id)
            return
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(client, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
            return

    # –ï—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    await show_main_menu(client, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")

async def show_forwarding_settings(client, message, user_id: int):
    config = dict(user_states[user_id]['forward_settings'])
    # –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    config.setdefault('parse_direction', 'backward')
    config.setdefault('media_filter', 'media_only')
    config.setdefault('range_mode', 'all')
    config.setdefault('range_start_id', None)
    config.setdefault('range_end_id', None)
    config.setdefault('last_message_id', None)
    config_text = format_forwarding_config(config)
    kb = get_forwarding_settings_keyboard()
    if kb and hasattr(kb, 'keyboard'):
        kb.keyboard.append([KeyboardButton("–ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã")])
    sent = await message.reply(
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=kb
    )
    if sent is not None:
        user_states[user_id]['last_msg_id'] = sent.id

async def show_forwarding_menu(client, message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    channel_id = user_states[user_id].get('forward_channel_id')
    target_channel = user_states[user_id].get('forward_target_channel')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
    channel_info = await get_channel_info(str(channel_id))
    if target_channel:
        target_info = await get_target_channel_info(target_channel)
        target_display = target_info.get('title', str(target_channel))
    else:
        target_display = '–ù–µ –≤—ã–±—Ä–∞–Ω'
    channel_display = channel_info.get('title', f"–ö–∞–Ω–∞–ª {channel_id}")
    menu_text = f"üì∫ –ö–∞–Ω–∞–ª: {channel_display}\n"
    menu_text += f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_display}\n\n"
    sent = await message.reply(
        menu_text,
        reply_markup=get_forwarding_keyboard()
    )
    if sent is not None:
        user_states[user_id]['last_msg_id'] = sent.id

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def forwarding_callback_handler(client, callback_query):
    data = callback_query.data
    user_id = callback_query.from_user.id

    if data == 'start_monitoring':
        settings = user_states[user_id]['monitor_settings']
        monitor_channel_id = user_states[user_id]['monitor_channel_id']
        monitor_target_channel = user_states[user_id]['monitor_target_channel']
        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ü–õ–ê–¢–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ó forward_settings ---
        forward_settings = user_states[user_id].get('forward_settings', {})
        # –õ–û–ì–ò–†–£–ï–ú forward_settings –î–û –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"[DEBUG][MONITOR] forward_settings –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {forward_settings}")
        for key in [
            'paid_content_mode',
            'paid_content_stars',
            'paid_content_hashtag',
            'paid_content_every',
            'paid_content_chance',
        ]:
            if key in forward_settings and forward_settings[key] is not None:
                settings[key] = forward_settings[key]
        # –õ–û–ì–ò–†–£–ï–ú settings –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"[DEBUG][MONITOR] monitor_settings –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {settings}")
        if 'paid_content_every' in settings:
            try:
                settings['paid_content_every'] = int(settings['paid_content_every'])
            except Exception:
                settings['paid_content_every'] = 1
        monitor_config = {
            "user_id": user_id,
            "source_channel_id": monitor_channel_id,
            "target_channel_id": monitor_target_channel,
            "parse_mode": settings.get('parse_mode', 'all'),
            "hashtag_filter": settings.get('hashtag_filter'),
            "delay_seconds": settings.get('delay_seconds', 0),
            "footer_text": settings.get('footer_text', ''),
            "text_mode": settings.get('text_mode', 'hashtags_only'),
            "max_posts": settings.get('max_posts'),
            "hide_sender": settings.get('hide_sender', True),
            "paid_content_mode": settings.get('paid_content_mode', 'off'),
            "paid_content_stars": settings.get('paid_content_stars', 0),
            "paid_content_hashtag": settings.get('paid_content_hashtag'),
            "paid_content_every": settings.get('paid_content_every'),
            "paid_content_chance": settings.get('paid_content_chance'),
        }
        logger.info(f"[DEBUG][MONITOR] –ò—Ç–æ–≥–æ–≤—ã–π monitor_config: {monitor_config}")
        logger.info(f"[BOT][MONITOR] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_config}")
        try:
            async with httpx.AsyncClient() as client_api:
                resp = await client_api.post(f"{config.PARSER_SERVICE_URL}/forwarding/start", json=monitor_config)
                if resp.status_code == 200:
                    await api_client.add_user_monitoring(user_id, str(monitor_channel_id), str(monitor_target_channel))
                    await callback_query.answer('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!')
                    await client.send_message(callback_query.message.chat.id, f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n\n–ë–æ—Ç –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞–Ω–∞–ª–æ–º –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ {monitor_target_channel}.", reply_markup=get_main_keyboard())
                else:
                    await callback_query.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!', show_alert=True)
                    await client.send_message(callback_query.message.chat.id, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {resp.text}", reply_markup=get_main_keyboard())
        except Exception as e:
            await callback_query.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!', show_alert=True)
            await client.send_message(callback_query.message.chat.id, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", reply_markup=get_main_keyboard())
        user_states[user_id]["state"] = FSM_MAIN_MENU
        return

    if data == 'publish_now':
        if 'publish_settings' not in user_states[user_id]:
            user_states[user_id]['publish_settings'] = {'delay': 0, 'mode': '–≤—Å–µ', 'text_mode': '—Å —Ç–µ–∫—Å—Ç–æ–º', 'footer': '', 'order': 'old_to_new', 'max_posts': 0}
        publish_settings = user_states[user_id]['publish_settings']
        channel_id = user_states[user_id].get('publish_channel_id')
        target_channel_id = user_states[user_id].get('publish_target_channel')
        payload = {
            'channel_id': channel_id,
            'target_channel_id': target_channel_id,
            'posting_delay': publish_settings.get('delay', 0),
            'order': publish_settings.get('order', 'old_to_new'),
            'text_mode': publish_settings.get('text_mode', '—Å —Ç–µ–∫—Å—Ç–æ–º'),
            'mode': publish_settings.get('mode', '–≤—Å–µ'),
            'footer': publish_settings.get('footer', ''),
            'max_posts': publish_settings.get('max_posts', 0),
            'parse_mode': publish_settings.get('parse_mode', 'HTML'),
            'disable_web_page_preview': publish_settings.get('disable_web_page_preview', False),
            'disable_notification': publish_settings.get('disable_notification', False),
            'protect_content': publish_settings.get('protect_content', False),
            'add_source_link': publish_settings.get('add_source_link', True),
            'add_hashtags': publish_settings.get('add_hashtags', True),
            'custom_hashtags': publish_settings.get('custom_hashtags', []),
            'watermark_text': publish_settings.get('watermark_text'),
            'max_message_length': publish_settings.get('max_message_length', 4096),
            'truncate_long_messages': publish_settings.get('truncate_long_messages', True),
            'add_footer': publish_settings.get('add_footer', True),
            'footer_text': publish_settings.get('footer_text'),
            'add_header': publish_settings.get('add_header', True),
            'header_text': publish_settings.get('header_text'),
            'filter_words': publish_settings.get('filter_words', []),
            'replace_words': publish_settings.get('replace_words', {}),
            'add_timestamp': publish_settings.get('add_timestamp', True),
            'timestamp_format': publish_settings.get('timestamp_format', '%Y-%m-%d %H:%M:%S'),
            'timezone': publish_settings.get('timezone', 'UTC'),
            'max_posts_per_day': publish_settings.get('max_posts_per_day'),
            'min_posts_per_day': publish_settings.get('min_posts_per_day'),
            'posting_interval': publish_settings.get('posting_interval'),
        }
        try:
            async with httpx.AsyncClient() as api:
                resp = await api.post(f'{config.PARSER_SERVICE_URL}/publish', json=payload)
            if resp.status_code == 200:
                data = resp.json()
                if data.get('status') == 'ok':
                    await callback_query.answer('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!')
                    await client.send_message(callback_query.message.chat.id, f"‚úÖ {data.get('detail', '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!')}")
                    published_count = await get_actual_published_count(channel_id, target_channel_id)
                    async with httpx.AsyncClient() as client_api:
                        stats_resp = await client_api.get(f"{config.PARSER_SERVICE_URL}/channel/stats/{channel_id}")
                        stats = stats_resp.json() if stats_resp.status_code == 200 else {}
                        stat_text = get_publish_stat_text(stats, publish_settings, published_count)
                        inline_kb = InlineKeyboardMarkup([[InlineKeyboardButton('–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data='publish_now')]])
                        await client.send_message(callback_query.message.chat.id, stat_text, reply_markup=inline_kb)
                    await show_main_menu(client, callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                    user_states[user_id] = {"state": FSM_MAIN_MENU}
                else:
                    await callback_query.answer('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!', show_alert=True)
                    await client.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                await callback_query.answer('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!', show_alert=True)
                await client.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {resp.text}")
        except Exception as e:
            await callback_query.answer('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!', show_alert=True)
            await client.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return

    # --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (pagination, showmedia –∏ —Ç.–¥.) ---
    if data.startswith('page_'):
        page_idx = int(data.split("_")[1])
        pag = user_states.get(user_id, {}).get('pagination')
        if not pag:
            await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
            return
        posts = pag['posts']
        total_posts = pag['total_posts']
        total_pages = pag['total_pages']
        page_size = pag['page_size']
        msg_id = pag['msg_id']
        chat_id = pag['chat_id']
        def render_page(page_idx):
            start = page_idx * page_size
            end = start + page_size
            chunk = posts[start:end]
            text = []
            for post in chunk:
                if post['type'] == 'media_group':
                    text.append(f"–ü–æ—Å—Ç (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞):\n  media_group_id: {post['media_group_id']}\n  id —Å–æ–æ–±—â–µ–Ω–∏–π: {', '.join(str(i) for i in post['ids'])}\n  –¢–µ–∫—Å—Ç: {textwrap.shorten(post['text'], width=100)}")
                else:
                    text.append(f"–ü–æ—Å—Ç (–æ–¥–∏–Ω–æ—á–Ω—ã–π):\n  id: {post['ids'][0]}\n  –¢–µ–∫—Å—Ç: {textwrap.shorten(post['text'], width=100)}")
            return '\n\n'.join(text)
        text = render_page(page_idx)
        nav_buttons = []
        if total_pages > 1:
            nav_buttons.append([
                InlineKeyboardButton('‚è™', callback_data=f'page_0'),
                InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'page_{max(0, page_idx-1)}'),
                InlineKeyboardButton(f'{page_idx+1}/{total_pages}', callback_data='noop'),
                InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'page_{min(total_pages-1, page_idx+1)}'),
                InlineKeyboardButton('‚è©', callback_data=f'page_{total_pages-1}')
            ])
        nav_buttons.append([InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–∏–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', callback_data=f'showmedia_{page_idx}')])
        nav_buttons.append([InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_pagination')])
        sent = await client.edit_message_text(
            chat_id=chat_id,
            message_id=msg_id,
            text=f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_idx+1} –∏–∑ {total_pages}\n\n{text}",
            reply_markup=InlineKeyboardMarkup(nav_buttons)
        )
        await callback_query.answer()
        return
    if data == 'close_pagination':
        pag = user_states.get(user_id, {}).get('pagination')
        if pag:
            try:
                await client.delete_messages(pag['chat_id'], pag['msg_id'])
            except Exception:
                pass
            user_states[user_id]['pagination'] = None
        await callback_query.answer('–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞', show_alert=True)
        return
    if data == 'noop':
        await callback_query.answer()
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if data in ["clear_all_history", "clear_channel_history", "clear_target_history", "back_to_settings"]:
        await handle_clear_history_callback(client, callback_query, user_id)
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if data == "forward_parse_mode":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìù –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="forward_parse_all"),
                InlineKeyboardButton("üè∑Ô∏è –¢–æ–ª—å–∫–æ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏", callback_data="forward_parse_hashtags")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=kb
        )
        return
    
    if data == "forward_parse_all":
        user_states[user_id]['forward_settings']['parse_mode'] = 'all'
        # –û—á–∏—â–∞–µ–º —Ö—ç—à—Ç–µ–≥ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        user_states[user_id]['forward_settings']['hashtag_filter'] = None
        await callback_query.answer("‚úÖ –†–µ–∂–∏–º: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_parse_hashtags":
        user_states[user_id]['forward_settings']['parse_mode'] = 'hashtags'
        await callback_query.answer("‚úÖ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_hashtag":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ö—ç—à—Ç–µ–≥–∞
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #news):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'hashtag_input'
        return
    
    if data == "forward_delay":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
        current_delay = user_states[user_id]['forward_settings'].get('delay_seconds', 0)
        await safe_edit_callback_message(
            callback_query,
            f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {current_delay} —Å–µ–∫\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 - –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'delay_input'
        return
    
    if data == "forward_footer":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–ø–∏—Å–∫–∏
        current_footer = user_states[user_id]['forward_settings'].get('footer_text', '')
        await safe_edit_callback_message(
            callback_query,
            f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞: {current_footer or '–ù–µ—Ç'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–ø–∏—Å–∫—É (–∏–ª–∏ '—É–±—Ä–∞—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'footer_input'
        return
    
    if data == "forward_text_mode":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ–∫—Å—Ç–∞
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìù –ö–∞–∫ –µ—Å—Ç—å", callback_data="forward_text_as_is"),
                InlineKeyboardButton("üè∑Ô∏è –¢–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏", callback_data="forward_text_hashtags_only")
            ],
            [
                InlineKeyboardButton("‚ùå –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", callback_data="forward_text_no_text"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")
            ]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:",
            reply_markup=kb
        )
        return
    
    if data == "forward_text_as_is":
        user_states[user_id]['forward_settings']['text_mode'] = 'as_is'
        await callback_query.answer("‚úÖ –¢–µ–∫—Å—Ç: –∫–∞–∫ –µ—Å—Ç—å")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_text_hashtags_only":
        user_states[user_id]['forward_settings']['text_mode'] = 'hashtags_only'
        await callback_query.answer("‚úÖ –¢–µ–∫—Å—Ç: —Ç–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_text_no_text":
        user_states[user_id]['forward_settings']['text_mode'] = 'no_text'
        await callback_query.answer("‚úÖ –¢–µ–∫—Å—Ç: –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_limit":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ª–∏–º–∏—Ç–∞
        current_limit = user_states[user_id]['forward_settings'].get('max_posts')
        await safe_edit_callback_message(
            callback_query,
            f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_limit or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ (–∏–ª–∏ '0' –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'limit_input'
        return
    
    if data == "forward_paid_content":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="forward_paid_off"),
                InlineKeyboardButton("–ü–æ —Ö—ç—à—Ç–µ–≥—É", callback_data="forward_paid_hashtag")
            ],
            [
                InlineKeyboardButton("–†–∞–Ω–¥–æ–º–Ω–æ", callback_data="forward_paid_random"),
                InlineKeyboardButton("–ü–æ —Ö—ç—à—Ç–µ–≥—É + —Ä–∞–Ω–¥–æ–º–Ω–æ", callback_data="forward_paid_hashtag_random")
            ],
            [
                InlineKeyboardButton("–ü–æ —Ö—ç—à—Ç–µ–≥—É + –≤—ã–±–æ—Ä", callback_data="forward_paid_hashtag_select"),
                InlineKeyboardButton("–í—ã–±–æ—Ä", callback_data="forward_paid_select")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:",
            reply_markup=kb
        )
        return
    if data == "forward_paid_select":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'select'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–ö–∞–∂–¥—ã–π –∫–∞–∫–æ–π –ø–æ—Å—Ç –¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_every_input'
        return
    if data == "forward_paid_off":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'off'
        user_states[user_id]['forward_settings']['paid_content_stars'] = 0
        user_states[user_id]['forward_settings']['paid_content_hashtag'] = None
        user_states[user_id]['forward_settings']['paid_content_chance'] = None
        await callback_query.answer("–ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_paid_hashtag":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'hashtag'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_hashtag_input'
        return
    if data == "forward_paid_random":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'random'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å (–æ—Ç 1 –¥–æ 10), —Å –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_chance_input'
        return
    if data == "forward_paid_hashtag_random":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'hashtag_random'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_hashtag_input'
        user_states[user_id]['forward_settings']['paid_content_chance'] = None
        return
    if data == "forward_paid_hashtag_select":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'hashtag_select'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_hashtag_input_for_every'
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–∑–≤–µ–∑–¥), —Ö—ç—à—Ç–µ–≥–∞ –∏ —à–∞–Ω—Å–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    if user_states[user_id].get('forward_state') == 'paid_content_stars_input' and callback_query.message:
        text = callback_query.message.text
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç —á–∏—Å–ª–æ –≤ —á–∞—Ç (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ text_handler)
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –ø–æ –∫–Ω–æ–ø–∫–µ
        return
    if user_states[user_id].get('forward_state') == 'paid_content_hashtag_input' and callback_query.message:
        text = callback_query.message.text
        return
    if user_states[user_id].get('forward_state') == 'paid_content_chance_input' and callback_query.message:
        text = callback_query.message.text
        return
    
    if data == "forward_save":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        success = await save_forwarding_config_api(user_id)
        if success:
            try:
                await callback_query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            except Exception:
                pass
            await show_forwarding_menu(client, callback_query.message, user_id)
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_back":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å—Ä–∞–∑—É –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–µ—Å—ã–ª–∫—É
        await show_main_menu(client, callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        user_states[user_id]["state"] = FSM_MAIN_MENU
        return
    
    # --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
    if data == "forward_direction":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º", callback_data="forward_direction_forward"),
                InlineKeyboardButton("üîÑ –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º", callback_data="forward_direction_backward")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=kb
        )
        return
    if data == "forward_direction_forward":
        user_states[user_id]['forward_settings']['parse_direction'] = 'forward'
        await callback_query.answer("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_direction_backward":
        user_states[user_id]['forward_settings']['parse_direction'] = 'backward'
        await callback_query.answer("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_media_filter":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÑ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="forward_media_all"),
                InlineKeyboardButton("üì∑ –¢–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞", callback_data="forward_media_only")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞:",
            reply_markup=kb
        )
        return
    if data == "forward_media_all":
        user_states[user_id]['forward_settings']['media_filter'] = 'all'
        await callback_query.answer("–§–∏–ª—å—Ç—Ä: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_media_only":
        user_states[user_id]['forward_settings']['media_filter'] = 'media_only'
        await callback_query.answer("–§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_range":
        channel_id = user_states[user_id].get('forward_channel_id')
        if not channel_id:
            await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª!", show_alert=True)
            return
        try:
            async with httpx.AsyncClient() as client_api:
                resp = await client_api.get(f"{config.PARSER_SERVICE_URL}/channel/last-message/{channel_id}")
                if resp.status_code == 200:
                    data_api = resp.json()
                    last_id = data_api.get('last_message_id')
                    user_states[user_id]['forward_settings']['last_message_id'] = last_id
                    msg = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {last_id}\n\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:"
                    kb = ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
                    await safe_edit_callback_message(callback_query, msg, reply_markup=kb)
                    user_states[user_id]['forward_state'] = 'range_start_input'
                else:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID!", show_alert=True)
                    await show_forwarding_settings(client, callback_query.message, user_id)
            return
        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_last_id":
        channel_id = user_states[user_id].get('forward_channel_id')
        if not channel_id:
            await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª!", show_alert=True)
            return
        try:
            async with httpx.AsyncClient() as client_api:
                resp = await client_api.get(f"{config.PARSER_SERVICE_URL}/channel/last-message/{channel_id}")
                if resp.status_code == 200:
                    data = resp.json()
                    last_id = data.get('last_message_id')
                    await callback_query.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_id}")
                    info_text = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
                    info_text += f"ID: {last_id}\n"
                    info_text += f"–î–∞—Ç–∞: {data.get('last_message_date', 'N/A')}\n"
                    info_text += f"–ï—Å—Ç—å –º–µ–¥–∏–∞: {'–î–∞' if data.get('has_media') else '–ù–µ—Ç'}\n"
                    info_text += f"–¢–∏–ø –º–µ–¥–∏–∞: {data.get('media_type', 'N/A')}\n"
                    info_text += f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {data.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤"
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
                    await safe_edit_callback_message(
                        callback_query,
                        info_text,
                        reply_markup=kb
                    )
                else:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID!", show_alert=True)
        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        return
    
    if data == "forward_back_to_settings":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data.startswith('showmedia_'):
        page_idx = int(data.split('_')[1])
        pag = user_states.get(user_id, {}).get('pagination')
        if not pag:
            try:
                await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
            except Exception:
                pass
            return
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ Telegram
        try:
            await callback_query.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞...', show_alert=False)
        except Exception:
            pass
        posts = pag['posts']
        page_size = pag['page_size']
        start = page_idx * page_size
        end = start + page_size
        chunk = posts[start:end]
        media_sent = 0
        for idx, post in enumerate(chunk):
            print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ #{idx+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {post}")
            # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
            if post['type'] == 'media_group':
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {media_files}")
                media_objs = []
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            media_objs.append(InputMediaPhoto(f))
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            media_objs.append(InputMediaVideo(f))
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if media_objs:
                    try:
                        await client.send_media_group(callback_query.message.chat.id, media=media_objs)
                        media_sent += 1
                        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø: {media_objs}")
                    except Exception as e:
                        print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                else:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã!")
            else:
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {media_files}")
                found = False
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        found = True
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            try:
                                with open(f, "rb") as img:
                                    await client.send_photo(callback_query.message.chat.id, img)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            try:
                                with open(f, "rb") as vid:
                                    await client.send_video(callback_query.message.chat.id, vid)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if not found:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞!")
        print(f"[DEBUG] –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞: {media_sent}")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await client.send_message(callback_query.message.chat.id, f'–ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {media_sent}')
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if data == "forward_clear_history":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="forward_clear_all_history"),
                InlineKeyboardButton("üì∫ –¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª", callback_data="forward_clear_channel_history")
            ],
            [
                InlineKeyboardButton("üéØ –¢–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–π", callback_data="forward_clear_target_history"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")
            ]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å:",
            reply_markup=kb
        )
        return
    
    if data == "forward_clear_all_history":
        # –û—á–∏—â–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        channel_id = user_states[user_id].get('forward_channel_id')
        target_channel = user_states[user_id].get('forward_target_channel')
        result = await clear_forwarding_history_api(channel_id, target_channel)
        if result.get('status') == 'success':
            try:
                await callback_query.answer("‚úÖ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
            except Exception:
                pass
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
            except Exception:
                pass
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_clear_channel_history":
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞
        channel_id = user_states[user_id].get('forward_channel_id')
        result = await clear_forwarding_history_api(channel_id=channel_id)
        if result.get('status') == 'success':
            try:
                await callback_query.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–Ω–∞–ª–∞ –æ—á–∏—â–µ–Ω–∞!")
            except Exception:
                pass
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
            except Exception:
                pass
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_clear_target_history":
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        target_channel = user_states[user_id].get('forward_target_channel')
        result = await clear_forwarding_history_api(target_channel=target_channel)
        if result.get('status') == 'success':
            try:
                await callback_query.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—á–∏—â–µ–Ω–∞!")
            except Exception:
                pass
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
            except Exception:
                pass
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_history_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏
        channel_id = user_states[user_id].get('forward_channel_id')
        target_channel = user_states[user_id].get('forward_target_channel')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
        channel_info = await get_channel_info(str(channel_id))
        target_info = await get_target_channel_info(target_channel)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        channel_display = channel_info.get('title', f"–ö–∞–Ω–∞–ª {channel_id}")
        target_display = target_info.get('title', target_channel)
        
        stats = await get_forwarding_history_stats_api(channel_id, target_channel)
        
        if stats.get('status') == 'success':
            stats_data = stats.get('data', {})
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n"
            stats_text += f"üì∫ –ö–∞–Ω–∞–ª: {channel_display}\n"
            stats_text += f"üéØ –¶–µ–ª–µ–≤–æ–π: {target_display}\n"
            stats_text += f"üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats_data.get('total_forwarded', 0)}\n"
            stats_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {stats_data.get('today_forwarded', 0)}\n"
            stats_text += f"üìÖ –í—á–µ—Ä–∞: {stats_data.get('yesterday_forwarded', 0)}\n"
            stats_text += f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats_data.get('week_forwarded', 0)}\n"
            stats_text += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {stats_data.get('month_forwarded', 0)}\n"
        else:
            stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏"
        
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        await safe_edit_callback_message(callback_query, stats_text, reply_markup=kb)
        return
    
    if data.startswith('showmedia_'):
        page_idx = int(data.split('_')[1])
        pag = user_states.get(user_id, {}).get('pagination')
        if not pag:
            try:
                await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
            except Exception:
                pass
            return
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ Telegram
        try:
            await callback_query.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞...', show_alert=False)
        except Exception:
            pass
        posts = pag['posts']
        page_size = pag['page_size']
        start = page_idx * page_size
        end = start + page_size
        chunk = posts[start:end]
        media_sent = 0
        for idx, post in enumerate(chunk):
            print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ #{idx+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {post}")
            # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
            if post['type'] == 'media_group':
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {media_files}")
                media_objs = []
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            media_objs.append(InputMediaPhoto(f))
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            media_objs.append(InputMediaVideo(f))
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if media_objs:
                    try:
                        await client.send_media_group(callback_query.message.chat.id, media=media_objs)
                        media_sent += 1
                        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø: {media_objs}")
                    except Exception as e:
                        print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                else:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã!")
            else:
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {media_files}")
                found = False
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        found = True
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            try:
                                with open(f, "rb") as img:
                                    await client.send_photo(callback_query.message.chat.id, img)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            try:
                                with open(f, "rb") as vid:
                                    await client.send_video(callback_query.message.chat.id, vid)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if not found:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞!")
        print(f"[DEBUG] –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞: {media_sent}")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await client.send_message(callback_query.message.chat.id, f'–ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {media_sent}')
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π ---
    if data == "forward_start":
        # –†–∞–Ω—å—à–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ userbot —á–µ—Ä–µ–∑ check_userbot_admin_rights
        # –¢–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
        try:
            success = await start_forwarding_api(user_id)
            if success:
                try:
                    await callback_query.answer("‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
                except Exception:
                    pass
                await show_forwarding_menu(client, callback_query.message, user_id)
            else:
                try:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏", show_alert=True)
                except Exception:
                    pass
        except Exception as e:
            try:
                await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_stop":
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
        try:
            success = await stop_forwarding_api(user_id)
            if success:
                try:
                    await callback_query.answer("‚è∏Ô∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                except Exception:
                    pass
                await show_forwarding_menu(client, callback_query.message, user_id)
            else:
                try:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏", show_alert=True)
                except Exception:
                    pass
        except Exception as e:
            try:
                await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_parse_and_forward":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É
        try:
            success = await start_forwarding_parsing_api(user_id)
            if success:
                try:
                    await callback_query.answer("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω—ã!")
                except Exception:
                    # –ï—Å–ª–∏ callback query —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    pass
                await show_forwarding_menu(client, callback_query.message, user_id)
            else:
                try:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏", show_alert=True)
                except Exception:
                    pass
        except Exception as e:
            try:
                await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        channel_id = user_states[user_id].get('forward_channel_id')
        target_channel = user_states[user_id].get('forward_target_channel')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
        channel_info = await get_channel_info(str(channel_id))
        target_info = await get_target_channel_info(target_channel)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        channel_display = channel_info.get('title', f"–ö–∞–Ω–∞–ª {channel_id}")
        target_display = target_info.get('title', target_channel)
        
        stats = await get_forwarding_stats_api(channel_id)
        
        if stats.get('status') == 'success':
            stats_data = stats.get('data', {})
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n"
            stats_text += f"üì∫ –ö–∞–Ω–∞–ª: {channel_display}\n"
            stats_text += f"üéØ –¶–µ–ª–µ–≤–æ–π: {target_display}\n"
            stats_text += f"üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats_data.get('total_forwarded', 0)}\n"
            stats_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {stats_data.get('today_forwarded', 0)}\n"
            stats_text += f"üè∑Ô∏è –ü–æ —Ö—ç—à—Ç–µ–≥–∞–º: {stats_data.get('hashtag_matches', 0)}\n"
            stats_text += f"‚ùå –û—à–∏–±–æ–∫: {stats_data.get('errors_count', 0)}\n"
            stats_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats_data.get('last_activity', 'N/A')}\n"
            
        else:
            stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏"
        
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back")]])
        await safe_edit_callback_message(callback_query, stats_text, reply_markup=kb)
        return
    
    if data == "forward_settings":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        await show_forwarding_settings(client, callback_query.message, user_id)
        return

    elif callback_data == "start_forwarding":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
        user_id = callback_query.from_user.id
        channel_id = user_states[user_id]['forward_channel_id']
        target_channel = user_states[user_id]['forward_target_channel']
        
        if not target_channel:
            await callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª!", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        success = await save_forwarding_config_api(user_id)
        if not success:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!", show_alert=True)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
        success = await start_forwarding(user_id, channel_id, target_channel)
        if success:
            await callback_query.answer("‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!", show_alert=True)
            await show_forwarding_settings(client, callback_query.message, user_id)
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏!", show_alert=True)

async def start_forwarding(user_id: int, channel_id: int, target_channel: int) -> bool:
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                f"{config.PARSER_SERVICE_URL}/forwarding/start",
                json={
                    'user_id': user_id,
                    'source_channel_id': channel_id,
                    'target_channel_id': target_channel
                }
            )
        print(f"[DEBUG] start_forwarding response: {resp.status_code} - {resp.text}")
        return resp.status_code == 200
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        return False

async def check_userbot_admin_rights(client, channel_id):
    try:
        chat = await client.get_chat(channel_id)
        if hasattr(chat, 'permissions') and chat.permissions:
            # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
            return chat.permissions.can_post_messages or chat.permissions.can_send_media_messages
        if hasattr(chat, 'administrator_rights') and chat.administrator_rights:
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤
            return chat.administrator_rights.is_admin
        return False
    except (ChatAdminRequired, PeerIdInvalid, ChannelPrivate):
        return False
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ userbot: {e}")
        return False

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ ---
async def resolve_channel(api_client, channel_input):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç username (—Å @ –∏–ª–∏ –±–µ–∑) –∏–ª–∏ id, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (id, title, username)
    """
    # –£–±—Ä–∞—Ç—å @ –µ—Å–ª–∏ –µ—Å—Ç—å
    if isinstance(channel_input, str) and channel_input.startswith("@"): 
        channel_input = channel_input[1:]
    try:
        stats = await api_client.get_channel_stats(channel_input)
        channel_id = stats.get('channel_id')
        channel_title = stats.get('channel_title') or str(channel_input)
        channel_username = stats.get('username')
        return str(channel_id), channel_title, channel_username
    except Exception as e:
        return str(channel_input), str(channel_input), None