import re
import asyncio
import logging
import os
from datetime import datetime
import pytz
from typing import Dict, Optional
import httpx
import textwrap
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove, InputMediaPhoto, InputMediaVideo, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery, BotCommand
from pyrogram.errors import MessageNotModified, ChatAdminRequired, PeerIdInvalid, ChannelPrivate
from shared.models import ParseConfig, ParseMode, PostingSettings
from bot.settings import get_user_settings, update_user_settings, clear_user_settings, get_user_templates, save_user_template, DB_PATH
from bot.states import (
    user_states, FSM_MAIN_MENU,
    FSM_FORWARD_CHANNEL, FSM_FORWARD_TARGET, FSM_FORWARD_SETTINGS, FSM_FORWARD_HASHTAG,
    FSM_FORWARD_DELAY, FSM_FORWARD_FOOTER, FSM_FORWARD_FOOTER_LINK, FSM_FORWARD_FOOTER_LINK_TEXT, FSM_FORWARD_TEXT_MODE, FSM_FORWARD_LIMIT,
    FSM_FORWARD_DIRECTION, FSM_FORWARD_MEDIA_FILTER, FSM_FORWARD_RANGE, FSM_FORWARD_RANGE_START, FSM_FORWARD_RANGE_END,
    get_main_keyboard, get_channel_history_keyboard, get_target_channel_history_keyboard,
    get_forwarding_keyboard, get_forwarding_settings_keyboard, get_parse_mode_keyboard, get_text_mode_keyboard,
    get_direction_keyboard, get_media_filter_keyboard, get_range_mode_keyboard,
    posting_stats, start_forwarding_parsing_api, get_forwarding_history_stats_api, 
    clear_forwarding_history_api, get_channel_info, get_target_channel_info,
    get_stop_last_task_inline_keyboard, get_forwarding_inline_keyboard,
     format_channel_stats, format_forwarding_stats,
    start_forwarding_api, stop_forwarding_api, get_forwarding_stats_api, save_forwarding_config_api,
    start_forwarding_parsing_api, get_forwarding_history_stats_api, clear_forwarding_history_api,
    get_channel_info, get_target_channel_info,
    FSM_REACTION_CHANNEL, FSM_REACTION_SETTINGS, FSM_REACTION_EMOJIS, FSM_REACTION_MODE, FSM_REACTION_HASHTAG, FSM_REACTION_DATE, FSM_REACTION_DATE_RANGE, FSM_REACTION_COUNT, FSM_REACTION_CONFIRM,
    get_reaction_settings_keyboard, get_reaction_inline_keyboard,
)
from bot.config import config
from bot.core import (
    show_main_menu, start_forwarding_api, stop_forwarding_api, get_forwarding_stats_api, save_forwarding_config_api,
    start_forwarding_parsing_api, get_forwarding_history_stats_api, clear_forwarding_history_api,
    get_channel_info, get_target_channel_info
)
from bot.api_client import api_client
from bot.states import format_forwarding_config
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def safe_edit_message(client, chat_id: int, message_id: int, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ MESSAGE_NOT_MODIFIED"""
    try:
        await client.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=reply_markup
        )
    except Exception as e:
        if "MESSAGE_NOT_MODIFIED" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.debug(f"Message not modified, ignoring: {e}")
            return
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"Error editing message: {e}")
            await client.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup
            )

async def safe_edit_callback_message(callback_query, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è callback —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ MESSAGE_NOT_MODIFIED"""
    try:
        await callback_query.edit_message_text(text, reply_markup=reply_markup)
    except Exception as e:
        if "MESSAGE_NOT_MODIFIED" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            logger.debug(f"Callback message not modified, ignoring: {e}")
            return
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.error(f"Error editing callback message: {e}")
            await callback_query.message.reply(text, reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
async def start_command(client: Client, message: Message):
    logger.info(f"[START_COMMAND] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    try:
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("reactions", "‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏—è–º–∏"),
            BotCommand("sessions", "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏"),
            BotCommand("monitorings", "üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á"),
            BotCommand("public_groups", "üì¢ –ü—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã"),
        ]
        await client.set_bot_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é: {e}")
    
    await show_main_menu(client, message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–º Telegram-–∫–∞–Ω–∞–ª–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup_commands ---
async def setup_commands_command(client: Client, message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é"""
    logger.info(f"[SETUP_COMMANDS] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /setup_commands –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        commands = [
            BotCommand("start", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand("reactions", "‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏—è–º–∏"),
            BotCommand("sessions", "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏"),
            BotCommand("monitorings", "üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á"),
            BotCommand("public_groups", "üì¢ –ü—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã"),
        ]
        await client.set_bot_commands(commands)
        await message.reply("‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /setup_commands")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥: {e}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def text_handler(client: Client, message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    if user_id not in user_states:
        user_states[user_id] = {}
    last_msg_id = user_states[user_id].get('last_msg_id')
    state = user_states[user_id].get('state', None)
    old_state = state
    print(f"[FSM][DEBUG][ENTER] user_id={user_id} | old_state={old_state} | text='{text}'")
    print(f"[FSM][DEBUG] user_states[{user_id}] –Ω–∞ –≤—Ö–æ–¥–µ: {user_states[user_id]}")
    
    # --- FSM: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø ---
    from bot.public_groups_manager import handle_public_groups_text
    if await handle_public_groups_text(client, message):
        return  # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ

    # --- FSM: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π ---
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ handle_session_text_input, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ bot_main.py
    # from bot.session_handlers import handle_session_text_input
    # if await handle_session_text_input(client, message):
    #     return  # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–ª—å—à–µ

    def set_state(new_state):
        nonlocal old_state
        print(f"[FSM][DEBUG][STATE_CHANGE] user_id={user_id} | from={old_state} -> to={new_state} | text='{text}'")
        user_states[user_id]['state'] = new_state
        old_state = new_state
        print(f"[FSM][DEBUG] user_states[{user_id}] –ø–æ—Å–ª–µ set_state: {user_states[user_id]}")
    
    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if state == FSM_MAIN_MENU or state is None:
        print(f"[FSM][DEBUG] MAIN_MENU | text='{text}'")

        if text in ["üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á"]:
            await monitorings_command(client, message)
            return
        elif text in ["–ü–µ—Ä–µ—Å—ã–ª–∫–∞ ‚≠ê", "‚≠ê –ü–µ—Ä–µ—Å—ã–ª–∫–∞"]:
            kb = await get_channel_history_keyboard(user_id)
            sent = await message.reply(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID/—Å—Å—ã–ª–∫—É:",
                reply_markup=kb or ReplyKeyboardRemove()
            )
            if last_msg_id:
                try:
                    await client.delete_messages(message.chat.id, last_msg_id)
                except Exception:
                    pass
            if sent is not None:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_FORWARD_CHANNEL, "last_msg_id": sent.id}
            else:
                user_states[user_id] = {**user_states.get(user_id, {}), "state": FSM_FORWARD_CHANNEL}
            return
        elif text in ["–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º", "üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥–∞–º"]:
            from bot.navigation_manager import navigation_menu_handler
            await navigation_menu_handler(client, message)
            return
        elif text in ["üì¢ –ü—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã"]:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ public_groups_manager.py
            from bot.public_groups_manager import start_public_groups_manager
            await start_public_groups_manager(client, message)
            return

        elif text in ["–†–µ–∞–∫—Ü–∏–∏ ‚≠ê", "‚≠ê –†–µ–∞–∫—Ü–∏–∏"]:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ reaction_master.py
            from bot.reaction_master import start_reaction_master
            await start_reaction_master(client, message)
            return
        else:
            await show_main_menu(client, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
            return

    # –í –Ω–∞—á–∞–ª–µ text_handler, –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:
    if user_states.get(user_id, {}).get("state") in [FSM_FORWARD_FOOTER_LINK, FSM_FORWARD_FOOTER_LINK_TEXT]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id]["state"] = None

    # --- FSM: –ü–µ—Ä–µ—Å—ã–ª–∫–∞ ---
    if state == FSM_FORWARD_CHANNEL:
        print(f"[FSM][DEBUG] FSM_FORWARD_CHANNEL | text='{text}'")
        if text == "–ù–∞–∑–∞–¥":
            await show_main_menu(client, message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            return
        match = re.match(r"(.+) \(ID: (-?\d+)(?:, @(\w+))?\)", text)
        if match:
            channel_title = match.group(1)
            channel_id = match.group(2)
            username = match.group(3)
            channel_link = channel_id
            await api_client.update_user_channel_last_used(user_id, channel_id)
            user_states[user_id]["forward_channel_id"] = int(channel_id)
            user_states[user_id]["forward_channel_title"] = channel_title
            if username:
                user_states[user_id]["forward_channel_username"] = username
        else:
            # --- –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ---
            channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å numeric id, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            real_id = None
            try:
                real_id = int(channel_id)
            except (ValueError, TypeError):
                # channel_id –Ω–µ –ø—Ä–∏–≤–æ–¥–∏—Ç—Å—è –∫ int, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ get_channel_stats
                stats = await api_client.get_channel_stats(channel_id)
                real_id = stats.get("id")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                try:
                    real_id = int(real_id)
                except (ValueError, TypeError):
                    real_id = None
            
            if real_id is None:
                sent = await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username –∏–ª–∏ ID.", reply_markup=ReplyKeyboardRemove())
                if sent is not None:
                    user_states[user_id]["last_msg_id"] = sent.id
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: username –∏–ª–∏ ID
            is_username = not text.startswith("-100") and not text.isdigit()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            if is_username:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª username, —Å–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –ø–æ–ª–µ username, –∞ ID –≤ –ø–æ–ª–µ channel_id
                await api_client.add_user_channel(user_id, str(real_id), channel_title, text)
                user_states[user_id]["forward_channel_id"] = real_id
                user_states[user_id]["forward_channel_username"] = text  # username
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª ID, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –ø–æ–ª–µ channel_id, –∞ username –≤ –ø–æ–ª–µ username
                await api_client.add_user_channel(user_id, str(real_id), channel_title, channel_username)
                user_states[user_id]["forward_channel_id"] = real_id
                if channel_username:
                    user_states[user_id]["forward_channel_username"] = channel_username
            
            user_states[user_id]["forward_channel_title"] = channel_title
        # --- –î–û–ë–ê–í–õ–ï–ù–û: media_filter –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
        if "forward_settings" not in user_states[user_id]:
            user_states[user_id]["forward_settings"] = {}
        if "media_filter" not in user_states[user_id]["forward_settings"]:
            user_states[user_id]["forward_settings"]["media_filter"] = "media_only"
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        kb = await get_target_channel_history_keyboard(user_id)
        sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=kb or ReplyKeyboardRemove())
        if sent is not None:
            user_states[user_id]["last_msg_id"] = sent.id
        user_states[user_id]["state"] = FSM_FORWARD_TARGET
        return

    # --- FSM: –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if state == FSM_FORWARD_TARGET:
        print(f"[FSM][DEBUG] FSM_FORWARD_TARGET | text='{text}'")
        if text == "–ù–∞–∑–∞–¥":
            kb = await get_channel_history_keyboard(user_id)
            sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=kb or ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]["last_msg_id"] = sent.id
            user_states[user_id]["state"] = FSM_FORWARD_CHANNEL
            return
        match = re.match(r"(.+) \(ID: (-?\d+)(?:, @(\w+))?\)", text)
        if match:
            channel_title = match.group(1)
            channel_id = match.group(2)
            username = match.group(3)
            user_states[user_id]["forward_target_channel"] = channel_id
            user_states[user_id]["forward_target_title"] = channel_title
            if username:
                user_states[user_id]["forward_target_username"] = username
            await api_client.update_user_target_channel_last_used(user_id, channel_id)
        else:
            channel_id, channel_title, channel_username = await resolve_channel(api_client, text)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: username –∏–ª–∏ ID
            is_username = not text.startswith("-100") and not text.isdigit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–∑ API
            stats = await api_client.get_channel_stats(channel_id)
            real_id = stats.get("id", channel_id)
            try:
                real_id = int(real_id)
            except (ValueError, TypeError):
                real_id = channel_id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            if is_username:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª username, —Å–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –ø–æ–ª–µ username, –∞ ID –≤ –ø–æ–ª–µ channel_id
                await api_client.add_user_target_channel(user_id, str(real_id), channel_title, text)
                user_states[user_id]["forward_target_channel"] = real_id
                user_states[user_id]["forward_target_username"] = text  # username
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª ID, —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –ø–æ–ª–µ channel_id, –∞ username –≤ –ø–æ–ª–µ username
                await api_client.add_user_target_channel(user_id, str(real_id), channel_title, channel_username)
                user_states[user_id]["forward_target_channel"] = real_id
                if channel_username:
                    user_states[user_id]["forward_target_username"] = channel_username
            
            user_states[user_id]["forward_target_title"] = channel_title
        user_states[user_id]['forward_settings'] = {
            'parse_mode': 'all',
            'hashtag_filter': None,
            'delay_seconds': 1,
            'footer_text': 'üåê <a href="https://t.me/TESAMSH/4026">_TSSH_Fans_</a>',
            'text_mode': 'hashtags_only',
            'max_posts': None,
            'hide_sender': True
        }
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ –∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π
        try:
            stats = await api_client.get_channel_stats(str(user_states[user_id]['forward_channel_id']))
            stat_text = format_channel_stats(stats)
            channel_id = user_states[user_id]['forward_channel_id']
            target_channel = user_states[user_id].get('forward_target_channel')
            sent_stat = await message.reply(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {user_states[user_id]['forward_channel_title']}:\n\n{stat_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_forwarding_inline_keyboard(channel_id, target_channel)
            )
            if sent_stat is not None:
                user_states[user_id]["last_msg_id"] = sent_stat.id
            user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
            return
        except Exception as e:
            sent = await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", reply_markup=get_main_keyboard())
            user_states[user_id]["state"] = FSM_MAIN_MENU
            return
        # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ ‚Äî –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:
        await message.reply(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
            reply_markup=get_forwarding_keyboard(channel_id, target_channel)
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∞—Ç–∞:
        await client.send_message(
            message.chat.id,
            " ",
            reply_markup=get_forwarding_keyboard(channel_id, target_channel)
        )







    # --- FSM: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if state == FSM_FORWARD_SETTINGS:
        print(f"[FSM][DEBUG] FSM_FORWARD_SETTINGS | text='{text}'")
        forward_state = user_states[user_id].get('forward_state')
        if forward_state == 'paid_content_every_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                every = int(text.strip())
                if every <= 0:
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_every'] = every
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                return
        # --- –î–ª—è hashtag_select: —Å–Ω–∞—á–∞–ª–∞ —Ö—ç—à—Ç–µ–≥, –ø–æ—Ç–æ–º –∫–∞–∂–¥—ã–π N-–π, –ø–æ—Ç–æ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å ---
        if forward_state == 'paid_content_hashtag_input_for_every':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            hashtag = text.strip().lstrip('#')
            user_states[user_id]['forward_settings']['paid_content_hashtag'] = hashtag
            user_states[user_id]['forward_state'] = 'paid_content_every_input_for_hashtag'
            await message.reply("–ö–∞–∂–¥—ã–π –∫–∞–∫–æ–π –ø–æ—Å—Ç —Å —ç—Ç–∏–º —Ö—ç—à—Ç–µ–≥–æ–º –¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
            return
        if forward_state == 'paid_content_every_input_for_hashtag':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                every = int(text.strip())
                if every <= 0:
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_every'] = every
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'paid_content_hashtag_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            hashtag = text.strip().lstrip('#')
            user_states[user_id]['forward_settings']['paid_content_hashtag'] = hashtag
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º hashtag_random, –ø–æ—Å–ª–µ —Ö—ç—à—Ç–µ–≥–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —à–∞–Ω—Å
            if user_states[user_id]['forward_settings']['paid_content_mode'] == 'hashtag_random':
                user_states[user_id]['forward_state'] = 'paid_content_chance_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å (–æ—Ç 1 –¥–æ 10), —Å –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º:", reply_markup=ReplyKeyboardRemove())
                return
            else:
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'paid_content_chance_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                chance = int(text.strip())
                if not (1 <= chance <= 10):
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 ‚Äî 20% –ø–æ—Å—Ç–æ–≤ –±—É–¥—É—Ç –ø–ª–∞—Ç–Ω—ã–º–∏)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_chance'] = chance
                user_states[user_id]['forward_state'] = 'paid_content_stars_input'
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ (–ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥):", reply_markup=ReplyKeyboardRemove())
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 ‚Äî 20% –ø–æ—Å—Ç–æ–≤ –±—É–¥—É—Ç –ø–ª–∞—Ç–Ω—ã–º–∏)", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'paid_content_stars_input':
            if text == "üîô –ù–∞–∑–∞–¥":
                user_states[user_id]['forward_state'] = None
                await show_forwarding_settings(client, message, user_id)
                return
            try:
                stars = int(text.strip())
                if stars <= 0:
                    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)", reply_markup=ReplyKeyboardRemove())
                    return
                user_states[user_id]['forward_settings']['paid_content_stars'] = stars
                user_states[user_id]['forward_state'] = None
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                await show_forwarding_settings(client, message, user_id)
                return
            except ValueError:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)", reply_markup=ReplyKeyboardRemove())
                return
        if forward_state == 'hashtag_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö—ç—à—Ç–µ–≥–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            hashtag = text.strip()
            if hashtag.startswith('#'):
                hashtag = hashtag[1:]  # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –Ω–∞ "–ü–æ —Ö—ç—à—Ç–µ–≥–∞–º" –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω —Ö—ç—à—Ç–µ–≥
            user_states[user_id]['forward_settings']['hashtag_filter'] = hashtag
            user_states[user_id]['forward_settings']['parse_mode'] = 'hashtags'  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
            user_states[user_id]['forward_state'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–æ—Å—Ç–æ—è–Ω–∏–µ
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            sent = await message.reply(
                f"‚úÖ –•—ç—à—Ç–µ–≥ '{hashtag}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif forward_state == 'delay_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            try:
                delay = int(text.strip())
                if delay < 0:
                    delay = 0
                user_states[user_id]['forward_settings']['delay_seconds'] = delay
                user_states[user_id]['forward_state'] = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"‚úÖ –ó–∞–¥–µ—Ä–∂–∫–∞ {delay} —Å–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏.")
                return
        elif forward_state == 'footer_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏–ø–∏—Å–∫–∏
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            footer = text.strip()
            if footer.lower() == '—É–±—Ä–∞—Ç—å':
                footer = ''
            user_states[user_id]['forward_settings']['footer_text'] = footer
            user_states[user_id]['forward_state'] = None
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            footer_display = footer if footer else '–ù–µ—Ç'
            sent = await message.reply(
                f"‚úÖ –ü—Ä–∏–ø–∏—Å–∫–∞ '{footer_display}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif forward_state == 'limit_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            try:
                if text.strip().lower() == '0' or text.strip().lower() == '–±–µ–∑ –ª–∏–º–∏—Ç–∞':
                    limit = None
                else:
                    limit = int(text.strip())
                    if limit < 0:
                        limit = None
                user_states[user_id]['forward_settings']['max_posts'] = limit
                user_states[user_id]['forward_state'] = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                limit_display = str(limit) if limit else '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'
                sent = await message.reply(
                    f"‚úÖ –õ–∏–º–∏—Ç {limit_display} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞ –∏–ª–∏ '0' –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞.")
                return
        
        # --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
        elif forward_state == 'range_start_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ID –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['forward_state'] = None
                return
            
            try:
                start_id = int(text.strip())
                if start_id < 0:
                    await message.reply("ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    return
                
                user_states[user_id]['forward_settings']['range_start_id'] = start_id
                user_states[user_id]['forward_state'] = 'range_end_input'
                
                sent = await message.reply(
                    f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π ID: {start_id}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
        
        elif forward_state == 'range_end_input':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ ID –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if text == "üîô –ù–∞–∑–∞–¥":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ID
                user_states[user_id]['forward_state'] = 'range_start_input'
                sent = await message.reply(
                    "–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:",
                    reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            
            try:
                end_id = int(text.strip())
                if end_id < 0:
                    await message.reply("ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                    return
                
                start_id = user_states[user_id]['forward_settings'].get('range_start_id')
                if start_id and end_id < start_id:
                    await message.reply("–ö–æ–Ω–µ—á–Ω—ã–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –Ω–∞—á–∞–ª—å–Ω–æ–º—É ID.")
                    return
                
                user_states[user_id]['forward_settings']['range_end_id'] = end_id
                user_states[user_id]['forward_state'] = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                config = dict(user_states[user_id]['forward_settings'])
                config.setdefault('parse_direction', 'backward')
                config.setdefault('media_filter', 'media_only')
                config.setdefault('range_mode', 'all')
                config.setdefault('range_start_id', None)
                config.setdefault('range_end_id', None)
                config.setdefault('last_message_id', None)
                config_text = format_forwarding_config(config)
                sent = await message.reply(
                    f"‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω ID: {start_id} - {end_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                    f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                    reply_markup=get_forwarding_settings_keyboard()
                )
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                return
            except ValueError:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è ID —Å–æ–æ–±—â–µ–Ω–∏—è.")
                return
        elif text == "üè∑Ô∏è –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            current_mode = user_states[user_id]['forward_settings'].get('parse_mode', 'all')
            new_mode = 'hashtags' if current_mode == 'all' else 'all'
            user_states[user_id]['forward_settings']['parse_mode'] = new_mode
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", –æ—á–∏—â–∞–µ–º —Ö—ç—à—Ç–µ–≥
            if new_mode == 'all':
                user_states[user_id]['forward_settings']['hashtag_filter'] = None
            
            mode_text = "–ü–æ —Ö—ç—à—Ç–µ–≥–∞–º" if new_mode == 'hashtags' else "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            sent = await message.reply(
                f"‚úÖ –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞: {mode_text}!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞":
            user_states[user_id]["state"] = FSM_FORWARD_DELAY
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
            current_delay = user_states[user_id]['forward_settings'].get('delay_seconds', 0)
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {current_delay} —Å–µ–∫\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üìù –ü—Ä–∏–ø–∏—Å–∫–∞":
            user_states[user_id]["state"] = FSM_FORWARD_FOOTER
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–ø–∏—Å–∫–∏
            current_footer = user_states[user_id]['forward_settings'].get('footer_text', '')
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞: '{current_footer or '–ù–µ—Ç'}'\\n\\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–ø–∏—Å–∫—É (–∏–ª–∏ '—É–±—Ä–∞—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üìÑ –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞":
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞
            current_mode = user_states[user_id]['forward_settings'].get('text_mode', 'hashtags_only')
            modes = ['hashtags_only', 'as_is', 'no_text']
            current_index = modes.index(current_mode)
            new_index = (current_index + 1) % len(modes)
            new_mode = modes[new_index]
            user_states[user_id]['forward_settings']['text_mode'] = new_mode
            
            mode_texts = {
                'hashtags_only': '–¢–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏',
                'as_is': '–ö–∞–∫ –µ—Å—Ç—å',
                'no_text': '–£–¥–∞–ª–∏—Ç—å'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            config = dict(user_states[user_id]['forward_settings'])
            config.setdefault('parse_direction', 'backward')
            config.setdefault('media_filter', 'media_only')
            config.setdefault('range_mode', 'all')
            config.setdefault('range_start_id', None)
            config.setdefault('range_end_id', None)
            config.setdefault('last_message_id', None)
            config_text = format_forwarding_config(config)
            sent = await message.reply(
                f"‚úÖ –†–µ–∂–∏–º —Ç–µ–∫—Å—Ç–∞: {mode_texts[new_mode]}!\n\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                reply_markup=get_forwarding_settings_keyboard()
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üìä –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤":
            user_states[user_id]["state"] = FSM_FORWARD_LIMIT
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ª–∏–º–∏—Ç–∞
            current_limit = user_states[user_id]['forward_settings'].get('max_posts')
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_limit or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ (–∏–ª–∏ '0' –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üè∑Ô∏è –•—ç—à—Ç–µ–≥ —Ñ–∏–ª—å—Ç—Ä":
            user_states[user_id]["state"] = FSM_FORWARD_HASHTAG
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ö—ç—à—Ç–µ–≥–∞
            current_hashtag = user_states[user_id]['forward_settings'].get('hashtag_filter', '')
            sent = await message.reply(
                f"–¢–µ–∫—É—â–∏–π —Ö—ç—à—Ç–µ–≥: '{current_hashtag or '–ù–µ—Ç'}'\\n\\n–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ #):",
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
            )
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            kb = await get_target_channel_history_keyboard(user_id)
            sent = await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:", reply_markup=kb or ReplyKeyboardRemove())
            if sent is not None:
                user_states[user_id]['last_msg_id'] = sent.id
            user_states[user_id]['state'] = FSM_FORWARD_TARGET
            return
        elif text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = await save_forwarding_config_api(user_id)
            if success:
                sent = await message.reply("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=get_main_keyboard())
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
                user_states[user_id]['state'] = FSM_MAIN_MENU
            else:
                sent = await message.reply("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=get_forwarding_settings_keyboard())
                if sent is not None:
                    user_states[user_id]['last_msg_id'] = sent.id
            return
        elif text == "üîô –ù–∞–∑–∞–¥":
            # –ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state = user_states[user_id].get("state")
            if state == FSM_FORWARD_SETTINGS:
                # –ü–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                kb = await get_target_channel_history_keyboard(user_id)
                await safe_edit_callback_message(
                    callback_query,
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:",
                    reply_markup=kb or ReplyKeyboardRemove()
                )
                user_states[user_id]["state"] = FSM_FORWARD_TARGET
                return
            elif state == FSM_FORWARD_MONITORING or state == FSM_FORWARD_RUNNING:
                # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                stats = await api_client.get_channel_stats(str(user_states[user_id]['forward_channel_id']))
                stat_text = format_channel_stats(stats)
                channel_id = user_states[user_id]['forward_channel_id']
                target_channel = user_states[user_id].get('forward_target_channel')
                await safe_edit_callback_message(
                    callback_query,
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {user_states[user_id]['forward_channel_title']}:\n\n{stat_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_forwarding_inline_keyboard(channel_id, target_channel)
                )
                user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
                return
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await show_main_menu(client, callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                user_states[user_id]["state"] = FSM_MAIN_MENU
                return
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(client, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
            return

    # --- FSM: –í–≤–æ–¥ URL –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–∏–ø–∏—Å–∫–µ ---
    if state == FSM_FORWARD_FOOTER_LINK:
        print(f"[FSM][DEBUG] FSM_FORWARD_FOOTER_LINK | text='{text}'")
        if text == "–ù–∞–∑–∞–¥":
            await show_forwarding_settings(client, message, user_id)
            user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π URL
        new_url = text.strip()
        forwarding_config = user_states[user_id]["forward_settings"]
        forwarding_config["footer_link"] = new_url
        forwarding_config["footer_link_text"] = None
        forwarding_config["footer_full_link"] = True
        user_states[user_id]["forward_settings"] = forwarding_config
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
        text_msg = f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–∏–ø–∏—Å–∫–µ: {new_url}\n\n–í—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data="forward_footer_link_change")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏", callback_data="forward_footer_link_text")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="forward_footer_link_delete")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        sent = await message.reply(text_msg, reply_markup=keyboard)
        if sent:
            user_states[user_id]["last_msg_id"] = sent.id
        user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
        return

    # --- FSM: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–∏–ø–∏—Å–∫–µ ---
    def insert_link_once(footer_text, link_text, url):
        # –ó–∞–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ link_text –Ω–∞ —Å—Å—ã–ª–∫—É
        return re.sub(re.escape(link_text), f'<a href="{url}">{link_text}</a>', footer_text, count=1)

    if state == FSM_FORWARD_FOOTER_LINK_TEXT:
        print(f"[FSM][DEBUG] FSM_FORWARD_FOOTER_LINK_TEXT | text='{text}'")
        if text == "–ù–∞–∑–∞–¥":
            await show_forwarding_settings(client, message, user_id)
            user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
            return
        footer_text = user_states[user_id]["forward_settings"].get("footer_text", "")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∏–ø–∏—Å–∫–µ
        if text not in footer_text:
            sent = await message.reply(
                f"‚ö†Ô∏è –¢–µ–∫—Å—Ç ¬´{text}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–∏–ø–∏—Å–∫–µ.\n\n"
                f"–ü—Ä–∏–ø–∏—Å–∫–∞: {footer_text}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∏–ø–∏—Å–∫–µ."
            )
            if sent:
                user_states[user_id]["last_msg_id"] = sent.id
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
        user_states[user_id]["forward_settings"]["footer_link_text"] = text
        user_states[user_id]["forward_settings"]["footer_full_link"] = False
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é —Ç–æ–≥–æ, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–ø–∏—Å–∫–∞
        footer_link = user_states[user_id]["forward_settings"].get("footer_link", "")
        preview = insert_link_once(footer_text, text, footer_link)
        sent = await message.reply(
            f"‚úÖ –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n\n"
            f"–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–ø–∏—Å–∫–∞:\n{preview}",
        )
        if sent:
            user_states[user_id]["last_msg_id"] = sent.id
        await show_forwarding_settings(client, message, user_id)
        user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π –∏ —Ä–µ–∞–∫—Ü–∏–π
    if state and state.startswith("session_"):
        # –≠—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        return
    elif state and state.startswith("reaction_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ reaction_master.py
        from bot.reaction_master import process_reaction_fsm
        await process_reaction_fsm(client, message)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–∞–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    await show_main_menu(client, message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")

async def show_forwarding_settings(client, message, user_id: int):
    config = dict(user_states[user_id]['forward_settings'])
    # –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    config.setdefault('parse_direction', 'backward')
    config.setdefault('media_filter', 'media_only')
    config.setdefault('range_mode', 'all')
    config.setdefault('range_start_id', None)
    config.setdefault('range_end_id', None)
    config.setdefault('last_message_id', None)
    config_text = format_forwarding_config(config)
    kb = get_forwarding_settings_keyboard()
    if kb and hasattr(kb, 'keyboard'):
        kb.keyboard.append([KeyboardButton("–ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã")])
    sent = await message.reply(
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n{config_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=kb
    )
    if sent is not None:
        user_states[user_id]['last_msg_id'] = sent.id

async def show_forwarding_menu(client, message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    channel_id = user_states[user_id].get('forward_channel_id')
    target_channel = user_states[user_id].get('forward_target_channel')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
    channel_info = await get_channel_info(str(channel_id))
    if target_channel:
        target_info = await get_target_channel_info(target_channel)
        target_display = target_info.get('channel_title', str(target_channel))
    else:
        target_display = '–ù–µ –≤—ã–±—Ä–∞–Ω'
    channel_display = channel_info.get('channel_title', f"–ö–∞–Ω–∞–ª {channel_id}")
    menu_text = f"üì∫ –ö–∞–Ω–∞–ª: {channel_display}\n"
    menu_text += f"üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {target_display}\n\n"
    sent = await message.reply(
        menu_text,
        reply_markup=get_forwarding_inline_keyboard(channel_id, target_channel)
    )
    if sent is not None:
        user_states[user_id]['last_msg_id'] = sent.id

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def forwarding_callback_handler(client, callback_query):
    user_id = callback_query.from_user.id
    data = callback_query.data
    if user_id not in user_states:
        await callback_query.answer("–í–∞—à–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ /start –∏–ª–∏ /sessions", show_alert=True)
        return
    state = user_states[user_id].get("state")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ callback_data
    action = data.replace("forward_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    forwarding_config = user_states[user_id].get("forwarding_config", {})
    if not forwarding_config and "forward_settings" in user_states[user_id]:
        forwarding_config = user_states[user_id]["forward_settings"]

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–∏–ø–∏—Å–∫–µ ---
    if action == "footer_link":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–ø–∏—Å–∫–∞ (footer_text)
        footer_text = forwarding_config.get("footer_text", "")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–∏–ø–∏—Å–∫–µ (HTML <a href=...>)
        import re
        link_match = re.search(r'<a href=["\\\']([^"\\\']+)["\\\']>(.*?)</a>', footer_text)
        footer_link = forwarding_config.get("footer_link")
        if not footer_link and link_match:
            forwarding_config["footer_link"] = link_match.group(1)
            forwarding_config["footer_link_text"] = link_match.group(2)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤—Å—è –ª–∏ –ø—Ä–∏–ø–∏—Å–∫–∞ ‚Äî –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞
            # –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            import html
            text_inside_link = html.unescape(link_match.group(2)).strip()
            text_no_link = re.sub(r'<a href=["\\\']([^"\\\']+)["\\\']>(.*?)</a>', text_inside_link, footer_text).strip()
            # –ï—Å–ª–∏ –≤—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ (–±–µ–∑ —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª–æ–≤)
            if footer_text.strip() == link_match.group(0).strip():
                forwarding_config["footer_full_link"] = True
            else:
                forwarding_config["footer_full_link"] = False
            user_states[user_id]["forward_settings"] = forwarding_config
            footer_link = link_match.group(1)
        if footer_link:
            text = f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–∏–ø–∏—Å–∫–µ: {footer_link}\n\n"
            if forwarding_config.get("footer_full_link", False):
                text += "–í—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π.\n\n"
            elif forwarding_config.get("footer_link_text"):
                text += f"–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏: {forwarding_config.get('footer_link_text')}\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å URL", callback_data="forward_footer_link_change")],
                [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏", callback_data="forward_footer_link_text")],
                [InlineKeyboardButton("‚úÖ –í—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ —Å—Å—ã–ª–∫–æ–π", callback_data="forward_footer_link_full")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="forward_footer_link_delete")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
            ])
        else:
            text = "–í –ø—Ä–∏–ø–∏—Å–∫–µ –Ω–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏. –í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏:"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="forward_back_to_settings")]
            ])
            user_states[user_id]["state"] = FSM_FORWARD_FOOTER_LINK
            await callback_query.edit_message_text(text, reply_markup=keyboard)
            await callback_query.answer()
            return
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        await callback_query.answer()
        return
    
    elif action == "footer_link_change":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ URL, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏:"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="forward_back_to_settings")]
        ])
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        user_states[user_id]["state"] = FSM_FORWARD_FOOTER_LINK
        await callback_query.answer()
        return
    elif action == "footer_link_text":
        footer_text = forwarding_config.get("footer_text", "")
        text = f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞: {footer_text}\n\n–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π:"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –í—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ –∫–∞–∫ —Å—Å—ã–ª–∫–∞", callback_data="forward_footer_link_full")],
            [InlineKeyboardButton("‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="forward_back_to_settings")]
        ])
        await callback_query.edit_message_text(text, reply_markup=keyboard)
        user_states[user_id]["state"] = FSM_FORWARD_FOOTER_LINK_TEXT
        await callback_query.answer()
        return
    
    elif action == "footer_link_full":
        # –î–µ–ª–∞–µ–º –≤—Å—é –ø—Ä–∏–ø–∏—Å–∫—É –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
        forwarding_config["footer_full_link"] = True
        
        # –ï—Å–ª–∏ –±—ã–ª —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏, —É–¥–∞–ª—è–µ–º –µ–≥–æ (—Ç–µ–ø–µ—Ä—å –≤—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ - —Å—Å—ã–ª–∫–∞)
        if "footer_link_text" in forwarding_config:
            del forwarding_config["footer_link_text"]
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_states[user_id]["forward_settings"] = forwarding_config
        
        await callback_query.answer("‚úÖ –í—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
        return
    
    elif action == "footer_link_delete":
        # –£–¥–∞–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
        if "footer_link" in forwarding_config:
            del forwarding_config["footer_link"]
        if "footer_link_text" in forwarding_config:
            del forwarding_config["footer_link_text"]
        if "footer_full_link" in forwarding_config:
            del forwarding_config["footer_full_link"]
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        user_states[user_id]["forward_settings"] = forwarding_config
        
        await callback_query.answer("‚úÖ –ì–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
        return
        
    elif action == "back_to_settings":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        await show_forwarding_settings(client, callback_query.message, user_id)
        await callback_query.answer()
        return

    if data == 'start_monitoring':
        settings = user_states[user_id]['monitor_settings']
        monitor_channel_id = user_states[user_id]['monitor_channel_id']
        monitor_target_channel = user_states[user_id]['monitor_target_channel']
        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ü–õ–ê–¢–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –ò–ó forward_settings ---
        forward_settings = user_states[user_id].get('forward_settings', {})
        # –õ–û–ì–ò–†–£–ï–ú forward_settings –î–û –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"[DEBUG][MONITOR] forward_settings –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {forward_settings}")
        for key in [
            'paid_content_mode',
            'paid_content_stars',
            'paid_content_hashtag',
            'paid_content_every',
            'paid_content_chance',
        ]:
            if key in forward_settings and forward_settings[key] is not None:
                settings[key] = forward_settings[key]
        # –õ–û–ì–ò–†–£–ï–ú settings –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"[DEBUG][MONITOR] monitor_settings –ø–æ—Å–ª–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {settings}")
        if 'paid_content_every' in settings:
            try:
                settings['paid_content_every'] = int(settings['paid_content_every'])
            except Exception:
                settings['paid_content_every'] = 1
        monitor_config = {
            "user_id": user_id,
            "source_channel_id": monitor_channel_id,
            "target_channel_id": monitor_target_channel,
            "parse_mode": settings.get('parse_mode', 'all'),
            "hashtag_filter": settings.get('hashtag_filter'),
            "delay_seconds": settings.get('delay_seconds', 0),
            "footer_text": settings.get('footer_text', ''),
            "text_mode": settings.get('text_mode', 'hashtags_only'),
            "max_posts": settings.get('max_posts'),
            "hide_sender": settings.get('hide_sender', True),
            "paid_content_mode": settings.get('paid_content_mode', 'off'),
            "paid_content_stars": settings.get('paid_content_stars', 0),
            "paid_content_hashtag": settings.get('paid_content_hashtag'),
            "paid_content_every": settings.get('paid_content_every'),
            "paid_content_chance": settings.get('paid_content_chance'),
            "source_channel_username": user_states[user_id].get('forward_channel_username'),
            "target_channel_username": user_states[user_id].get('forward_target_username'),
        }
        logger.info(f"[DEBUG][MONITOR] –ò—Ç–æ–≥–æ–≤—ã–π monitor_config: {monitor_config}")
        logger.info(f"[BOT][MONITOR] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {monitor_config}")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ API –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            response = await api_client.start_monitoring(str(monitor_channel_id), str(monitor_target_channel), monitor_config)
            if response.get("status") == "success":
                await api_client.add_user_monitoring(user_id, str(monitor_channel_id), str(monitor_target_channel))
                await callback_query.answer('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!')
                await client.send_message(callback_query.message.chat.id, f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n\n–ë–æ—Ç –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–∞–Ω–∞–ª–æ–º –∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –≤ {monitor_target_channel}.", reply_markup=get_main_keyboard())
            else:
                await callback_query.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!', show_alert=True)
                await client.send_message(callback_query.message.chat.id, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}", reply_markup=get_main_keyboard())
        except Exception as e:
            await callback_query.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!', show_alert=True)
            await client.send_message(callback_query.message.chat.id, f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}", reply_markup=get_main_keyboard())
        user_states[user_id]["state"] = FSM_MAIN_MENU
        return

    if data == 'publish_now':
        if 'publish_settings' not in user_states[user_id]:
            user_states[user_id]['publish_settings'] = {'delay': 0, 'mode': '–≤—Å–µ', 'text_mode': '—Å —Ç–µ–∫—Å—Ç–æ–º', 'footer': '', 'order': 'old_to_new', 'max_posts': 0}
        publish_settings = user_states[user_id]['publish_settings']
        channel_id = user_states[user_id].get('publish_channel_id')
        target_channel_id = user_states[user_id].get('publish_target_channel')
        payload = {
            'channel_id': channel_id,
            'target_channel_id': target_channel_id,
            'posting_delay': publish_settings.get('delay', 0),
            'order': publish_settings.get('order', 'old_to_new'),
            'text_mode': publish_settings.get('text_mode', '—Å —Ç–µ–∫—Å—Ç–æ–º'),
            'mode': publish_settings.get('mode', '–≤—Å–µ'),
            'footer': publish_settings.get('footer', ''),
            'max_posts': publish_settings.get('max_posts', 0),
            'parse_mode': publish_settings.get('parse_mode', 'html'),
            'disable_web_page_preview': publish_settings.get('disable_web_page_preview', False),
            'disable_notification': publish_settings.get('disable_notification', False),
            'protect_content': publish_settings.get('protect_content', False),
            'add_source_link': publish_settings.get('add_source_link', True),
            'add_hashtags': publish_settings.get('add_hashtags', True),
            'custom_hashtags': publish_settings.get('custom_hashtags', []),
            'watermark_text': publish_settings.get('watermark_text'),
            'max_message_length': publish_settings.get('max_message_length', 4096),
            'truncate_long_messages': publish_settings.get('truncate_long_messages', True),
            'add_footer': publish_settings.get('add_footer', True),
            'footer_text': publish_settings.get('footer_text'),
            'add_header': publish_settings.get('add_header', True),
            'header_text': publish_settings.get('header_text'),
            'filter_words': publish_settings.get('filter_words', []),
            'replace_words': publish_settings.get('replace_words', {}),
            'add_timestamp': publish_settings.get('add_timestamp', True),
            'timestamp_format': publish_settings.get('timestamp_format', '%Y-%m-%d %H:%M:%S'),
            'timezone': publish_settings.get('timezone', 'UTC'),
            'max_posts_per_day': publish_settings.get('max_posts_per_day'),
            'min_posts_per_day': publish_settings.get('min_posts_per_day'),
            'posting_interval': publish_settings.get('posting_interval'),
        }
        try:
            async with httpx.AsyncClient() as api:
                resp = await api.post(f'{config.PARSER_SERVICE_URL}/publish', json=payload)
            if resp.status_code == 200:
                data = resp.json()
                if data.get('status') == 'ok':
                    await callback_query.answer('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!')
                    await client.send_message(callback_query.message.chat.id, f"‚úÖ {data.get('detail', '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!')}")
                    published_count = await get_actual_published_count(channel_id, target_channel_id)
                    async with httpx.AsyncClient() as client_api:
                        stats_resp = await client_api.get(f"{config.PARSER_SERVICE_URL}/channel/stats/{channel_id}")
                        stats = stats_resp.json() if stats_resp.status_code == 200 else {}
                        stat_text = get_publish_stat_text(stats, publish_settings, published_count)
                        inline_kb = InlineKeyboardMarkup([[InlineKeyboardButton('–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å', callback_data='publish_now')]])
                        await client.send_message(callback_query.message.chat.id, stat_text, reply_markup=inline_kb)
                    await show_main_menu(client, callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                    user_states[user_id] = {"state": FSM_MAIN_MENU}
                else:
                    await callback_query.answer('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!', show_alert=True)
                    await client.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            else:
                await callback_query.answer('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!', show_alert=True)
                await client.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {resp.text}")
        except Exception as e:
            await callback_query.answer('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!', show_alert=True)
            await client.send_message(callback_query.message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return

    # --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ (pagination, showmedia –∏ —Ç.–¥.) ---
    if data.startswith('page_'):
        page_idx = int(data.split("_")[1])
        pag = user_states.get(user_id, {}).get('pagination')
        if not pag:
            await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
            return
        posts = pag['posts']
        total_posts = pag['total_posts']
        total_pages = pag['total_pages']
        page_size = pag['page_size']
        msg_id = pag['msg_id']
        chat_id = pag['chat_id']
        def render_page(page_idx):
            start = page_idx * page_size
            end = start + page_size
            chunk = posts[start:end]
            text = []
            for post in chunk:
                if post['type'] == 'media_group':
                    text.append(f"–ü–æ—Å—Ç (–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞):\n  media_group_id: {post['media_group_id']}\n  id —Å–æ–æ–±—â–µ–Ω–∏–π: {', '.join(str(i) for i in post['ids'])}\n  –¢–µ–∫—Å—Ç: {textwrap.shorten(post['text'], width=100)}")
                else:
                    text.append(f"–ü–æ—Å—Ç (–æ–¥–∏–Ω–æ—á–Ω—ã–π):\n  id: {post['ids'][0]}\n  –¢–µ–∫—Å—Ç: {textwrap.shorten(post['text'], width=100)}")
            return '\n\n'.join(text)
        text = render_page(page_idx)
        nav_buttons = []
        if total_pages > 1:
            nav_buttons.append([
                InlineKeyboardButton('‚è™', callback_data=f'page_0'),
                InlineKeyboardButton('‚óÄÔ∏è', callback_data=f'page_{max(0, page_idx-1)}'),
                InlineKeyboardButton(f'{page_idx+1}/{total_pages}', callback_data='noop'),
                InlineKeyboardButton('‚ñ∂Ô∏è', callback_data=f'page_{min(total_pages-1, page_idx+1)}'),
                InlineKeyboardButton('‚è©', callback_data=f'page_{total_pages-1}')
            ])
        nav_buttons.append([InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–¥–∏–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã', callback_data=f'showmedia_{page_idx}')])
        nav_buttons.append([InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_pagination')])
        sent = await client.edit_message_text(
            chat_id=chat_id,
            message_id=msg_id,
            text=f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_idx+1} –∏–∑ {total_pages}\n\n{text}",
            reply_markup=InlineKeyboardMarkup(nav_buttons)
        )
        await callback_query.answer()
        return
    if data == 'close_pagination':
        pag = user_states.get(user_id, {}).get('pagination')
        if pag:
            try:
                await client.delete_messages(pag['chat_id'], pag['msg_id'])
            except Exception:
                pass
            user_states[user_id]['pagination'] = None
        await callback_query.answer('–ü–∞–≥–∏–Ω–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞', show_alert=True)
        return
    if data == 'noop':
        await callback_query.answer()
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if data in ["clear_all_history", "clear_channel_history", "clear_target_history", "back_to_settings"]:
        await handle_clear_history_callback(client, callback_query, user_id)
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if data == "forward_parse_mode":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìù –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="forward_parse_all"),
                InlineKeyboardButton("üè∑Ô∏è –¢–æ–ª—å–∫–æ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏", callback_data="forward_parse_hashtags")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=kb
        )
        return
    
    if data == "forward_parse_all":
        user_states[user_id]['forward_settings']['parse_mode'] = 'all'
        # –û—á–∏—â–∞–µ–º —Ö—ç—à—Ç–µ–≥ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        user_states[user_id]['forward_settings']['hashtag_filter'] = None
        await callback_query.answer("‚úÖ –†–µ–∂–∏–º: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_parse_hashtags":
        user_states[user_id]['forward_settings']['parse_mode'] = 'hashtags'
        await callback_query.answer("‚úÖ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_hashtag":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —Ö—ç—à—Ç–µ–≥–∞
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #news):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'hashtag_input'
        return
    
    if data == "forward_delay":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
        current_delay = user_states[user_id]['forward_settings'].get('delay_seconds', 0)
        await safe_edit_callback_message(
            callback_query,
            f"–¢–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {current_delay} —Å–µ–∫\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 - –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'delay_input'
        return
    
    if data == "forward_footer":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø—Ä–∏–ø–∏—Å–∫–∏
        current_footer = user_states[user_id]['forward_settings'].get('footer_text', '')
        await safe_edit_callback_message(
            callback_query,
            f"–¢–µ–∫—É—â–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞: {current_footer or '–ù–µ—Ç'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø—Ä–∏–ø–∏—Å–∫—É (–∏–ª–∏ '—É–±—Ä–∞—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'footer_input'
        return
    
    if data == "forward_text_mode":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ–∫—Å—Ç–∞
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìù –ö–∞–∫ –µ—Å—Ç—å", callback_data="forward_text_as_is"),
                InlineKeyboardButton("üè∑Ô∏è –¢–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏", callback_data="forward_text_hashtags_only")
            ],
            [
                InlineKeyboardButton("‚ùå –ë–µ–∑ —Ç–µ–∫—Å—Ç–∞", callback_data="forward_text_no_text"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")
            ]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:",
            reply_markup=kb
        )
        return
    
    if data == "forward_text_as_is":
        user_states[user_id]['forward_settings']['text_mode'] = 'as_is'
        await callback_query.answer("‚úÖ –¢–µ–∫—Å—Ç: –∫–∞–∫ –µ—Å—Ç—å")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_text_hashtags_only":
        user_states[user_id]['forward_settings']['text_mode'] = 'hashtags_only'
        await callback_query.answer("‚úÖ –¢–µ–∫—Å—Ç: —Ç–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_text_no_text":
        user_states[user_id]['forward_settings']['text_mode'] = 'no_text'
        await callback_query.answer("‚úÖ –¢–µ–∫—Å—Ç: –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_limit":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ª–∏–º–∏—Ç–∞
        current_limit = user_states[user_id]['forward_settings'].get('max_posts')
        await safe_edit_callback_message(
            callback_query,
            f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_limit or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ (–∏–ª–∏ '0' –¥–ª—è —Å–Ω—è—Ç–∏—è –ª–∏–º–∏—Ç–∞):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        )
        user_states[user_id]['forward_state'] = 'limit_input'
        return
    
    if data == "forward_paid_content":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="forward_paid_off"),
                InlineKeyboardButton("–ü–æ —Ö—ç—à—Ç–µ–≥—É", callback_data="forward_paid_hashtag")
            ],
            [
                InlineKeyboardButton("–†–∞–Ω–¥–æ–º–Ω–æ", callback_data="forward_paid_random"),
                InlineKeyboardButton("–ü–æ —Ö—ç—à—Ç–µ–≥—É + —Ä–∞–Ω–¥–æ–º–Ω–æ", callback_data="forward_paid_hashtag_random")
            ],
            [
                InlineKeyboardButton("–ü–æ —Ö—ç—à—Ç–µ–≥—É + –≤—ã–±–æ—Ä", callback_data="forward_paid_hashtag_select"),
                InlineKeyboardButton("–í—ã–±–æ—Ä", callback_data="forward_paid_select")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:",
            reply_markup=kb
        )
        return
    if data == "forward_paid_select":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'select'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–ö–∞–∂–¥—ã–π –∫–∞–∫–æ–π –ø–æ—Å—Ç –¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–º? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 ‚Äî –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º)",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_every_input'
        return
    if data == "forward_paid_off":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'off'
        user_states[user_id]['forward_settings']['paid_content_stars'] = 0
        user_states[user_id]['forward_settings']['paid_content_hashtag'] = None
        user_states[user_id]['forward_settings']['paid_content_chance'] = None
        await callback_query.answer("–ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_paid_hashtag":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'hashtag'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_hashtag_input'
        return
    if data == "forward_paid_random":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'random'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å (–æ—Ç 1 –¥–æ 10), —Å –∫–æ—Ç–æ—Ä—ã–º –ø–æ—Å—Ç –±—É–¥–µ—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_chance_input'
        return
    if data == "forward_paid_hashtag_random":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'hashtag_random'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_hashtag_input'
        user_states[user_id]['forward_settings']['paid_content_chance'] = None
        return
    if data == "forward_paid_hashtag_select":
        user_states[user_id]['forward_settings']['paid_content_mode'] = 'hashtag_select'
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_paid_content")]])
        await safe_edit_callback_message(
            callback_query,
            "–í–≤–µ–¥–∏—Ç–µ —Ö—ç—à—Ç–µ–≥ (–±–µ–∑ #), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç –ø–ª–∞—Ç–Ω—ã–º:",
            reply_markup=kb
        )
        user_states[user_id]['forward_state'] = 'paid_content_hashtag_input_for_every'
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–∑–≤–µ–∑–¥), —Ö—ç—à—Ç–µ–≥–∞ –∏ —à–∞–Ω—Å–∞ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    if user_states[user_id].get('forward_state') == 'paid_content_stars_input' and callback_query.message:
        text = callback_query.message.text
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç —á–∏—Å–ª–æ –≤ —á–∞—Ç (—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ text_handler)
        # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –ø–æ –∫–Ω–æ–ø–∫–µ
        return
    if user_states[user_id].get('forward_state') == 'paid_content_hashtag_input' and callback_query.message:
        text = callback_query.message.text
        return
    if user_states[user_id].get('forward_state') == 'paid_content_chance_input' and callback_query.message:
        text = callback_query.message.text
        return
    
    if data == "forward_save":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        success = await save_forwarding_config_api(user_id)
        if success:
            try:
                await callback_query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            except Exception:
                pass
            await show_forwarding_menu(client, callback_query.message, user_id)
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_back":
        # –ù–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = user_states[user_id].get("state")
        if state == FSM_FORWARD_SETTINGS:
            # –ü–æ—Å–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            kb = await get_target_channel_history_keyboard(user_id)
            await safe_edit_callback_message(
                callback_query,
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏:",
                reply_markup=kb or ReplyKeyboardRemove()
            )
            user_states[user_id]["state"] = FSM_FORWARD_TARGET
            return
        elif state == FSM_FORWARD_MONITORING or state == FSM_FORWARD_RUNNING:
            # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
            stats = await api_client.get_channel_stats(str(user_states[user_id]['forward_channel_id']))
            stat_text = format_channel_stats(stats)
            channel_id = user_states[user_id]['forward_channel_id']
            target_channel = user_states[user_id].get('forward_target_channel')
            await safe_edit_callback_message(
                callback_query,
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {user_states[user_id]['forward_channel_title']}:\n\n{stat_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_forwarding_inline_keyboard(channel_id, target_channel)
            )
            user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
            return
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await show_main_menu(client, callback_query.message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            user_states[user_id]["state"] = FSM_MAIN_MENU
            return
    
    # --- –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
    if data == "forward_direction":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üîÑ –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º", callback_data="forward_direction_forward"),
                InlineKeyboardButton("üîÑ –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º", callback_data="forward_direction_backward")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:",
            reply_markup=kb
        )
        return
    if data == "forward_direction_forward":
        user_states[user_id]['forward_settings']['parse_direction'] = 'forward'
        await callback_query.answer("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_direction_backward":
        user_states[user_id]['forward_settings']['parse_direction'] = 'backward'
        await callback_query.answer("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_media_filter":
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üìÑ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="forward_media_all"),
                InlineKeyboardButton("üì∑ –¢–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞", callback_data="forward_media_only")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞:",
            reply_markup=kb
        )
        return
    if data == "forward_media_all":
        user_states[user_id]['forward_settings']['media_filter'] = 'all'
        await callback_query.answer("–§–∏–ª—å—Ç—Ä: –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_media_only":
        user_states[user_id]['forward_settings']['media_filter'] = 'media_only'
        await callback_query.answer("–§–∏–ª—å—Ç—Ä: —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞!")
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    if data == "forward_range":
        channel_id = user_states[user_id].get('forward_channel_id')
        if not channel_id:
            await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª!", show_alert=True)
            return
        try:
            async with httpx.AsyncClient() as client_api:
                resp = await client_api.get(f"{config.PARSER_SERVICE_URL}/channel/last-message/{channel_id}")
                if resp.status_code == 200:
                    data_api = resp.json()
                    last_id = data_api.get('last_message_id')
                    user_states[user_id]['forward_settings']['last_message_id'] = last_id
                    msg = f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {last_id}\n\n–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:"
                    kb = ReplyKeyboardMarkup([[KeyboardButton("üîô –ù–∞–∑–∞–¥")]], resize_keyboard=True)
                    await safe_edit_callback_message(callback_query, msg, reply_markup=kb)
                    user_states[user_id]['forward_state'] = 'range_start_input'
                else:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID!", show_alert=True)
                    await show_forwarding_settings(client, callback_query.message, user_id)
            return
        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_last_id":
        channel_id = user_states[user_id].get('forward_channel_id')
        if not channel_id:
            await callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª!", show_alert=True)
            return
        try:
            async with httpx.AsyncClient() as client_api:
                resp = await client_api.get(f"{config.PARSER_SERVICE_URL}/channel/last-message/{channel_id}")
                if resp.status_code == 200:
                    data = resp.json()
                    last_id = data.get('last_message_id')
                    await callback_query.answer(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π ID: {last_id}")
                    info_text = f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n\n"
                    info_text += f"ID: {last_id}\n"
                    info_text += f"–î–∞—Ç–∞: {data.get('last_message_date', 'N/A')}\n"
                    info_text += f"–ï—Å—Ç—å –º–µ–¥–∏–∞: {'–î–∞' if data.get('has_media') else '–ù–µ—Ç'}\n"
                    info_text += f"–¢–∏–ø –º–µ–¥–∏–∞: {data.get('media_type', 'N/A')}\n"
                    info_text += f"–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {data.get('text_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤"
                    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
                    await safe_edit_callback_message(
                        callback_query,
                        info_text,
                        reply_markup=kb
                    )
                else:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID!", show_alert=True)
        except Exception as e:
            await callback_query.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        return
    
    if data == "forward_back_to_settings":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await show_forwarding_settings(client, callback_query.message, user_id)
        user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
        await callback_query.answer()
        return
    
    if data.startswith('showmedia_'):
        page_idx = int(data.split('_')[1])
        pag = user_states.get(user_id, {}).get('pagination')
        if not pag:
            try:
                await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
            except Exception:
                pass
            return
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ Telegram
        try:
            await callback_query.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞...', show_alert=False)
        except Exception:
            pass
        posts = pag['posts']
        page_size = pag['page_size']
        start = page_idx * page_size
        end = start + page_size
        chunk = posts[start:end]
        media_sent = 0
        for idx, post in enumerate(chunk):
            print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ #{idx+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {post}")
            # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
            if post['type'] == 'media_group':
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {media_files}")
                media_objs = []
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            media_objs.append(InputMediaPhoto(f))
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            media_objs.append(InputMediaVideo(f))
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if media_objs:
                    try:
                        await client.send_media_group(callback_query.message.chat.id, media=media_objs)
                        media_sent += 1
                        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø: {media_objs}")
                    except Exception as e:
                        print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                else:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã!")
            else:
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {media_files}")
                found = False
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        found = True
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            try:
                                with open(f, "rb") as img:
                                    await client.send_photo(callback_query.message.chat.id, img)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            try:
                                with open(f, "rb") as vid:
                                    await client.send_video(callback_query.message.chat.id, vid)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if not found:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞!")
        print(f"[DEBUG] –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞: {media_sent}")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await client.send_message(callback_query.message.chat.id, f'–ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {media_sent}')
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    if data == "forward_clear_history":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        kb = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="forward_clear_all_history"),
                InlineKeyboardButton("üì∫ –¢–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª", callback_data="forward_clear_channel_history")
            ],
            [
                InlineKeyboardButton("üéØ –¢–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤–æ–π", callback_data="forward_clear_target_history"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")
            ]
        ])
        await safe_edit_callback_message(
            callback_query,
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –æ—á–∏—Å—Ç–∏—Ç—å:",
            reply_markup=kb
        )
        return
    
    if data == "forward_clear_all_history":
        # –û—á–∏—â–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
        channel_id = user_states[user_id].get('forward_channel_id')
        target_channel = user_states[user_id].get('forward_target_channel')
        result = await clear_forwarding_history_api(channel_id, target_channel)
        if result.get('status') == 'success':
            try:
                await callback_query.answer("‚úÖ –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!")
            except Exception:
                pass
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
            except Exception:
                pass
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_clear_channel_history":
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞
        channel_id = user_states[user_id].get('forward_channel_id')
        result = await clear_forwarding_history_api(channel_id=channel_id)
        if result.get('status') == 'success':
            try:
                await callback_query.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–Ω–∞–ª–∞ –æ—á–∏—â–µ–Ω–∞!")
            except Exception:
                pass
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
            except Exception:
                pass
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_clear_target_history":
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        target_channel = user_states[user_id].get('forward_target_channel')
        result = await clear_forwarding_history_api(target_channel=target_channel)
        if result.get('status') == 'success':
            try:
                await callback_query.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ—á–∏—â–µ–Ω–∞!")
            except Exception:
                pass
        else:
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏", show_alert=True)
            except Exception:
                pass
        await show_forwarding_settings(client, callback_query.message, user_id)
        return
    
    if data == "forward_history_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏
        channel_id = user_states[user_id].get('forward_channel_id')
        target_channel = user_states[user_id].get('forward_target_channel')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
        channel_info = await get_channel_info(str(channel_id))
        target_info = await get_target_channel_info(target_channel)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        channel_display = channel_info.get('title', f"–ö–∞–Ω–∞–ª {channel_id}")
        target_display = target_info.get('title', target_channel)
        
        stats = await get_forwarding_history_stats_api(channel_id, target_channel)
        
        if stats.get('status') == 'success':
            stats_data = stats.get('data', {})
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n"
            stats_text += f"üì∫ –ö–∞–Ω–∞–ª: {channel_display}\n"
            stats_text += f"üéØ –¶–µ–ª–µ–≤–æ–π: {target_display}\n"
            stats_text += f"üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats_data.get('total_forwarded', 0)}\n"
            stats_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {stats_data.get('today_forwarded', 0)}\n"
            stats_text += f"üìÖ –í—á–µ—Ä–∞: {stats_data.get('yesterday_forwarded', 0)}\n"
            stats_text += f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {stats_data.get('week_forwarded', 0)}\n"
            stats_text += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {stats_data.get('month_forwarded', 0)}\n"
        else:
            stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏"
        
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back_to_settings")]])
        await safe_edit_callback_message(callback_query, stats_text, reply_markup=kb)
        return
    
    if data.startswith('showmedia_'):
        page_idx = int(data.split('_')[1])
        pag = user_states.get(user_id, {}).get('pagination')
        if not pag:
            try:
                await callback_query.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
            except Exception:
                pass
            return
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ Telegram
        try:
            await callback_query.answer('–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞...', show_alert=False)
        except Exception:
            pass
        posts = pag['posts']
        page_size = pag['page_size']
        start = page_idx * page_size
        end = start + page_size
        chunk = posts[start:end]
        media_sent = 0
        for idx, post in enumerate(chunk):
            print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–∞ #{idx+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {post}")
            # –î–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
            if post['type'] == 'media_group':
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {media_files}")
                media_objs = []
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            media_objs.append(InputMediaPhoto(f))
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            media_objs.append(InputMediaVideo(f))
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if media_objs:
                    try:
                        await client.send_media_group(callback_query.message.chat.id, media=media_objs)
                        media_sent += 1
                        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø: {media_objs}")
                    except Exception as e:
                        print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                else:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã!")
            else:
                media_files = post.get('media_files') or []
                print(f"[DEBUG] media_files –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {media_files}")
                found = False
                for f in media_files:
                    print(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª: {f}, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(f)}")
                    if f and os.path.exists(f):
                        found = True
                        if f.lower().endswith(('.jpg', '.jpeg', '.png')):
                            try:
                                with open(f, "rb") as img:
                                    await client.send_photo(callback_query.message.chat.id, img)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                        elif f.lower().endswith(('.mp4', '.mov', '.avi', '.webm')):
                            try:
                                with open(f, "rb") as vid:
                                    await client.send_video(callback_query.message.chat.id, vid)
                                media_sent += 1
                                print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ: {f}")
                            except Exception as e:
                                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")
                        else:
                            print(f"[DEBUG] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {f}")
                    else:
                        print(f"[DEBUG] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {f}")
                if not found:
                    await client.send_message(callback_query.message.chat.id, "–ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞.")
                    print(f"[DEBUG] –ù–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∞!")
        print(f"[DEBUG] –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞: {media_sent}")
        # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        await client.send_message(callback_query.message.chat.id, f'–ú–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {media_sent}')
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π ---
    if data == "forward_start":
        # –†–∞–Ω—å—à–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ userbot —á–µ—Ä–µ–∑ check_userbot_admin_rights
        # –¢–µ–ø–µ—Ä—å —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
        try:
            success = await start_forwarding_api(user_id)
            if success:
                try:
                    await callback_query.answer("‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
                except Exception:
                    pass
                await show_forwarding_menu(client, callback_query.message, user_id)
            else:
                try:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏", show_alert=True)
                except Exception:
                    pass
        except Exception as e:
            try:
                await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_stop":
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
        try:
            success = await stop_forwarding_api(user_id)
            if success:
                try:
                    await callback_query.answer("‚è∏Ô∏è –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                except Exception:
                    pass
                await show_forwarding_menu(client, callback_query.message, user_id)
            else:
                try:
                    await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏", show_alert=True)
                except Exception:
                    pass
        except Exception as e:
            try:
                await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_parse_and_forward":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        try:
            result = await start_forwarding_parsing_api(user_id)
            if result.get("success"):
                task_id = result.get("task_id", "")
                message_text = result.get("message", "‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
                if task_id:
                    message_text += f"\n\nüÜî ID –∑–∞–¥–∞—á–∏: {task_id[:20]}..."
                    await safe_edit_callback_message(callback_query, message_text, reply_markup=get_stop_last_task_inline_keyboard(task_id))
                else:
                    await safe_edit_callback_message(callback_query, message_text)
                try:
                    await callback_query.answer("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
                except Exception:
                    pass
            else:
                error_msg = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                try:
                    await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}", show_alert=True)
                except Exception:
                    pass
        except Exception as e:
            try:
                await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            except Exception:
                pass
        return
    
    if data == "forward_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        channel_id = user_states[user_id].get('forward_channel_id')
        target_channel = user_states[user_id].get('forward_target_channel')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
        channel_info = await get_channel_info(str(channel_id))
        target_info = await get_target_channel_info(target_channel)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤
        channel_display = channel_info.get('title', f"–ö–∞–Ω–∞–ª {channel_id}")
        target_display = target_info.get('title', target_channel)
        
        stats = await get_forwarding_stats_api(channel_id)
        
        if stats.get('status') == 'success':
            stats_data = stats.get('data', {})
            stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏:\n\n"
            stats_text += f"üì∫ –ö–∞–Ω–∞–ª: {channel_display}\n"
            stats_text += f"üéØ –¶–µ–ª–µ–≤–æ–π: {target_display}\n"
            stats_text += f"üì§ –í—Å–µ–≥–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {stats_data.get('total_forwarded', 0)}\n"
            stats_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {stats_data.get('today_forwarded', 0)}\n"
            stats_text += f"üè∑Ô∏è –ü–æ —Ö—ç—à—Ç–µ–≥–∞–º: {stats_data.get('hashtag_matches', 0)}\n"
            stats_text += f"‚ùå –û—à–∏–±–æ–∫: {stats_data.get('errors_count', 0)}\n"
            stats_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats_data.get('last_activity', 'N/A')}\n"
            
        else:
            stats_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Å—ã–ª–∫–∏"
        
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="forward_back")]])
        await safe_edit_callback_message(callback_query, stats_text, reply_markup=kb)
        return
    
    if data == "forward_settings":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        await show_forwarding_settings(client, callback_query.message, user_id)
        return

    elif data == "start_forwarding":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
        user_id = callback_query.from_user.id
        channel_id = user_states[user_id]['forward_channel_id']
        target_channel = user_states[user_id]['forward_target_channel']
        
        if not target_channel:
            await callback_query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª!", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        success = await save_forwarding_config_api(user_id)
        if not success:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!", show_alert=True)
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É
        success = await start_forwarding(user_id, channel_id, target_channel)
        if success:
            await callback_query.answer("‚úÖ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!", show_alert=True)
            await show_forwarding_settings(client, callback_query.message, user_id)
        else:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏!", show_alert=True)

    if data == "check_tasks_status":
        await check_tasks_status_callback(client, callback_query)
        return

    # --- FSM: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ø–∏—Å–∫–∏ ---
    if state == FSM_FORWARD_FOOTER:
        print(f"[FSM][DEBUG] FSM_FORWARD_FOOTER | text='{text}'")
        if text == "–ù–∞–∑–∞–¥":
            await show_forwarding_settings(client, message, user_id)
            return
        user_states[user_id]["forward_settings"]["footer_text"] = text
        await message.reply(f"‚úÖ –ü—Ä–∏–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: '{text}'")
        await show_forwarding_settings(client, message, user_id)
        return

    # --- –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM_FORWARD_FOOTER_LINK –∏ FSM_FORWARD_FOOTER_LINK_TEXT ---

    if data == "forward_back_to_stats":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∫–∞–Ω–∞–ª–∞
        stats = await api_client.get_channel_stats(str(user_states[user_id]['forward_channel_id']))
        stat_text = format_channel_stats(stats)
        channel_id = user_states[user_id]['forward_channel_id']
        target_channel = user_states[user_id].get('forward_target_channel')
        await safe_edit_callback_message(
            callback_query,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–∞ {user_states[user_id]['forward_channel_title']}:\n\n{stat_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_forwarding_inline_keyboard(channel_id, target_channel)
        )
        user_states[user_id]["state"] = FSM_FORWARD_SETTINGS
        return

async def start_forwarding(user_id: int, channel_id: int, target_channel: int) -> bool:
    """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        forwarding_config = user_states[user_id].get("forward_settings", {})
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        request_data = {
            'user_id': user_id,
            'source_channel_id': channel_id,
            'target_channel_id': target_channel,
            'parse_mode': forwarding_config.get('parse_mode', 'all'),
            'hashtag_filter': forwarding_config.get('hashtag_filter'),
            'delay_seconds': forwarding_config.get('delay_seconds', 0),
            'footer_text': forwarding_config.get('footer_text', ''),
            'text_mode': forwarding_config.get('text_mode', 'hashtags_only'),
            'max_posts': forwarding_config.get('max_posts'),
            'hide_sender': forwarding_config.get('hide_sender', True),
            'parse_direction': forwarding_config.get('parse_direction', 'backward'),
            'media_filter': forwarding_config.get('media_filter', 'all'),
            'range_mode': forwarding_config.get('range_mode', 'all'),
            'range_start_id': forwarding_config.get('range_start_id'),
            'range_end_id': forwarding_config.get('range_end_id'),
            'paid_content_mode': forwarding_config.get('paid_content_mode', 'off'),
            'paid_content_stars': forwarding_config.get('paid_content_stars', 0),
            'paid_content_hashtag': forwarding_config.get('paid_content_hashtag'),
            'paid_content_chance': forwarding_config.get('paid_content_chance'),
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
            'footer_link': forwarding_config.get('footer_link'),
            'footer_link_text': forwarding_config.get('footer_link_text'),
            'footer_full_link': forwarding_config.get('footer_full_link', False)
        }
        
        async with httpx.AsyncClient() as client:
            resp = await client.post(
                f"{config.PARSER_SERVICE_URL}/forwarding/start",
                json=request_data
            )
        print(f"[DEBUG] start_forwarding response: {resp.status_code} - {resp.text}")
        # –Ø–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            await api_client.add_user_target_channel(user_id, str(target_channel), str(target_channel))
        except Exception as e:
            print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
        return resp.status_code == 200
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        return False

async def check_userbot_admin_rights(client, channel_id):
    try:
        chat = await client.get_chat(channel_id)
        if hasattr(chat, 'permissions') and chat.permissions:
            # –î–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø
            return chat.permissions.can_post_messages or chat.permissions.can_send_media_messages
        if hasattr(chat, 'administrator_rights') and chat.administrator_rights:
            # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤
            return chat.administrator_rights.is_admin
        return False
    except (ChatAdminRequired, PeerIdInvalid, ChannelPrivate):
        return False
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ userbot: {e}")
        return False

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ ---
async def resolve_channel(api_client, text):
    stats = await api_client.get_channel_stats(text)
    if stats and stats.get("id"):
        return stats["id"], stats.get("title", ""), stats.get("username", "")
    return text, text, ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã ---
async def resolve_group(api_client, text):
    stats = await api_client.get_channel_stats(text)
    if stats and stats.get("id"):
        return stats["id"], stats.get("title", ""), stats.get("username", "")
    return text, text, ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback

def format_channel(cfg, channel_id_key="channel_id", title_key="channel_title", username_key="username"):
    channel_id = cfg.get(channel_id_key) or cfg.get("source_channel") or cfg.get("target_channel")
    title = cfg.get(title_key) or ""
    username = cfg.get(username_key) or ""
    if title and username:
        return f"{title} (@{username})\n      ID: {channel_id}"
    elif title:
        return f"{title}\n      ID: {channel_id}"
    elif username:
        return f"@{username}\n      ID: {channel_id}"
    else:
        return f"ID: {channel_id}"

async def get_channel_info_map(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: channel_id -> {'title': ..., 'username': ...} –¥–ª—è user_channels –∏ user_target_channels"""
    user_channels = await api_client.get_user_channels(user_id)
    target_channels = await api_client.get_user_target_channels(user_id)
    info = {}
    for ch in user_channels:
        info[str(ch.get('id'))] = {'title': ch.get('title'), 'username': ch.get('username')}
    for ch in target_channels:
        info[str(ch.get('id'))] = {'title': ch.get('title'), 'username': ch.get('username')}
    return info

async def get_group_info_map(user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict: group_id -> {'title': ..., 'username': ...} –¥–ª—è user_groups"""
    user_groups = await api_client.get_user_groups(user_id)
    info = {}
    for group in user_groups:
        info[str(group.get('group_id'))] = {'title': group.get('group_title'), 'username': group.get('username')}
    return info

def format_channel_display(channel_id, info_map):
    if channel_id is None:
        return "‚Äî"
    ch = info_map.get(str(channel_id))
    if ch:
        title = ch.get('title') or ''
        username = ch.get('username') or ''
        if title and username:
            return f"{title} (@{username}) [ID: {channel_id}]"
        elif title:
            return f"{title} [ID: {channel_id}]"
        elif username:
            return f"@{username} [ID: {channel_id}]"
    return f"ID: {channel_id}"

async def build_tasks_monitorings_status_text_and_keyboard(user_id, monitorings, tasks, reaction_tasks, public_groups_tasks=None, updated=False, back_to="forward_back_to_stats"):
    info_map = await get_channel_info_map(user_id)
    def safe(val):
        if val is None or val == "N/A":
            return "‚Äî"
        return html.escape(str(val))
    msg = "<b>üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤:</b>\n\n"
    if updated:
        now = datetime.now().strftime("%H:%M:%S")
        msg += f"<i>üîÑ –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: {now}</i>\n\n"
    buttons = []
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
    if monitorings:
        msg += "<b>üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏:</b>\n"
        for idx, m in enumerate(monitorings, 1):
            cfg = m.get("config", {})
            channel_id = m.get("channel_id")
            target_channel_id = m.get("target_channel")
            channel_info = format_channel_display(channel_id, info_map)
            # Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º id
            if target_channel_id is not None:
                target_info = format_channel_display(target_channel_id, info_map)
            else:
                target_info = "‚Äî"
            active = m.get("active", False)
            task_running = m.get("task_running", False)
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if active and task_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            msg += f"{idx}. <b>–ö–∞–Ω–∞–ª:</b> {safe(channel_info)}\n"
            msg += f"   <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            msg += f"   <b>–¶–µ–ª—å:</b> {safe(target_info)}\n"
            msg += f"   <b>–†–µ–∂–∏–º:</b> {safe(cfg.get('parse_mode'))}\n"
            msg += f"   <b>–•—ç—à—Ç–µ–≥:</b> {safe(cfg.get('hashtag_filter'))}\n"
            msg += f"   <b>–õ–∏–º–∏—Ç:</b> {safe(cfg.get('max_posts'))}\n"
            msg += f"   <b>–ü–ª–∞—Ç–Ω—ã–µ:</b> {safe(cfg.get('paid_content_stars'))}‚≠ê\n\n"
            # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–∞ id (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏)
            if active and task_running and channel_id is not None and target_channel_id is not None:
                buttons.append([InlineKeyboardButton(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {idx}", callback_data=f"stop_monitoring:{channel_id}:{target_channel_id}")])
    # –ó–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if tasks:
        msg += "<b>üöÄ –ó–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏:</b>\n"
        for idx, task in enumerate(tasks, 1):
            task_id = task.get("task_id")
            source_id = task.get("source_channel")
            target_id = task.get("target_channel")
            source = format_channel_display(source_id, info_map)
            target = format_channel_display(target_id, info_map)
            status = task.get("status", "unknown")
            started_at = safe(task.get("started_at"))
            completed_at = safe(task.get("completed_at"))
            error = safe(task.get("error"))
            status_emoji = {
                "running": "üü¢",
                "completed": "‚úÖ",
                "stopped": "‚èπÔ∏è",
                "error": "‚ùå"
            }.get(status, "‚ùì")
            msg += f"<b>{idx}. –ó–∞–¥–∞—á–∞ {safe(task_id)[:15]}...</b>\n"
            msg += f"   üì§ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {safe(source)}\n"
            msg += f"   üì• <b>–¶–µ–ª—å:</b> {safe(target)}\n"
            msg += f"   {status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            msg += f"   üïê <b>–ó–∞–ø—É—â–µ–Ω–∞:</b> {started_at}\n"
            if completed_at and completed_at != "‚Äî":
                msg += f"   ‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {completed_at}\n"
            if error and error != "‚Äî":
                msg += f"   ‚ùå <b>–û—à–∏–±–∫–∞:</b> {error[:50]}...\n"
            msg += "\n"
            if status == "running" and task_id:
                buttons.append([InlineKeyboardButton(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É {idx}", callback_data=f"stop_task:{task_id}")])
    
    # –ó–∞–¥–∞—á–∏ —Ä–µ–∞–∫—Ü–∏–π
    if reaction_tasks:
        msg += "<b>üí´ –ó–∞–¥–∞—á–∏ —Ä–µ–∞–∫—Ü–∏–π:</b>\n"
        for idx, task in enumerate(reaction_tasks, 1):
            task_id = task.get("task_id")
            chat_id = task.get("chat_id")
            emojis = task.get("emojis", [])
            mode = task.get("mode")
            count = task.get("count")
            status = task.get("status", "unknown")
            started_at = safe(task.get("started_at"))
            completed_at = safe(task.get("completed_at"))
            error = safe(task.get("error"))
            status_emoji = {
                "running": "üü¢",
                "completed": "‚úÖ",
                "stopped": "‚èπÔ∏è",
                "error": "‚ùå"
            }.get(status, "‚ùì")
            msg += f"<b>{idx}. –ó–∞–¥–∞—á–∞ —Ä–µ–∞–∫—Ü–∏–π {safe(task_id)[:15]}...</b>\n"
            msg += f"   üì∫ <b>–ö–∞–Ω–∞–ª:</b> {safe(chat_id)}\n"
            msg += f"   üòä <b>–≠–º–æ–¥–∑–∏:</b> {', '.join(emojis) if emojis else '‚Äî'}\n"
            msg += f"   üéØ <b>–†–µ–∂–∏–º:</b> {safe(mode)}\n"
            if count:
                msg += f"   üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {safe(count)}\n"
            msg += f"   {status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
            msg += f"   üïê <b>–ó–∞–ø—É—â–µ–Ω–∞:</b> {started_at}\n"
            if completed_at and completed_at != "‚Äî":
                msg += f"   ‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {completed_at}\n"
            if error and error != "‚Äî":
                msg += f"   ‚ùå <b>–û—à–∏–±–∫–∞:</b> {error[:50]}...\n"
            msg += "\n"
            if status == "running" and task_id:
                buttons.append([InlineKeyboardButton(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é {idx}", callback_data=f"stop_reaction_task:{task_id}")])
    
    # –ó–∞–¥–∞—á–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø
    if public_groups_tasks:
        msg += "<b>üì¢ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã:</b>\n"
        for idx, task in enumerate(public_groups_tasks, 1):
            source = safe(task.get("source_channel"))
            target = safe(task.get("target_group"))
            status = task.get("status", "unknown")
            forwarded = safe(task.get("forwarded_count", 0))
            settings = task.get("settings", {}) or {}
            views_limit = safe(settings.get("views_limit"))
            posts_count = safe(settings.get("posts_count"))
            status_emoji = {
                "running": "üü¢",
                "completed": "‚úÖ",
                "stopped": "‚èπÔ∏è",
                "error": "‚ùå"
            }.get(status, "‚ùì")
            msg += (
                f"{idx}. <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source}\n"
                f"   <b>–¶–µ–ª—å:</b> {target}\n"
                f"   {status_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                f"   üì§ <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–æ:</b> {forwarded}\n"
                f"   üëÅÔ∏è <b>–õ–∏–º–∏—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> {views_limit}\n"
                f"   üî¢ <b>–î–∏–∞–ø–∞–∑–æ–Ω:</b> {posts_count}\n"
                "\n"
            )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ
    has_running_tasks = (
        (monitorings and any(m.get("active") and m.get("task_running") and m.get("channel_id") is not None and m.get("target_channel") is not None for m in monitorings)) or 
        (tasks and any(t.get("status") == "running" and t.get("task_id") for t in tasks)) or
        (reaction_tasks and any(t.get("status") == "running" and t.get("task_id") for t in reaction_tasks)) or
        (public_groups_tasks and any(t.get("status") == "running" for t in public_groups_tasks))
    )
    if has_running_tasks:
        buttons.append([InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ", callback_data="stop_all_tasks")])
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if back_to == "reaction_back_to_stats":
        buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_reaction_tasks_status")])
    else:
        buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="check_tasks_status")])
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_to)])
    keyboard = InlineKeyboardMarkup(buttons)
    return msg, keyboard

async def send_or_edit_status_message(message=None, callback_query=None, back_to="forward_back_to_stats", context="forwarding"):
    # –ü–æ–ª—É—á–∞–µ–º user_id
    user_id = None
    if callback_query:
        user_id = callback_query.from_user.id
    elif message:
        user_id = message.from_user.id
    monitoring_data = await api_client.get_monitoring_status()
    monitorings = monitoring_data.get("monitorings", [])
    logger.info(f"[STATUS_UNIFIED] –ü–æ–ª—É—á–µ–Ω–æ monitorings: {monitorings}")
    tasks_data = await api_client.get_all_tasks()
    tasks = tasks_data.get("tasks", [])
    logger.info(f"[STATUS_UNIFIED] –ü–æ–ª—É—á–µ–Ω–æ tasks: {tasks}")
    reaction_tasks_data = await api_client.get_all_reaction_tasks()
    reaction_tasks = reaction_tasks_data.get("tasks", [])
    logger.info(f"[STATUS_UNIFIED] –ü–æ–ª—É—á–µ–Ω–æ reaction_tasks: {reaction_tasks}")
    public_groups_tasks_data = await api_client.get_all_public_groups_tasks()
    public_groups_tasks = public_groups_tasks_data.get("tasks", [])
    logger.info(f"[STATUS_UNIFIED] –ü–æ–ª—É—á–µ–Ω–æ public_groups_tasks: {public_groups_tasks}")
    updated = bool(callback_query)
    if not monitorings and not tasks and not reaction_tasks and not public_groups_tasks:
        text = "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤."
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_to)]
        ])
        if callback_query:
            try:
                await callback_query.edit_message_text(text, reply_markup=keyboard)
            except MessageNotModified:
                pass
        elif message:
            await message.reply(text, reply_markup=keyboard)
        return
    msg, keyboard = await build_tasks_monitorings_status_text_and_keyboard(
        user_id, monitorings, tasks, reaction_tasks, public_groups_tasks, updated=updated, back_to=back_to)
    logger.info(f"[STATUS_UNIFIED] –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")
    try:
        if callback_query:
            await callback_query.edit_message_text(msg, reply_markup=keyboard, parse_mode="html")
        elif message:
            await message.reply(msg, reply_markup=keyboard, parse_mode="html")
    except MessageNotModified:
        logger.warning("[STATUS_UNIFIED] MESSAGE_NOT_MODIFIED: —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
    except Exception as e:
        logger.error(f"[STATUS_UNIFIED] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å parse_mode=html: {e}")
        try:
            if callback_query:
                await callback_query.edit_message_text(msg, reply_markup=keyboard)
            elif message:
                await message.reply(msg, reply_markup=keyboard)
        except MessageNotModified:
            logger.warning("[STATUS_UNIFIED] MESSAGE_NOT_MODIFIED: —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è (fallback)")
        except Exception as e2:
            logger.error(f"[STATUS_UNIFIED] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑ parse_mode: {e2}")

# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á —Ä–µ–∞–∫—Ü–∏–π
async def send_or_edit_reaction_status_message(message=None, callback_query=None):
    """–û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á —Ä–µ–∞–∫—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    await send_or_edit_status_message(message=message, callback_query=callback_query, back_to="reaction_back_to_stats", context="reactions")

# –ö–æ–º–∞–Ω–¥–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def monitorings_command(client: Client, message: Message):
    await send_or_edit_status_message(message=message)

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á –ø–µ—Ä–µ—Å—ã–ª–∫–∏
async def check_tasks_status_callback(client: Client, callback_query):
    await send_or_edit_status_message(callback_query=callback_query)

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á —Ä–µ–∞–∫—Ü–∏–π
async def check_reaction_tasks_status_callback(client: Client, callback_query):
    await send_or_edit_reaction_status_message(callback_query=callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏
async def stop_task_callback(client: Client, callback_query):
    try:
        data = callback_query.data
        if data.startswith("stop_task:"):
            task_id = data.split(":", 1)[1]
            result = await api_client.stop_task(task_id)
            if result.get("status") == "stopped":
                await callback_query.answer("‚úÖ –ó–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                await check_tasks_status_callback(client, callback_query)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á —Ä–µ–∞–∫—Ü–∏–π
async def stop_reaction_task_callback(client: Client, callback_query):
    try:
        data = callback_query.data
        if data.startswith("stop_reaction_task:"):
            task_id = data.split(":", 1)[1]
            result = await api_client.stop_reaction_task(task_id)
            if result.get("success"):
                await callback_query.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Ä–µ–∞–∫—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                await check_reaction_tasks_status_callback(client, callback_query)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ —Ä–µ–∞–∫—Ü–∏–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ —Ä–µ–∞–∫—Ü–∏–π: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ —Ä–µ–∞–∫—Ü–∏–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def stop_monitoring_callback(client, callback_query):
    parts = callback_query.data.split(":", 2)
    channel_id = parts[1]
    target_channel_id = parts[2]
    logger.info(f"[STOP_MONITORING] channel_id={channel_id}, target_channel_id={target_channel_id}")
    try:
        async with httpx.AsyncClient() as http_client:
            resp = await http_client.post(f"{config.PARSER_SERVICE_URL}/forwarding/stop", json={"channel_id": int(channel_id), "target_channel_id": str(target_channel_id)})
        logger.info(f"[STOP_MONITORING] API resp: {resp.status_code} {resp.text}")
        if resp.status_code == 200:
            await callback_query.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        else:
            await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {resp.text}")
    except Exception as e:
        logger.error(f"[STOP_MONITORING] –û—à–∏–±–∫–∞: {e}")
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await send_or_edit_status_message(callback_query=callback_query)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
async def stop_all_tasks_callback(client, callback_query):
    user_id = callback_query.from_user.id
    errors = []
    logger.info(f"[STOP_ALL_TASKS] user_id={user_id}")
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
    monitoring_data = await api_client.get_monitoring_status()
    monitorings = monitoring_data.get("monitorings", [])
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã (channel_id, target_channel_id)
    pairs = set()
    for m in monitorings:
        channel_id = m.get("channel_id")
        target_channel_id = m.get("target_channel")
        if channel_id and target_channel_id:
            pairs.add((channel_id, target_channel_id))
    for channel_id, target_channel_id in pairs:
        try:
            async with httpx.AsyncClient() as http_client:
                resp = await http_client.post(f"{config.PARSER_SERVICE_URL}/forwarding/stop", json={"channel_id": int(channel_id), "target_channel_id": str(target_channel_id)})
            logger.info(f"[STOP_ALL_TASKS] stop_monitoring {channel_id} -> {target_channel_id}: {resp.status_code} {resp.text}")
        except Exception as e:
            logger.error(f"[STOP_ALL_TASKS] –û—à–∏–±–∫–∞: {e}")
            errors.append(str(e))
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏
    tasks_data = await api_client.get_all_tasks()
    tasks = tasks_data.get("tasks", [])
    for t in tasks:
        task_id = t.get("task_id")
        if task_id:
            try:
                resp = await api_client.stop_task(task_id)
                logger.info(f"[STOP_ALL_TASKS] stop_task {task_id}: {resp}")
            except Exception as e:
                logger.error(f"[STOP_ALL_TASKS] –û—à–∏–±–∫–∞: {e}")
                errors.append(str(e))
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ —Ä–µ–∞–∫—Ü–∏–π
    reaction_tasks_data = await api_client.get_all_reaction_tasks()
    reaction_tasks = reaction_tasks_data.get("tasks", [])
    for t in reaction_tasks:
        task_id = t.get("task_id")
        if task_id:
            try:
                resp = await api_client.stop_reaction_task(task_id)
                logger.info(f"[STOP_ALL_TASKS] stop_reaction_task {task_id}: {resp}")
            except Exception as e:
                logger.error(f"[STOP_ALL_TASKS] –û—à–∏–±–∫–∞: {e}")
                errors.append(str(e))
    if errors:
        await callback_query.answer(f"‚ùå –û—à–∏–±–∫–∏: {'; '.join(errors)[:50]}")
    else:
        await callback_query.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á, –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
    await send_or_edit_status_message(callback_query=callback_query)

async def process_callback_query(client, callback_query):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤: –≤—ã–∑—ã–≤–∞–µ—Ç forwarding_callback_handler —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ callback –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–Ω–∞—á–µ False.
    """
    data = callback_query.data
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if data is None:
        return False
    # stop_monitoring
    if data.startswith("stop_monitoring:"):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        await stop_monitoring_callback(client, callback_query)
        return True
    # stop_all_tasks
    if data == "stop_all_tasks":
        await stop_all_tasks_callback(client, callback_query)
        return True
    # stop_task
    if data.startswith("stop_task:"):
        await stop_task_callback(client, callback_query)
        return True
    # check_tasks_status
    if data == "check_tasks_status":
        await check_tasks_status_callback(client, callback_query)
        return True
    # check_reaction_tasks_status
    if data == "check_reaction_tasks_status":
        await check_reaction_tasks_status_callback(client, callback_query)
        return True

    # ... –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
    # –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ‚Äî fallback: –≤—ã–∑—ã–≤–∞–µ–º forwarding_callback_handler
    await forwarding_callback_handler(client, callback_query)
    return True





# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ reaction_master.py

