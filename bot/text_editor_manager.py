"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–µ–∂–¥—É –±–æ—Ç–æ–º –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
"""

import logging
from typing import Optional, Dict, Any, List
import httpx
from bot.config import config

logger = logging.getLogger(__name__)


class TextEditorManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        self.base_url = config.PARSER_SERVICE_URL
        
    async def start_text_editing(self, channel_id: int, link_text: str, link_url: str, max_posts: int = 100) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            link_text: –¢–µ–∫—Å—Ç –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
            link_url: URL –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏  
            max_posts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        try:
            async with httpx.AsyncClient(timeout=30) as client:
                response = await client.post(
                    f"{self.base_url}/text-editor/start",
                    json={
                        "channel_id": channel_id,
                        "link_text": link_text,
                        "link_url": link_url,
                        "max_posts": max_posts
                    }
                )
                
                if response.status_code == 200:
                    result = response.json()
                    logger.info(f"[TEXT_EDITOR_MANAGER] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {result}")
                    return result
                else:
                    error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: HTTP {response.status_code}"
                    logger.error(f"[TEXT_EDITOR_MANAGER] {error_msg}")
                    return {"status": "error", "message": error_msg}
                    
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
            logger.error(f"[TEXT_EDITOR_MANAGER] {error_msg}")
            return {"status": "error", "message": error_msg}
    
    async def get_task_status(self, task_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        """
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{self.base_url}/text-editor/status/{task_id}")
                
                if response.status_code == 200:
                    return response.json()
                else:
                    return {"status": "error", "message": f"HTTP {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"[TEXT_EDITOR_MANAGER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {"status": "error", "message": str(e)}
    
    async def get_all_tasks(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Returns:
            dict: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        """
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.get(f"{self.base_url}/text-editor/tasks")
                
                if response.status_code == 200:
                    return response.json()
                else:
                    return {"status": "error", "message": f"HTTP {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"[TEXT_EDITOR_MANAGER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {e}")
            return {"status": "error", "message": str(e)}
    
    async def stop_task(self, task_id: str) -> Dict[str, Any]:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        try:
            async with httpx.AsyncClient(timeout=10) as client:
                response = await client.post(f"{self.base_url}/text-editor/stop/{task_id}")
                
                if response.status_code == 200:
                    return response.json()
                else:
                    return {"status": "error", "message": f"HTTP {response.status_code}"}
                    
        except Exception as e:
            logger.error(f"[TEXT_EDITOR_MANAGER] –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
            return {"status": "error", "message": str(e)}
    
    def format_task_status_message(self, task_info: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–¥–∞—á–∏
        
        Args:
            task_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if task_info.get("status") == "error":
            return f"‚ùå –û—à–∏–±–∫–∞: {task_info.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        task_id = task_info.get('task_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        status = task_info.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        processed = task_info.get('processed_count', 0)
        modified = task_info.get('modified_count', 0)
        channel_id = task_info.get('channel_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        link_text = task_info.get('link_text', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        max_posts = task_info.get('max_posts', 0)
        
        status_emoji = {
            'running': 'üîÑ',
            'completed': '‚úÖ',
            'stopped': '‚èπÔ∏è',
            'error': '‚ùå'
        }.get(status, '‚ùì')
        
        message = f"{status_emoji} **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞**\n\n"
        message += f"üìã ID –∑–∞–¥–∞—á–∏: `{task_id}`\n"
        message += f"üì∫ –ö–∞–Ω–∞–ª: `{channel_id}`\n"
        message += f"üîó –î–æ–±–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç: `{link_text}`\n"
        message += f"üìä –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤: {max_posts}\n"
        message += f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}\n"
        message += f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ: {modified}\n"
        message += f"üìç –°—Ç–∞—Ç—É—Å: {status}"
        
        if task_info.get('error'):
            message += f"\n‚ùå –û—à–∏–±–∫–∞: {task_info['error']}"
            
        return message
    
    def format_all_tasks_message(self, tasks_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ –≤—Å–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        
        Args:
            tasks_data: –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if tasks_data.get("status") == "error":
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: {tasks_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
        
        tasks = tasks_data.get('tasks', [])
        
        if not tasks:
            return "üìù **–ó–∞–¥–∞—á–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞**\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á"
        
        message = f"üìù **–ó–∞–¥–∞—á–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞** ({len(tasks)})\n\n"
        
        for task in tasks:
            status = task.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            status_emoji = {
                'running': 'üîÑ',
                'completed': '‚úÖ',
                'stopped': '‚èπÔ∏è',
                'error': '‚ùå'
            }.get(status, '‚ùì')
            
            task_id = task.get('task_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            channel_id = task.get('channel_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            processed = task.get('processed_count', 0)
            modified = task.get('modified_count', 0)
            
            message += f"{status_emoji} `{task_id}`\n"
            message += f"   üì∫ –ö–∞–Ω–∞–ª: `{channel_id}`\n"
            message += f"   üìä {processed}‚Üí{modified}\n\n"
        
        return message