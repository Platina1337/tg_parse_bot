from pyrogram import Client
from shared.models import ParseConfig, ParseMode, Message
import logging
import os
import uuid
from typing import Dict, Optional, Callable, List, Any, Tuple
import asyncio
import json
from pyrogram import filters
from pyrogram.types import Message as PyrogramMessage
from pyrogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAudio, InputMediaAnimation
import re
import traceback
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è python-telegram-bot
try:
    from telegram import Bot as TgBot, InputPaidMediaPhoto, InputPaidMediaVideo
    from telegram.constants import ParseMode as TgParseMode
    import telegram
    TG_BOT_AVAILABLE = True
except ImportError:
    TG_BOT_AVAILABLE = False
    logging.warning("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

logger = logging.getLogger(__name__)

class TelegramForwarder:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
    
    def __init__(self, db_instance, userbot=None, bot_token=None):
        logger.info(f"[FORWARDER] üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramForwarder")
        
        if userbot:
            self.userbot = userbot
        else:
            session_name = os.path.join(os.path.dirname(__file__), "sessions", "userbot")
            self.userbot = Client(
                name=session_name,
                api_id=os.getenv("API_ID"),
                api_hash=os.getenv("API_HASH")
            )
        self.db = db_instance
        self._forwarding_tasks: Dict[int, asyncio.Task] = {}
        self._monitoring_tasks: Dict[Tuple[int, str], asyncio.Task] = {}  # (channel_id, target_channel_id) -> task
        self._media_group_buffers = {}
        self._media_group_timeouts = {}
        self._channel_cache = {}  # –ö—ç—à –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
        self._processed_groups = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
        self._active_handlers = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self._forwarding_active = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        # --- python-telegram-bot ---
        self.bot_token = bot_token or os.getenv("BOT_TOKEN")
        self.tg_bot = None
        
        logger.info(f"[FORWARDER] üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è python-telegram-bot:")
        logger.info(f"[FORWARDER] üîç TG_BOT_AVAILABLE: {TG_BOT_AVAILABLE}")
        logger.info(f"[FORWARDER] üîç bot_token: {self.bot_token[:10] + '...' if self.bot_token else 'None'}")
        
        if self.bot_token and TG_BOT_AVAILABLE:
            try:
                self.tg_bot = TgBot(token=self.bot_token)
                logger.info("[FORWARDER] ‚úÖ python-telegram-bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            except Exception as e:
                logger.error(f"[FORWARDER] ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ python-telegram-bot: {e}")
                self.tg_bot = None
        elif not TG_BOT_AVAILABLE:
            logger.warning("[FORWARDER] python-telegram-bot –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        elif not self.bot_token:
            logger.warning("[FORWARDER] BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–ª–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        
        logger.info(f"[FORWARDER] üîç tg_bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.tg_bot is not None}")
        
        self._forwarding_settings = {}  # channel_id -> config
        self._counters = {}  # channel_id -> dict —Å counters
        self._media_group_timeouts = {}  # channel_id -> group_id -> task
        self.media_groups = {}  # group_id -> list of messages
        self.media_group_timeouts = {}  # group_id -> asyncio.Task
        self._is_bot_admin_cache = {}  # channel_id -> bool, –≤—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏
        self._parse_forward_tasks = {}  # task_id -> task_info
        self._task_counter = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö task_id
        self._monitoring_targets: Dict[Tuple[int, str], str] = {}  # (channel_id, target_channel_id) -> target_channel
        self._handlers = {}  # (source_channel, target_channel) -> handler
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ—Ä–≤–∞—Ä–¥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–π userbot)"""
        if not hasattr(self.userbot, 'is_connected') or not self.userbot.is_connected:
            session_path = os.path.join(os.path.dirname(__file__), "sessions", "userbot")
            api_id = os.getenv("API_ID")
            api_hash = os.getenv("API_HASH")
            logger.info(f"[FORWARDER] Session file: {session_path}")
            logger.info(f"[FORWARDER] API_ID: {api_id}")
            logger.info(f"[FORWARDER] API_HASH: {api_hash[:4]}***{api_hash[-4:] if api_hash else ''}")
            await self.userbot.start()
            try:
                me = await self.userbot.get_me()
                logger.info(f"[FORWARDER] Logged in as: {me.first_name} {me.last_name or ''} (@{me.username or 'no_username'})")
            except Exception as e:
                logger.error(f"[FORWARDER] Error getting user info: {e}")
            logger.info("Forwarder started successfully")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ—Ä–≤–∞—Ä–¥–µ—Ä–∞"""
        for channel_id in list(self._monitoring_tasks.keys()):
            await self.stop_forwarding(channel_id)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –µ—â–µ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if hasattr(self.userbot, 'is_connected') and self.userbot.is_connected:
                await self.userbot.stop()
        except asyncio.CancelledError:
            logger.info("Forwarder stop cancelled (asyncio.CancelledError)")
        except ConnectionError as e:
            if "already terminated" in str(e):
                logger.info("Forwarder client already terminated")
            else:
                logger.error(f"Connection error during forwarder stop: {e}")
        except Exception as e:
            logger.error(f"Error during forwarder stop: {e}")
        logger.info("Forwarder stopped successfully")
    
    async def start_forwarding(self, source_channel: str, target_channel: str, config: dict, callback: Optional[Callable] = None):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –¥—Ä—É–≥–æ–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)"""
        try:
            if str(source_channel).startswith("-100"):
                channel = await self.userbot.get_chat(int(source_channel))
            else:
                channel = await self.userbot.get_chat(source_channel)
            channel_id = channel.id
            key = (channel_id, str(target_channel))
            # --- –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö target_channel –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–≤—ã–º ---
            for (src_id, tgt_id) in list(self._monitoring_tasks.keys()):
                if tgt_id != str(target_channel):
                    await self.stop_forwarding(src_id, tgt_id)
            # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å monitoring –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
            if key in self._monitoring_tasks:
                logger.info(f"[FORWARDER] Monitoring –¥–ª—è {channel_id} -> {target_channel} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π")
                return
            channel_name = channel.username or str(channel_id)
            channel_title = getattr(channel, "title", None)
            logger.info(f"[FORWARDER] üì∫ –ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞: {channel_title} (@{channel_name}, ID: {channel_id})")
            logger.info(f"[FORWARDER] üîÑ –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê (–ù–ï –ü–ê–†–°–ò–ù–ì–ê!)")
            logger.info(f"[FORWARDER] –ò—Å—Ç–æ—á–Ω–∏–∫: {source_channel} -> –¶–µ–ª—å: {target_channel}")
            logger.info(f"[FORWARDER] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
            if not hasattr(self.userbot, 'is_connected') or not self.userbot.is_connected:
                logger.info(f"[FORWARDER] Userbot –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
                await self.userbot.start()
                logger.info(f"[FORWARDER] Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            self._channel_cache = {
                'id': channel_id,
                'name': channel_name,
                'title': channel_title
            }
            self._media_group_buffers[channel_id] = {}
            self._media_group_timeouts[channel_id] = {}
            self._forwarding_settings[channel_id] = config.copy()
            self._forwarding_active[channel_id] = True
            if channel_id not in self._counters:
                self._counters[channel_id] = {
                    'hashtag_paid_counter': 0,
                    'select_paid_counter': 0,
                    'media_group_paid_counter': 0,
                    'media_group_hashtag_paid_counter': 0
                }
            self._monitoring_targets[key] = target_channel
            self._monitoring_tasks[key] = asyncio.create_task(self._monitoring_loop())
            # --- –û–±–Ω–æ–≤–∏—Ç—å handler –¥–ª—è source_channel ---
            self._update_source_handler(channel_id)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
            hide_sender = config.get("hide_sender", True)
            add_footer = config.get("footer_text", "")
            max_posts = config.get("max_posts", 0)
            forward_mode = config.get("forward_mode", "copy")  # copy –∏–ª–∏ forward
            parse_mode = config.get("parse_mode", "all")  # all –∏–ª–∏ hashtags
            hashtag_filter = config.get("hashtag_filter", "")
            text_mode = config.get("text_mode", "hashtags_only")  # hashtags_only, as_is, no_text
            delay_seconds = config.get("delay_seconds", 0)
            paid_content_mode = config.get("paid_content_mode", "off")
            paid_content_hashtag = config.get("paid_content_hashtag")
            paid_content_chance = config.get("paid_content_chance")
            paid_content_stars = config.get("paid_content_stars", 0)
            try:
                paid_content_stars = int(paid_content_stars)
            except Exception as e:
                logger.error(f"[FORWARDER] paid_content_stars –Ω–µ int: {paid_content_stars}, –æ—à–∏–±–∫–∞: {e}")
                paid_content_stars = 0
            logger.info(f"[FORWARDER] ‚öôÔ∏è paid_content_stars –∏–∑ config: {paid_content_stars} (—Ç–∏–ø: {type(paid_content_stars)})")
            logger.info(f"[FORWARDER] ‚öôÔ∏è –í–µ—Å—å config: {config}")
            
            logger.info(f"[FORWARDER] ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–µ–∂–∏–º={parse_mode}, —Ö—ç—à—Ç–µ–≥='{hashtag_filter}', –ª–∏–º–∏—Ç={max_posts}, –∑–∞–¥–µ—Ä–∂–∫–∞={delay_seconds}—Å, –ø–ª–∞—Ç–Ω—ã–µ={paid_content_stars}‚≠ê")
            
            if not target_channel:
                raise Exception("–ù–µ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (—É–∂–µ —Å–±—Ä–æ—à–µ–Ω—ã –≤—ã—à–µ)
            # self._media_group_buffers[channel_id] = {}
            # self._media_group_timeouts[channel_id] = {}
            
            # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
            self._forwarding_active[channel_id] = True
            
            # --- counters ---
            self._counters[channel_id] = self._counters.get(channel_id, {
                'hashtag_paid_counter': 0,
                'select_paid_counter': 0,
                'media_group_paid_counter': 0,
                'media_group_hashtag_paid_counter': 0
            })
            if channel_id not in self._media_group_buffers:
                self._media_group_buffers[channel_id] = {}
            if channel_id not in self._media_group_timeouts:
                self._media_group_timeouts[channel_id] = {}
            processed_groups = set()
            media_groups = self._media_group_buffers[channel_id]
            
            logger.info(f"[FORWARDER] üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name} -> {target_channel}")
            
            forwarded_count = 0
            
            # --- –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ select/hashtag_select ---
            select_paid_counter = 0
            hashtag_paid_counter = 0
            media_group_paid_counter = 0
            media_group_hashtag_paid_counter = 0
            
            # –°–ª—É—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞–Ω–∞–ª, –ù–ï —Ü–µ–ª–µ–≤–æ–π
            @self.userbot.on_message(filters.chat(channel_id))
            async def handle_new_message(client, message):
                logger.info(f"[FORWARDER][HANDLER] –í—ã–∑–≤–∞–Ω handler –¥–ª—è channel_id={channel_id}, message_id={getattr(message, 'id', None)}")
                nonlocal forwarded_count, select_paid_counter, hashtag_paid_counter
                skip_message = False
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    if not self._forwarding_active.get(channel_id, False):
                        logger.info(f"[FORWARDER][HANDLER] –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {getattr(message, 'id', None)}")
                        return
                    logger.info(f"[FORWARDER][HANDLER] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {getattr(message, 'id', None)} –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id} -> –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤ {target_channel}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                    if max_posts and max_posts > 0 and forwarded_count >= max_posts:
                        logger.info(f"[FORWARDER] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫ ({max_posts}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {channel_id}")
                        await self.stop_forwarding(channel_id)
                        return
                    # --- –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã ---
                    if getattr(message, 'media_group_id', None):
                        group_id = str(message.media_group_id)
                        if group_id not in self.media_groups:
                            self.media_groups[group_id] = []
                        self.media_groups[group_id].append(message)
                        logger.info(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É {group_id}, —Ç–µ–ø–µ—Ä—å —Ñ–∞–π–ª–æ–≤: {len(self.media_groups[group_id])}")
                        if group_id not in self.media_group_timeouts:
                            async def send_group_later(forwarded_count):
                                await asyncio.sleep(2.5)
                                group_messages = self.media_groups.get(group_id, [])
                                logger.info(f"[DEBUG] –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {len(group_messages)} —Ñ–∞–π–ª–æ–≤")
                                # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã ---
                                group_is_paid = False
                                # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥—É ---
                                if parse_mode == "hashtags" and hashtag_filter and hashtag_filter.strip():
                                    if not any(hashtag_filter.lower() in ((m.text or m.caption or '').lower()) for m in group_messages):
                                        logger.info(f"[FORWARDER] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ '{hashtag_filter}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É")
                                        self.media_groups.pop(group_id, None)
                                        self.media_group_timeouts.pop(group_id, None)
                                        return forwarded_count
                                paid_content_mode = config.get('paid_content_mode', 'off')
                                paid_content_hashtag = config.get('paid_content_hashtag')
                                paid_content_every = config.get('paid_content_every', 1)
                                paid_content_chance = config.get('paid_content_chance')
                                counters = self._counters[channel_id]
                                if paid_content_mode == "off" or not paid_content_mode:
                                    group_is_paid = False
                                elif paid_content_mode == "hashtag":
                                    for m in group_messages:
                                        t = (m.text or m.caption or "").lower()
                                        if paid_content_hashtag and paid_content_hashtag.lower() in t:
                                            group_is_paid = True
                                            break
                                elif paid_content_mode == "random":
                                    import random
                                    if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                        group_is_paid = True
                                elif paid_content_mode == "hashtag_random":
                                    import random
                                    for m in group_messages:
                                        t = (m.text or m.caption or "").lower()
                                        if paid_content_hashtag and paid_content_hashtag.lower() in t:
                                            if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                                group_is_paid = True
                                                break
                                elif paid_content_mode == "select":
                                    counters['media_group_paid_counter'] += 1
                                    every = config.get('paid_content_every', 1)
                                    try:
                                        every = int(every)
                                    except Exception:
                                        every = 1
                                    if every > 0 and (counters['media_group_paid_counter'] % every == 0):
                                        group_is_paid = True
                                elif paid_content_mode == "hashtag_select":
                                    group_hashtag = False
                                    for m in group_messages:
                                        t = (m.text or m.caption or "").lower()
                                        if paid_content_hashtag and paid_content_hashtag.lower() in t:
                                            group_hashtag = True
                                            break
                                    if group_hashtag:
                                        counters['media_group_hashtag_paid_counter'] += 1
                                        every = config.get('paid_content_every', 1)
                                        try:
                                            every = int(every)
                                        except Exception:
                                            every = 1
                                        if every > 0 and (counters['media_group_hashtag_paid_counter'] % every == 0):
                                            group_is_paid = True
                                else:
                                    group_is_paid = False
                                # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã ---
                                if group_messages:
                                    try:
                                        logger.info(f"[FORWARDER][DEBUG] –í—ã–∑–æ–≤ forward_media_group –¥–ª—è {group_id} —Å {len(group_messages)} —Ñ–∞–π–ª–∞–º–∏")
                                        await self.forward_media_group(
                                            channel_id,
                                            group_id,
                                            target_channel,
                                            text_mode,
                                            add_footer,
                                            forward_mode,
                                            hide_sender,
                                            max_posts,
                                            callback,
                                            paid_content_stars if group_is_paid else 0,
                                            group_messages  # <-- –ø–µ—Ä–µ–¥–∞–µ–º —è–≤–Ω–æ
                                        )
                                        logger.info(f"[FORWARDER][DEBUG] –í–æ–∑–≤—Ä–∞—Ç –∏–∑ forward_media_group –¥–ª—è {group_id}")
                                        
                                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
                                        forwarded_count += 1
                                        logger.info(f"[FORWARDER] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –ø–µ—Ä–µ—Å–ª–∞–Ω–∞, —Å—á–µ—Ç—á–∏–∫: {forwarded_count}/{max_posts}")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                                        if max_posts and max_posts > 0 and forwarded_count >= max_posts:
                                            logger.info(f"[FORWARDER] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫ ({max_posts}) –ø–æ—Å–ª–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
                                            await self.stop_forwarding(channel_id)
                                            return forwarded_count
                                    except Exception as e:
                                        logger.error(f"[FORWARDER][ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ forward_media_group –¥–ª—è {group_id}: {e}")
                                        logger.error(f"[FORWARDER][ERROR] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                                else:
                                    logger.info(f"[FORWARDER][ERROR] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!")
                                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –∏ —Ç–∞–π–º–µ—Ä
                                self.media_groups.pop(group_id, None)
                                self.media_group_timeouts.pop(group_id, None)
                            self.media_group_timeouts[group_id] = asyncio.create_task(send_group_later(forwarded_count))
                        return  # <--- –¥–æ–±–∞–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö)
                    if delay_seconds > 0 and not getattr(message, 'media_group_id', None):
                        await asyncio.sleep(delay_seconds)
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if not skip_message:
                        # --- –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
                        counters = self._counters[channel_id]
                        is_paid = False
                        text = (message.text or message.caption or "").lower()
                        paid_content_mode = config.get('paid_content_mode', 'off')
                        paid_content_hashtag = (config.get('paid_content_hashtag') or '').lower()
                        paid_content_every = config.get('paid_content_every', 1)
                        paid_content_chance = config.get('paid_content_chance')
                        if parse_mode == "hashtags" and hashtag_filter and hashtag_filter.strip():
                            if hashtag_filter.lower() not in text:
                                logger.info(f"[FORWARDER] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ '{hashtag_filter}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                return
                        if paid_content_mode == "off" or not paid_content_mode:
                            is_paid = False
                        elif paid_content_mode == "hashtag":
                            if paid_content_hashtag and paid_content_hashtag in text:
                                is_paid = True
                        elif paid_content_mode == "random":
                            import random
                            if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                is_paid = True
                        elif paid_content_mode == "hashtag_random":
                            import random
                            if paid_content_hashtag and paid_content_hashtag in text:
                                if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                    is_paid = True
                        elif paid_content_mode == "select":
                            select_paid_counter += 1
                            every = config.get('paid_content_every', 1)
                            try:
                                every = int(every)
                            except Exception:
                                every = 1
                            if every > 0 and (select_paid_counter % every == 0):
                                is_paid = True
                        elif paid_content_mode == "hashtag_select":
                            if paid_content_hashtag and paid_content_hashtag in text:
                                hashtag_paid_counter += 1
                                logger.info(f"[FORWARDER][PAID] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —Å —Ö—ç—à—Ç–µ–≥–æ–º '{paid_content_hashtag}': #{hashtag_paid_counter} –ø–æ —Å—á—ë—Ç—É, every={paid_content_every}")
                                every = config.get('paid_content_every', 1)
                                try:
                                    every = int(every)
                                except Exception:
                                    every = 1
                                if every > 0 and (hashtag_paid_counter % every == 0):
                                    is_paid = True
                                    logger.info(f"[FORWARDER][PAID] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–º! (#{hashtag_paid_counter} –∏–∑ {every})")
                                else:
                                    logger.info(f"[FORWARDER][PAID] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–ª–∞—Ç–Ω—ã–º (#{hashtag_paid_counter} –∏–∑ {every})")
                        else:
                            is_paid = False
                        logger.info(f"[FORWARDER] üîç –í—ã–∑—ã–≤–∞–µ–º _forward_single_message —Å paid_content_stars={paid_content_stars if is_paid else 0} (—Ç–∏–ø: {type(paid_content_stars)})")
                        logger.info(f"[FORWARDER][HANDLER] –ü–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º _forward_single_message –¥–ª—è message_id={getattr(message, 'id', None)}")
                        await self._forward_single_message(
                            message,
                            target_channel,
                            hide_sender,
                            add_footer,
                            forward_mode,
                            text_mode,
                            paid_content_stars if is_paid else 0
                        )
                        logger.info(f"[FORWARDER][HANDLER] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {getattr(message, 'id', None)} –≤ {target_channel}")
                        if delay_seconds and delay_seconds > 0:
                            await asyncio.sleep(delay_seconds)
                        forwarded_count += 1
                        if callback:
                            await callback(message)
                        last_message_id = message.id
                except Exception as e:
                    logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                    logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            self._active_handlers[channel_id] = handle_new_message
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            key = (channel_id, str(target_channel))
            self._monitoring_targets[key] = target_channel
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self._monitoring_tasks[key] = asyncio.create_task(self._monitoring_loop())
            logger.info(f"[FORWARDER] –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_name} -> {target_channel}")
            
            # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è handler:
            self._handlers[key] = handle_new_message
            
        except Exception as e:
            logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
            raise
    
    async def _timeout_forward_media_group(self, channel_id, group_id, target_channel, text_mode, add_footer, forward_mode, hide_sender, max_posts, callback, paid_content_stars):
        """–¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã"""
        try:
            logger.info(f"[FORWARDER] üîç _timeout_forward_media_group: group_id={group_id}, paid_content_stars={paid_content_stars}")
            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≥—Ä—É–ø–ø—ã
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if not self._forwarding_active.get(channel_id, False):
                logger.info(f"[FORWARDER] –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}")
                return
            
            logger.info(f"[FORWARDER] üîç –í—ã–∑—ã–≤–∞–µ–º forward_media_group –¥–ª—è –≥—Ä—É–ø–ø—ã {group_id} —Å paid_content_stars={paid_content_stars}")
            await self.forward_media_group(channel_id, group_id, target_channel, text_mode, add_footer, forward_mode, hide_sender, max_posts, callback, paid_content_stars)
        except asyncio.CancelledError:
            logger.info(f"[FORWARDER] –¢–∞–π–º–∞—É—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id} –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–∞—É—Ç–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {e}")
            logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    async def _send_paid_media(self, chat_id, media_type, file_id, caption, stars, is_bot_admin, temp_file_path=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ python-telegram-bot, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω"""
        logger.info(f"[FORWARDER] üéØ _send_paid_media: chat_id={chat_id}, media_type={media_type}, stars={stars} (—Ç–∏–ø: {type(stars)}), is_bot_admin={is_bot_admin}")
        if not self.tg_bot:
            logger.error("[FORWARDER] python-telegram-bot –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return False
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞ –¥–ª—è python-telegram-bot
            try:
                await self.tg_bot.get_chat(chat_id)
                logger.info(f"[FORWARDER] ‚úÖ –ß–∞—Ç {chat_id} –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è python-telegram-bot")
            except Exception as e:
                if "Chat not found" in str(e) or "chat not found" in str(e):
                    logger.warning(f"[FORWARDER] python-telegram-bot –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —á–∞—Ç {chat_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pyrogram")
                    return False
                else:
                    raise e
            if is_bot_admin:
                # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_id
                if media_type == 'photo':
                    media = [InputPaidMediaPhoto(media=file_id)]
                elif media_type == 'video':
                    media = [InputPaidMediaVideo(media=file_id)]
                else:
                    logger.warning(f"[FORWARDER] –¢–∏–ø {media_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                    return False
            else:
                # –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª
                if not temp_file_path or not os.path.exists(temp_file_path):
                    logger.error(f"[FORWARDER] temp_file_path –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {temp_file_path}")
                    return False
                if media_type == 'photo':
                    media = [InputPaidMediaPhoto(media=open(temp_file_path, 'rb'))]
                elif media_type == 'video':
                    media = [InputPaidMediaVideo(media=open(temp_file_path, 'rb'))]
                else:
                    logger.warning(f"[FORWARDER] –¢–∏–ø {media_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ–∞–π–ª)")
                    return False
            logger.info(f"[FORWARDER] üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {media_type} —Å {stars} –∑–≤–µ–∑–¥–∞–º–∏ (is_bot_admin={is_bot_admin})")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ –≤ caption
            contains_html = "<a href=" in caption or "<b>" in caption or "<i>" in caption or "<code>" in caption
            
            result = await self.tg_bot.send_paid_media(
                chat_id=chat_id,
                star_count=stars,
                media=media,
                caption=caption,
                parse_mode=TgParseMode.HTML if contains_html else None
            )
            logger.info(f"[FORWARDER] ‚úÖ –ü–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ python-telegram-bot: {media_type} —Å {stars} –∑–≤–µ–∑–¥–∞–º–∏")
            if not is_bot_admin and temp_file_path:
                try:
                    os.remove(temp_file_path)
                    logger.info(f"[FORWARDER] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {temp_file_path}")
                except Exception as e:
                    logger.warning(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_file_path}: {e}")
            return result
        except Exception as e:
            logger.error(f"[FORWARDER] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
            logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
            if not is_bot_admin and temp_file_path:
                try:
                    os.remove(temp_file_path)
                except Exception:
                    pass
            return False

    async def _forward_single_message(self, message, target_channel, hide_sender, add_footer, forward_mode, text_mode="hashtags_only", paid_content_stars=0):
        try:
            logger.info(f"[FORWARDER][DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞ (add_footer): {add_footer!r}")
            logger.info(f"[FORWARDER] üîç _forward_single_message: paid_content_stars={paid_content_stars} (—Ç–∏–ø: {type(paid_content_stars)})")
            logger.info(f"[FORWARDER] üîç tg_bot –¥–æ—Å—Ç—É–ø–µ–Ω: {self.tg_bot is not None}")
            logger.info(f"[FORWARDER] üîç –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: paid_content_stars > 0 = {paid_content_stars > 0}")
            original_text = message.text or message.caption or ""
            processed_text = self._process_message_text(original_text, text_mode)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞
            channel_id = message.chat.id if hasattr(message, 'chat') and hasattr(message.chat, 'id') else None
            config = self._forwarding_settings.get(channel_id, {})
            footer_link = config.get("footer_link")
            footer_link_text = config.get("footer_link_text")
            footer_full_link = config.get("footer_full_link", False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ø–∏—Å–∫—É —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
            if add_footer:
                formatted_footer = self._format_footer_with_link(add_footer, footer_link, footer_link_text, footer_full_link)
                if processed_text:
                    processed_text += f"\n\n{formatted_footer}"
                else:
                    processed_text = formatted_footer
                    
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç HTML-—Ä–∞–∑–º–µ—Ç–∫—É
                contains_html = "<a href=" in processed_text or "<b>" in processed_text or "<i>" in processed_text
            should_send_paid = paid_content_stars > 0 and self.tg_bot is not None
            channel_id = message.chat.id if hasattr(message, 'chat') and hasattr(message.chat, 'id') else None
            
            # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞
            is_bot_admin = False
            if channel_id:
                if channel_id not in self._is_bot_admin_cache:
                    self._is_bot_admin_cache[channel_id] = await self._is_bot_admin(channel_id)
                is_bot_admin = self._is_bot_admin_cache[channel_id]
            
            logger.info(f"[FORWARDER] üéØ –î–æ–ª–∂–µ–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {should_send_paid}, is_bot_admin={is_bot_admin}")
            if should_send_paid:
                logger.info(f"[FORWARDER] üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {paid_content_stars} –∑–≤–µ–∑–¥")
                if message.media:
                    media_type = message.media.value
                    if media_type in ['photo', 'video']:
                        file_id = getattr(message, media_type).file_id
                        temp_file_path = None
                        if not is_bot_admin:
                            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                            import tempfile
                            ext = '.jpg' if media_type == 'photo' else '.mp4'
                            with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
                                temp_file_path = tmp.name
                            temp_file_path = await self.userbot.download_media(message, file_name=temp_file_path)
                        result = await self._send_paid_media(target_channel, media_type, file_id, processed_text, paid_content_stars, is_bot_admin, temp_file_path)
                        if result:
                            logger.info(f"[FORWARDER] ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–ª–∞—Ç–Ω–æ–µ {media_type} —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} —Å {paid_content_stars} –∑–≤–µ–∑–¥–∞–º–∏")
                            return True
                        else:
                            logger.info(f"[FORWARDER][FALLBACK] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ python-telegram-bot, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —á–µ—Ä–µ–∑ Pyrogram")
                            paid_content_stars = 0
                    else:
                        logger.warning(f"[FORWARDER] –¢–∏–ø –º–µ–¥–∏–∞ {media_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!")
                        return False
                else:
                    logger.warning("[FORWARDER] –ü–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!")
                    return False
            else:
                logger.info(f"[FORWARDER] üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (paid_content_stars={paid_content_stars}, tg_bot={self.tg_bot is not None})")
            send_params = {
                'chat_id': target_channel
            }
            # hide_sender —Ç–æ–ª—å–∫–æ –¥–ª—è forward_messages, –Ω–µ –¥–ª—è send_message!
            # –î–ª—è send_message –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º hide_sender
            if message.media:
                media_type = message.media.value
                entities = getattr(message, 'entities', None)
                caption_entities = getattr(message, 'caption_entities', None)
                logger.info(f"[FORWARDER][DEBUG] entities: {entities} (type: {type(entities)}), len: {len(entities) if entities else 0}")
                logger.info(f"[FORWARDER][DEBUG] caption_entities: {caption_entities} (type: {type(caption_entities)}), len: {len(caption_entities) if caption_entities else 0}")
                logger.info(f"[FORWARDER][DEBUG] processed_text: {processed_text}")
                logger.info(f"[FORWARDER][DEBUG] original_text: {original_text}")
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏ —Ç–æ–ª—å–∫–æ "HTML" (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏)
                parse_mode = 'HTML' if self._should_use_parse_mode(caption_entities) else None
                logger.info(f"[FORWARDER][DEBUG] –ò—Ç–æ–≥–æ–≤—ã–π parse_mode –¥–ª—è –º–µ–¥–∏–∞: {parse_mode}")
                if media_type == 'photo':
                    logger.info(f"[FORWARDER][DEBUG] send_photo params: photo={message.photo.file_id}, caption={processed_text}, chat_id={target_channel}, parse_mode={parse_mode}")
                    await self.userbot.send_photo(photo=message.photo.file_id, caption=processed_text, chat_id=target_channel)
                elif media_type == 'video':
                    logger.info(f"[FORWARDER][DEBUG] send_video params: video={message.video.file_id}, caption={processed_text}, chat_id={target_channel}, parse_mode={parse_mode}")
                    await self.userbot.send_video(video=message.video.file_id, caption=processed_text, chat_id=target_channel)
                elif media_type == 'document':
                    logger.info(f"[FORWARDER][DEBUG] send_document params: document={message.document.file_id}, caption={processed_text}, chat_id={target_channel}, parse_mode={parse_mode}")
                    await self.userbot.send_document(document=message.document.file_id, caption=processed_text, chat_id=target_channel)
                elif media_type == 'audio':
                    logger.info(f"[FORWARDER][DEBUG] send_audio params: audio={message.audio.file_id}, caption={processed_text}, chat_id={target_channel}, parse_mode={parse_mode}")
                    await self.userbot.send_audio(audio=message.audio.file_id, caption=processed_text, chat_id=target_channel)
                elif media_type == 'voice':
                    logger.info(f"[FORWARDER][DEBUG] send_voice params: voice={message.voice.file_id}, caption={processed_text}, chat_id={target_channel}, parse_mode={parse_mode}")
                    await self.userbot.send_voice(voice=message.voice.file_id, caption=processed_text, chat_id=target_channel)
                elif media_type == 'video_note':
                    logger.info(f"[FORWARDER][DEBUG] send_video_note params: video_note={message.video_note.file_id}, chat_id={target_channel}")
                    await self.userbot.send_video_note(video_note=message.video_note.file_id, chat_id=target_channel)
                elif media_type == 'animation':
                    logger.info(f"[FORWARDER][DEBUG] send_animation params: animation={message.animation.file_id}, caption={processed_text}, chat_id={target_channel}, parse_mode={parse_mode}")
                    await self.userbot.send_animation(animation=message.animation.file_id, caption=processed_text, chat_id=target_channel)
                elif media_type == 'sticker':
                    logger.info(f"[FORWARDER][DEBUG] send_sticker params: sticker={message.sticker.file_id}, chat_id={target_channel}")
                    await self.userbot.send_sticker(sticker=message.sticker.file_id, chat_id=target_channel)
                else:
                    logger.warning(f"[FORWARDER] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!")
                    return False  # <-- —Ç–µ–ø–µ—Ä—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            else:
                # –î–ª—è send_message –ù–ï –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å hide_sender!
                # parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å entities
                entities = getattr(message, 'entities', None)
                logger.info(f"[FORWARDER][DEBUG] entities: {entities} (type: {type(entities)}), len: {len(entities) if entities else 0}")
                logger.info(f"[FORWARDER][DEBUG] processed_text: {processed_text}")
                logger.info(f"[FORWARDER][DEBUG] original_text: {original_text}")
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: parse_mode —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å entities
                if entities and len(entities) > 0 and self._should_use_parse_mode(entities):
                    send_params['parse_mode'] = 'HTML'
                logger.info(f"[FORWARDER][DEBUG] –ò—Ç–æ–≥–æ–≤—ã–π send_params –¥–ª—è send_message: {send_params}")
                await self.userbot.send_message(text=processed_text or original_text, chat_id=target_channel)
            logger.info(f"[FORWARDER] ‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
            return True
        except Exception as e:
            logger.error(f"[FORWARDER] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
            return False
    
    def _process_message_text(self, text: str, text_mode: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        if not text:
            return ""
        
        if text_mode == "hashtags_only":
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏
            import re
            hashtags = re.findall(r'#\w+', text)
            return ' '.join(hashtags)
        elif text_mode == "no_text":
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            return ""
        elif text_mode == "as_is":
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
            return text
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ç–æ–ª—å–∫–æ —Ö—ç—à—Ç–µ–≥–∏
            import re
            hashtags = re.findall(r'#\w+', text)
            return ' '.join(hashtags)
    
    def _format_footer_with_link(self, footer_text: str, footer_link: str = None, footer_link_text: str = None, footer_full_link: bool = False) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–ø–∏—Å–∫–∏ —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
        
        Args:
            footer_text (str): –¢–µ–∫—Å—Ç –ø—Ä–∏–ø–∏—Å–∫–∏
            footer_link (str, optional): URL –¥–ª—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
            footer_link_text (str, optional): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
            footer_full_link (bool, optional): –°–¥–µ–ª–∞—Ç—å –≤—Å—é –ø—Ä–∏–ø–∏—Å–∫—É –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π –¥–ª—è —Å—Å—ã–ª–æ–∫
        """
        if not footer_text:
            return ""
        
        if not footer_link:
            return footer_text
        
        if footer_full_link:
            # –í—Å—è –ø—Ä–∏–ø–∏—Å–∫–∞ - –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞
            return f'<a href="{footer_link}">{footer_text}</a>'
        
        if footer_link_text and footer_link_text in footer_text:
            # –ß–∞—Å—Ç—å –ø—Ä–∏–ø–∏—Å–∫–∏ - –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞
            html_link = f'<a href="{footer_link}">{footer_link_text}</a>'
            return footer_text.replace(footer_link_text, html_link)
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω–µ—Ü
        link_text = footer_link_text or "—Å—Å—ã–ª–∫–∞"
        return f'{footer_text} <a href="{footer_link}">{link_text}</a>'
    
    async def _save_to_posts_json(self, messages, caption, channel_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ posts.json"""
        try:
            posts_json_path = os.path.join(os.path.dirname(__file__), "posts_data", "posts.json")
            posts_data = []
            
            if os.path.exists(posts_json_path):
                try:
                    with open(posts_json_path, "r", encoding="utf-8") as f:
                        posts_data = json.load(f)
                except Exception as e:
                    logger.warning(f"[FORWARDER] posts.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π: {e}, —Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π.")
                    posts_data = []
            
            posts_by_id = {p["message_id"]: p for p in posts_data if "message_id" in p}
            
            for m in messages:
                post = posts_by_id.get(m.id)
                if post:
                    post["media_files"] = [r"D:\PycharmProjects\telegram-parse-bot\media\static\img\default.png"]
                    post["text"] = caption or ""
                    posts_by_id[m.id] = post
                    
                    m_dict = m.to_dict() if hasattr(m, 'to_dict') else m.__dict__.copy()
                    m_dict["local_file_path"] = r"D:\PycharmProjects\telegram-parse-bot\media\static\img\default.png"
                    m_dict["text"] = caption or ""
                    await self.db.mark_message_as_parsed(m_dict, channel_id)
            
            with open(posts_json_path, "w", encoding="utf-8") as f:
                json.dump(list(posts_by_id.values()), f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ posts.json: {e}")
            logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    async def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            try:
                await asyncio.sleep(1)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
    
    async def stop_forwarding(self, channel_id: int, target_channel_id: str = None):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É/–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏ —Ü–µ–ª–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞).
        –ï—Å–ª–∏ target_channel_id –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –¥–ª—è source-–∫–∞–Ω–∞–ª–∞.
        """
        try:
            if target_channel_id is not None:
                key = (channel_id, str(target_channel_id))
                if key in self._monitoring_tasks:
                    self._monitoring_tasks[key].cancel()
                    del self._monitoring_tasks[key]
                if key in self._monitoring_targets:
                    del self._monitoring_targets[key]
                # --- –û–±–Ω–æ–≤–∏—Ç—å handler –¥–ª—è source_channel ---
                self._update_source_handler(channel_id)
                logger.info(f"[FORWARDER] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–∞—Ä—ã {channel_id} -> {target_channel_id}")
            else:
                to_remove = [k for k in self._monitoring_tasks if k[0] == channel_id]
                for key in to_remove:
                    self._monitoring_tasks[key].cancel()
                    del self._monitoring_tasks[key]
                    if key in self._monitoring_targets:
                        del self._monitoring_targets[key]
                # --- –û–±–Ω–æ–≤–∏—Ç—å handler –¥–ª—è source_channel ---
                self._update_source_handler(channel_id)
                logger.info(f"[FORWARDER] –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        except Exception as e:
            logger.error(f"[FORWARDER][stop_forwarding] –û—à–∏–±–∫–∞: {e}")
    
    async def clear_cache(self, channel_id: int = None):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏)"""
        if channel_id is not None:
            self._media_group_buffers[channel_id] = {}
            self._media_group_timeouts[channel_id] = {}
            self._forwarding_settings[channel_id] = {}
            self._forwarding_active[channel_id] = False
            if channel_id in self._counters:
                self._counters[channel_id] = {
                    'hashtag_paid_counter': 0,
                    'select_paid_counter': 0,
                    'media_group_paid_counter': 0,
                    'media_group_hashtag_paid_counter': 0
                }
            logger.info(f"[FORWARDER] –û—á–∏—â–µ–Ω –∫—ç—à –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        else:
            self._media_group_buffers = {}
            self._media_group_timeouts = {}
            self._forwarding_settings = {}
            self._forwarding_active = {}
            self._counters = {}
            logger.info(f"[FORWARDER] –û—á–∏—â–µ–Ω –≤–µ—Å—å –∫—ç—à")
    
    async def get_forwarding_status(self, channel_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º username –≤ id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(channel_id, str) and not channel_id.startswith("-100") and not channel_id.isdigit():
                try:
                    chat = await self.userbot.get_chat(channel_id)
                    channel_id = chat.id
                except Exception as e:
                    logger.error(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                    return {
                        "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}",
                        "is_active": False,
                        "forwarded_count": 0,
                        "today_forwarded": 0,
                        "hashtag_matches": 0,
                        "errors_count": 0,
                        "last_activity": "N/A",
                        "forward_channel_title": ""
                    }
            elif isinstance(channel_id, str) and channel_id.isdigit():
                channel_id = int(channel_id)
            is_monitoring = channel_id in self._monitoring_tasks
            task_active = False
            forwarding_active = self._forwarding_active.get(channel_id, False)
            if is_monitoring:
                task = self._monitoring_tasks[channel_id]
                task_active = not task.done()
            is_active = forwarding_active or (is_monitoring and task_active)
            total_forwarded = 0
            today_forwarded = 0
            hashtag_matches = 0
            errors_count = 0
            last_activity = "N/A"
            try:
                async with self.db.conn.execute(
                    "SELECT COUNT(*) FROM parsed_messages WHERE channel_id = ? AND forwarded_to IS NOT NULL",
                    (channel_id,)
                ) as cursor:
                    row = await cursor.fetchone()
                    total_forwarded = row[0] if row else 0
                from datetime import datetime, date
                today = date.today().strftime('%Y-%m-%d')
                async with self.db.conn.execute(
                    "SELECT COUNT(*) FROM parsed_messages WHERE channel_id = ? AND forwarded_to IS NOT NULL AND DATE(parsed_at) = ?",
                    (channel_id, today)
                ) as cursor:
                    row = await cursor.fetchone()
                    today_forwarded = row[0] if row else 0
                async with self.db.conn.execute(
                    "SELECT parsed_at FROM parsed_messages WHERE channel_id = ? AND forwarded_to IS NOT NULL ORDER BY parsed_at DESC LIMIT 1",
                    (channel_id,)
                ) as cursor:
                    row = await cursor.fetchone()
                    if row:
                        last_activity = row[0]
            except Exception as e:
                logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ë–î: {e}")
            # --- –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ forward_channel_title ---
            forward_channel_title = None
            try:
                if self._channel_cache and self._channel_cache.get("title"):
                    forward_channel_title = self._channel_cache["title"]
                else:
                    try:
                        chat = await self.userbot.get_chat(channel_id)
                        forward_channel_title = getattr(chat, "title", None)
                    except Exception as chat_error:
                        if "Peer id invalid" in str(chat_error) or "ID not found" in str(chat_error):
                            logger.warning(f"[FORWARDER] –ö–∞–Ω–∞–ª {channel_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {chat_error}")
                            forward_channel_title = f"–ö–∞–Ω–∞–ª {channel_id} (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"
                        else:
                            logger.warning(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ {channel_id}: {chat_error}")
                            forward_channel_title = ""
            except Exception:
                forward_channel_title = ""
            return {
                "is_active": is_active,
                "forwarded_count": total_forwarded,
                "today_forwarded": today_forwarded,
                "hashtag_matches": hashtag_matches,
                "errors_count": errors_count,
                "last_activity": last_activity,
                "is_monitoring": is_monitoring,
                "task_active": task_active,
                "forwarding_active": forwarding_active,
                "channel_id": channel_id,
                "media_groups_buffered": len(self._media_group_buffers.get(channel_id, {})),
                "forward_channel_title": forward_channel_title or "",
                "target_channel": self._monitoring_targets.get(channel_id)  # –¥–æ–±–∞–≤–ª–µ–Ω–æ
            }
            
        except Exception as e:
            logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {
                "error": str(e),
                "is_active": False,
                "forwarded_count": 0,
                "today_forwarded": 0,
                "hashtag_matches": 0,
                "errors_count": 0,
                "last_activity": "N/A",
                "target_channel": self._monitoring_targets.get(channel_id)  # –¥–æ–±–∞–≤–ª–µ–Ω–æ
            }

    async def forward_media_group(self, channel_id, group_id, target_channel, text_mode, add_footer, forward_mode, hide_sender, max_posts, callback=None, paid_content_stars=0, group_messages=None, config=None):
        logger.info(f"[FORWARDER] üîç forward_media_group: paid_content_stars={paid_content_stars} (—Ç–∏–ø: {type(paid_content_stars)})")
        logger.info(f"[FORWARDER][DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø—Ä–∏–ø–∏—Å–∫–∞ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (add_footer): {add_footer!r}")
        if group_messages is not None:
            group_msgs = group_messages
        else:
            group_msgs = self._media_group_buffers.get(channel_id, {}).get(str(group_id), [])
        # –†–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞
        is_bot_admin = False
        if channel_id:
            if channel_id not in self._is_bot_admin_cache:
                self._is_bot_admin_cache[channel_id] = await self._is_bot_admin(channel_id)
            is_bot_admin = self._is_bot_admin_cache[channel_id]
        # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∞ ---
        if config and config.get('parse_mode') == 'hashtags' and config.get('hashtag_filter'):
            if not self.group_has_hashtag(group_msgs, config['hashtag_filter']):
                logger.info(f"[FORWARDER] –í –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ {group_id} –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º '{config['hashtag_filter']}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—É")
                return 0
        logger.info(f"[FORWARDER][DEBUG] –ü–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {len(group_msgs)} —Ñ–∞–π–ª–æ–≤")
        if not group_msgs or len(group_msgs) < 2:
            logger.warning(f"[FORWARDER][SKIP] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 2 —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º!")
            return 0
        group_msgs = sorted(group_msgs, key=lambda m: m.date)
        group_caption = None
        for m in group_msgs:
            if getattr(m, 'caption', None):
                group_caption = m.caption
                break
        if text_mode == "no_text":
            group_caption = ""
        elif text_mode == "hashtags_only":
            import re
            hashtags = re.findall(r'#\w+', group_caption or "")
            group_caption = " ".join(hashtags)
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        footer_link = config.get("footer_link") if config else None
        footer_link_text = config.get("footer_link_text") if config else None
        footer_full_link = config.get("footer_full_link", False) if config else False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ø–∏—Å–∫—É —Å –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–æ–π, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
        if add_footer:
            formatted_footer = self._format_footer_with_link(add_footer, footer_link, footer_link_text, footer_full_link)
            if group_caption:
                group_caption = f"{group_caption}\n\n{formatted_footer}"
            else:
                group_caption = formatted_footer
        group_message_ids = []
        try:
            if forward_mode == "forward":
                for m in group_msgs:
                    await self.userbot.forward_messages(
                        chat_id=target_channel,
                        from_chat_id=channel_id,
                        message_ids=m.id,
                        hide_sender=hide_sender
                    )
                    group_message_ids.append(m.id)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                should_send_paid = paid_content_stars > 0 and self.tg_bot is not None
                logger.info(f"[FORWARDER] üéØ –î–æ–ª–∂–µ–Ω –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {should_send_paid}, is_bot_admin={is_bot_admin}")
                
                if should_send_paid:
                    logger.info(f"[FORWARDER] üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–Ω—É—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É: {paid_content_stars} –∑–≤–µ–∑–¥")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞ –¥–ª—è python-telegram-bot
                    try:
                        await self.tg_bot.get_chat(target_channel)
                    except Exception as e:
                        if "Chat not found" in str(e) or "chat not found" in str(e):
                            logger.warning(f"[FORWARDER] python-telegram-bot –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ —á–∞—Ç {target_channel}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pyrogram")
                            # Fallback –Ω–∞ Pyrogram
                            paid_content_stars = 0
                        else:
                            raise e
                    
                    if paid_content_stars > 0:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ python-telegram-bot –∫–∞–∫ –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        media_list = []
                        temp_files = []
                        for m in group_msgs:
                            if m.photo:
                                media_type = 'photo'
                                file_id = m.photo.file_id
                                temp_file_path = None
                                if not is_bot_admin:
                                    import tempfile
                                    ext = '.jpg'
                                    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
                                        temp_file_path = tmp.name
                                    temp_file_path = await self.userbot.download_media(m, file_name=temp_file_path)
                                    if not temp_file_path or not os.path.exists(temp_file_path):
                                        logger.error(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: message_id={getattr(m, 'id', None)}, media_type={media_type}")
                                        continue
                                    temp_files.append(temp_file_path)
                                media_list.append((media_type, file_id, temp_file_path))
                            elif m.video:
                                media_type = 'video'
                                file_id = m.video.file_id
                                temp_file_path = None
                                if not is_bot_admin:
                                    import tempfile
                                    ext = '.mp4'
                                    with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
                                        temp_file_path = tmp.name
                                    temp_file_path = await self.userbot.download_media(m, file_name=temp_file_path)
                                    if not temp_file_path or not os.path.exists(temp_file_path):
                                        logger.error(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: message_id={getattr(m, 'id', None)}, media_type={media_type}")
                                        continue
                                    temp_files.append(temp_file_path)
                                media_list.append((media_type, file_id, temp_file_path))
                            elif getattr(m, 'document', None) and getattr(m.document, 'mime_type', None):
                                if m.document.mime_type.startswith('image/'):
                                    media_type = 'photo'
                                    file_id = m.document.file_id
                                    temp_file_path = None
                                    if not is_bot_admin:
                                        import tempfile
                                        ext = '.jpg'
                                        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
                                            temp_file_path = tmp.name
                                        temp_file_path = await self.userbot.download_media(m, file_name=temp_file_path)
                                        if not temp_file_path or not os.path.exists(temp_file_path):
                                            logger.error(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: message_id={getattr(m, 'id', None)}, media_type={media_type}")
                                            continue
                                        temp_files.append(temp_file_path)
                                    media_list.append((media_type, file_id, temp_file_path))
                                elif m.document.mime_type.startswith('video/'):
                                    media_type = 'video'
                                    file_id = m.document.file_id
                                    temp_file_path = None
                                    if not is_bot_admin:
                                        import tempfile
                                        ext = '.mp4'
                                        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
                                            temp_file_path = tmp.name
                                        temp_file_path = await self.userbot.download_media(m, file_name=temp_file_path)
                                        if not temp_file_path or not os.path.exists(temp_file_path):
                                            logger.error(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞: message_id={getattr(m, 'id', None)}, media_type={media_type}")
                                            continue
                                        temp_files.append(temp_file_path)
                                    media_list.append((media_type, file_id, temp_file_path))
                                else:
                                    logger.warning(f"[FORWARDER] –î–æ–∫—É–º–µ–Ω—Ç {getattr(m, 'id', None)} —Å mime-type {m.document.mime_type} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                                    continue
                            else:
                                logger.warning(f"[FORWARDER] –°–æ–æ–±—â–µ–Ω–∏–µ {getattr(m, 'id', None)} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: media={getattr(m, 'media', None)}, type={type(m)}")
                                continue
                        # –î–æ–±–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–∞—Ç–Ω—É—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                        if not media_list:
                            logger.warning(f"[FORWARDER] –í –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ {group_id} –Ω–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (photo/video), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.")
                            return 0
                        if media_list:
                            try:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                                if is_bot_admin:
                                    tg_media = [InputPaidMediaPhoto(media=fid) if mt == 'photo' else InputPaidMediaVideo(media=fid) for mt, fid, _ in media_list]
                                else:
                                    tg_media = [InputPaidMediaPhoto(media=open(tf, 'rb')) if mt == 'photo' else InputPaidMediaVideo(media=open(tf, 'rb')) for mt, fid, tf in media_list]
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ HTML-—Ä–∞–∑–º–µ—Ç–∫–∏ –≤ caption
                                contains_html = "<a href=" in group_caption or "<b>" in group_caption or "<i>" in group_caption or "<code>" in group_caption
                                
                                result = await self.tg_bot.send_paid_media(
                                    chat_id=target_channel,
                                    star_count=paid_content_stars,
                                    media=tg_media,
                                    caption=group_caption,
                                    parse_mode=TgParseMode.HTML if contains_html else None
                                )
                                logger.info(f"[FORWARDER] ‚úÖ –ü–ª–∞—Ç–Ω–∞—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ python-telegram-bot —Å {paid_content_stars} –∑–≤–µ–∑–¥–∞–º–∏")
                                if not is_bot_admin:
                                    for tf in temp_files:
                                        try:
                                            os.remove(tf)
                                            logger.info(f"[FORWARDER] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω: {tf}")
                                        except Exception as e:
                                            logger.warning(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {tf}: {e}")
                            except Exception as e:
                                if "Invalid paid media file specified" in str(e):
                                    logger.warning(f"[FORWARDER][FALLBACK] –û—à–∏–±–∫–∞ 'Invalid paid media file specified' –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞—Ç–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —á–µ—Ä–µ–∑ Pyrogram")
                                    paid_content_stars = 0
                                elif "Chat not found" in str(e) or "chat not found" in str(e):
                                    logger.warning(f"[FORWARDER] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ python-telegram-bot: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pyrogram")
                                    group_message_ids = []
                                    paid_content_stars = 0
                                else:
                                    if not is_bot_admin:
                                        for tf in temp_files:
                                            try:
                                                os.remove(tf)
                                            except Exception:
                                                pass
                                    raise e
                        # –ï—Å–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è –∏–ª–∏ –±—ã–ª —Å–±—Ä–æ—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Pyrogram
                        if paid_content_stars == 0:
                            logger.info(f"[FORWARDER] üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ Pyrogram –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Pyrogram –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                            media_objs = []
                            for i, m in enumerate(group_msgs):
                                caption = group_caption if i == 0 and group_caption else None
                                caption_entities = getattr(m, 'caption_entities', None)
                                if m.photo:
                                    media_obj = InputMediaPhoto(
                                        media=m.photo.file_id,
                                        caption=caption
                                    )
                                elif m.video:
                                    media_obj = InputMediaVideo(
                                        media=m.video.file_id,
                                        caption=caption
                                    )
                                elif m.document:
                                    media_obj = InputMediaDocument(
                                        media=m.document.file_id,
                                        caption=caption
                                    )
                                elif m.audio:
                                    media_obj = InputMediaAudio(
                                        media=m.audio.file_id,
                                        caption=caption
                                    )
                                elif m.animation:
                                    media_obj = InputMediaAnimation(
                                        media=m.animation.file_id,
                                        caption=caption
                                    )
                                else:
                                    continue
                                media_objs.append(media_obj)
                                group_message_ids.append(m.id)
                            
                            if media_objs:
                                logger.info(f"[FORWARDER][DEBUG] media_objs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {[type(obj).__name__ + ':' + getattr(obj, 'media', 'NO_MEDIA') for obj in media_objs]}")
                                await self.userbot.send_media_group(
                                    chat_id=target_channel,
                                    media=media_objs
                                )
                            else:
                                logger.warning(f"[FORWARDER][SKIP] media_objs –ø—É—Å—Ç–æ–π, –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                else:
                    logger.info(f"[FORWARDER] üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ Pyrogram –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (paid_content_stars={paid_content_stars}, tg_bot={self.tg_bot is not None})")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Pyrogram –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    media_objs = []
                    for i, m in enumerate(group_msgs):
                        caption = group_caption if i == 0 and group_caption else None
                        caption_entities = getattr(m, 'caption_entities', None)
                        if m.photo:
                            media_obj = InputMediaPhoto(
                                media=m.photo.file_id,
                                caption=caption
                            )
                        elif m.video:
                            media_obj = InputMediaVideo(
                                media=m.video.file_id,
                                caption=caption
                            )
                        elif m.document:
                            media_obj = InputMediaDocument(
                                media=m.document.file_id,
                                caption=caption
                            )
                        elif m.audio:
                            media_obj = InputMediaAudio(
                                media=m.audio.file_id,
                                caption=caption
                            )
                        elif m.animation:
                            media_obj = InputMediaAnimation(
                                media=m.animation.file_id,
                                caption=caption
                            )
                        else:
                            continue
                        media_objs.append(media_obj)
                        group_message_ids.append(m.id)
                    
                    if media_objs:
                        logger.info(f"[FORWARDER][DEBUG] media_objs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {[type(obj).__name__ + ':' + getattr(obj, 'media', 'NO_MEDIA') for obj in media_objs]}")
                        await self.userbot.send_media_group(
                            chat_id=target_channel,
                            media=media_objs
                        )
                    else:
                        logger.warning(f"[FORWARDER][SKIP] media_objs –ø—É—Å—Ç–æ–π, –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            
            paid_text = f" —Å –ø–ª–∞—Ç–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {paid_content_stars} –∑–≤–µ–∑–¥–æ—á–µ–∫" if paid_content_stars > 0 else ""
            logger.info(f"[FORWARDER] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} —Å {len(group_msgs)} —Ñ–∞–π–ª–∞–º–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ {target_channel}{paid_text}")
            await self.db.save_media_group(channel_id, group_id, group_message_ids)
            for msg_id in group_message_ids:
                await self.db.mark_message_as_forwarded(channel_id, msg_id, target_channel)
            self._media_group_buffers[channel_id].pop(group_id, None)
            await self._save_to_posts_json(group_msgs, group_caption, channel_id)
            if callback:
                callback(1)
            return 1
        except Exception as e:
            if "FLOOD_WAIT" in str(e):
                import re
                wait_time = int(re.search(r'(\d+)', str(e)).group(1))
                logger.warning(f"[FORWARDER] FloodWait –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: –æ–∂–∏–¥–∞–µ–º {wait_time} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(wait_time)
                return await self.forward_media_group(channel_id, group_id, target_channel, text_mode, add_footer, forward_mode, hide_sender, max_posts, callback, paid_content_stars, group_msgs, config)
            else:
                logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {e}")
                logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                return 0

    async def start_forwarding_parsing(self, source_channel: str, target_channel: str, config: dict, callback: Optional[Callable] = None):
        """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ + –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (background task)"""
        task_id = self.create_parse_forward_task(source_channel, target_channel, config)
        task_info = self._parse_forward_tasks[task_id]
        
        # –°–æ–∑–¥–∞–µ–º background task
        async def run_parse_forward():
            try:
                logger.info(f"[FORWARDER] üöÄ –ó–ê–ü–£–°–ö –ü–ê–†–°–ò–ù–ì–ê + –ü–ï–†–ï–°–´–õ–ö–ò (–ù–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê!)")
                logger.info(f"[FORWARDER] –ò—Å—Ç–æ—á–Ω–∏–∫: {source_channel} -> –¶–µ–ª—å: {target_channel}")
                logger.info(f"[FORWARDER] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")
                logger.info(f"[FORWARDER] üîç –ü–õ–ê–¢–ù–´–ï –ó–í–ï–ó–î–´: {config.get('paid_content_stars', 0)} (—Ç–∏–ø: {type(config.get('paid_content_stars', 0))})")
                logger.info(f"[FORWARDER] üîç –í—Å–µ –∫–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {list(config.keys())}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                if str(source_channel).startswith("-100"):
                    channel = await self.userbot.get_chat(int(source_channel))
                else:
                    channel = await self.userbot.get_chat(source_channel)
                channel_id = channel.id
                channel_name = channel.username or str(channel_id)
                channel_title = getattr(channel, "title", None)
                
                logger.info(f"[FORWARDER] üì∫ –ö–∞–Ω–∞–ª: {channel_title} (@{channel_name}, ID: {channel_id})")
                
                # –û—Ç–º–µ—á–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
                self._forwarding_active[channel_id] = True
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä—ã –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
                if channel_id not in self._media_group_buffers:
                    self._media_group_buffers[channel_id] = {}
                if channel_id not in self._media_group_timeouts:
                    self._media_group_timeouts[channel_id] = {}
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                hide_sender = config.get("hide_sender", True)
                add_footer = config.get("footer_text", "")
                max_posts = config.get("max_posts", 0)
                forward_mode = config.get("forward_mode", "copy")  # copy –∏–ª–∏ forward
                parse_mode = config.get("parse_mode", "all")  # all –∏–ª–∏ hashtags
                hashtag_filter = config.get("hashtag_filter", "")
                text_mode = config.get("text_mode", "hashtags_only")  # hashtags_only, as_is, no_text
                delay_seconds = config.get("delay_seconds", 0)
                paid_content_mode = config.get("paid_content_mode", "off")
                paid_content_hashtag = config.get("paid_content_hashtag")
                paid_content_chance = config.get("paid_content_chance")
                paid_content_stars = config.get("paid_content_stars", 0)
                
                # --- –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
                parse_direction = config.get("parse_direction", "forward")  # "forward" –∏–ª–∏ "backward"
                media_filter = config.get("media_filter", "all")  # "all" –∏–ª–∏ "media_only"
                range_mode = config.get("range_mode", "all")  # "all" –∏–ª–∏ "range"
                range_start_id = config.get("range_start_id")
                range_end_id = config.get("range_end_id")
                
                logger.info(f"[FORWARDER] ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ä–µ–∂–∏–º={parse_mode}, —Ö—ç—à—Ç–µ–≥='{hashtag_filter}', –ª–∏–º–∏—Ç={max_posts}, –∑–∞–¥–µ—Ä–∂–∫–∞={delay_seconds}—Å, –ø–ª–∞—Ç–Ω—ã–µ={paid_content_stars}‚≠ê")
                logger.info(f"[FORWARDER] üîç –ù–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ={parse_direction}, —Ñ–∏–ª—å—Ç—Ä –º–µ–¥–∏–∞={media_filter}, –¥–∏–∞–ø–∞–∑–æ–Ω={range_mode}")
                if range_mode == "range":
                    logger.info(f"[FORWARDER] üîç –î–∏–∞–ø–∞–∑–æ–Ω: —Å {range_start_id} –ø–æ {range_end_id}")
                logger.info(f"[FORWARDER] üîç –ü–õ–ê–¢–ù–´–ï –ó–í–ï–ó–î–´ –í –ù–ê–°–¢–†–û–ô–ö–ê–•: {paid_content_stars} (—Ç–∏–ø: {type(paid_content_stars)})")
                
                if not target_channel:
                    raise Exception("–ù–µ —É–∫–∞–∑–∞–Ω —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏")
                
                logger.info(f"[FORWARDER] üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_name}...")
                
                forwarded_count = 0
                last_message_id = None
                
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                all_messages = []
                media_groups = {}
                try:
                    async for message in self.userbot.get_chat_history(channel_id, limit=1000):
                        try:
                            all_messages.append(message)
                            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ media_group_id
                            if getattr(message, 'media_group_id', None):
                                group_id = message.media_group_id
                                if group_id not in media_groups:
                                    media_groups[group_id] = []
                                media_groups[group_id].append(message)
                        except (ValueError, KeyError) as e:
                            if ("Peer id invalid" in str(e)) or ("ID not found" in str(e)):
                                logger.warning(f"[FORWARDER][SKIP] –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ peer: {e}")
                                continue
                            else:
                                raise
                    logger.info(f"[FORWARDER] ‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞–π–¥–µ–Ω–æ {len(media_groups)} –º–µ–¥–∏–∞–≥—Ä—É–ø–ø")
                    # –Ø–≤–Ω–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –î–û –ø–µ—Ä–µ—Å—ã–ª–∫–∏
                    if channel_id not in self._media_group_buffers:
                        self._media_group_buffers[channel_id] = {}
                    temp_media_groups = {str(group_id): msgs for group_id, msgs in media_groups.items()}
                    self._media_group_buffers[channel_id] = temp_media_groups
                    for group_id, msgs in temp_media_groups.items():
                        logger.info(f"[FORWARDER][DEBUG] –ë—É—Ñ–µ—Ä –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {len(msgs)} —Ñ–∞–π–ª–æ–≤")
                    logger.info(f"[FORWARDER][DEBUG] –ë—É—Ñ–µ—Ä –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –∑–∞–ø–æ–ª–Ω–µ–Ω: {len(self._media_group_buffers[channel_id])} –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                except Exception as e:
                    logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                    task_info["status"] = "error"
                    task_info["error"] = str(e)
                    task_info["completed_at"] = datetime.now().isoformat()
                    return
                
                # --- –ù–æ–≤—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø (–∫–∞–∫ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ) ---
                self.media_groups = {}
                for message in all_messages:
                    if getattr(message, 'media_group_id', None):
                        group_id = message.media_group_id
                        if group_id not in self.media_groups:
                            self.media_groups[group_id] = []
                        self.media_groups[group_id].append(message)
                # --- –í–ê–ñ–ù–û: –ó–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –î–û –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
                self._media_group_buffers[channel_id] = {str(gid): msgs for gid, msgs in self.media_groups.items()}
                logger.info(f"[FORWARDER] –ë—É—Ñ–µ—Ä –º–µ–¥–∏–∞–≥—Ä—É–ø–ø –∑–∞–ø–æ–ª–Ω–µ–Ω: {len(self._media_group_buffers[channel_id])} –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
                # --- –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É ---
                
                # 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É ID
                if range_mode == "range" and range_start_id and range_end_id:
                    all_messages = [msg for msg in all_messages if range_start_id <= msg.id <= range_end_id]
                    logger.info(f"[FORWARDER] üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É: {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ–¥–∏–∞
                if media_filter == "media_only":
                    all_messages = [msg for msg in all_messages if msg.media is not None]
                    logger.info(f"[FORWARDER] üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ–¥–∏–∞: {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # 3. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                if parse_direction == "backward":
                    # –û—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                    all_messages.sort(key=lambda x: x.date, reverse=True)
                    logger.info(f"[FORWARDER] üîç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º")
                elif parse_direction == "forward":
                    # –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                    all_messages.sort(key=lambda x: x.date)
                    logger.info(f"[FORWARDER] üîç –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º")
                
                logger.info(f"[FORWARDER] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parse_direction}, —Ñ–∏–ª—å—Ç—Ä: {media_filter}, –¥–∏–∞–ø–∞–∑–æ–Ω: {range_mode})...")
                print(f'=== [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {parse_direction}, —Ñ–∏–ª—å—Ç—Ä: {media_filter}) ===')
                # --- –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø –í –•–†–û–ù–û–õ–û–ì–ò–ß–ï–°–ö–û–ú –ü–û–†–Ø–î–ö–ï ---
                processed_groups = set()
                hashtag_paid_counter = 0
                select_paid_counter = 0
                media_group_paid_counter = 0
                self._parsing_group_hashtag_paid_counter = 0
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                for message in all_messages:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
                        if max_posts and max_posts > 0 and forwarded_count >= max_posts:
                            logger.info(f"[FORWARDER] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫ ({max_posts}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                            break
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            is_forwarded = await self.db.is_message_forwarded(message.chat.id, message.id, target_channel)
                        except (ValueError, KeyError) as e:
                            if ("Peer id invalid" in str(e)) or ("ID not found" in str(e)):
                                logger.warning(f"[FORWARDER][SKIP] –°–æ–æ–±—â–µ–Ω–∏–µ {getattr(message, 'id', None)} –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ peer: {e}")
                                continue
                            else:
                                raise
                        if is_forwarded:
                            logger.info(f"[FORWARDER] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —É–∂–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            continue
                        
                        # --- –î–û–ë–ê–í–õ–ï–ù–û: —Ñ–∏–ª—å—Ç—Ä –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ media_only ---
                        if media_filter == "media_only" and not getattr(message, 'media', None):
                            logger.info(f"[FORWARDER] –°–æ–æ–±—â–µ–Ω–∏–µ {getattr(message, 'id', None)} –±–µ–∑ –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (media_only, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)")
                            return
                        
                        # --- –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–î–ò–ê–ì–†–£–ü–ü ---
                        if getattr(message, 'media_group_id', None):
                            group_id = message.media_group_id
                            
                            # –ï—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                            if group_id in processed_groups:
                                continue
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                            group_msgs = media_groups.get(group_id, [])
                            if not group_msgs:
                                logger.warning(f"[FORWARDER] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±—É—Ñ–µ—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                continue
                            
                            print(f'=== [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}, —Ñ–∞–π–ª–æ–≤: {len(group_msgs)} ===')
                            
                            # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥—É ---
                            if parse_mode == "hashtags" and hashtag_filter and hashtag_filter.strip():
                                if not self.group_has_hashtag(group_msgs, hashtag_filter):
                                    logger.info(f"[FORWARDER] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ '{hashtag_filter}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É")
                                    processed_groups.add(group_id)
                                    continue
                            
                            # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã ---
                            group_is_paid = False
                            if paid_content_mode == "off" or not paid_content_mode:
                                group_is_paid = False
                            elif paid_content_mode == "hashtag":
                                for m in group_msgs:
                                    t = (m.text or m.caption or "").lower()
                                    if paid_content_hashtag and paid_content_hashtag.lower() in t:
                                        group_is_paid = True
                                        break
                            elif paid_content_mode == "random":
                                import random
                                if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                    group_is_paid = True
                            elif paid_content_mode == "hashtag_random":
                                import random
                                for m in group_msgs:
                                    t = (m.text or m.caption or "").lower()
                                    if paid_content_hashtag and paid_content_hashtag.lower() in t:
                                        if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                            group_is_paid = True
                                            break
                            elif paid_content_mode == "select":
                                media_group_paid_counter += 1
                                every = config.get('paid_content_every', 1)
                                try:
                                    every = int(every)
                                except Exception:
                                    every = 1
                                if every > 0 and (media_group_paid_counter % every == 0):
                                    group_is_paid = True
                            elif paid_content_mode == "hashtag_select":
                                group_hashtag = False
                                for m in group_msgs:
                                    t = (m.text or m.caption or "").lower()
                                    if paid_content_hashtag and paid_content_hashtag.lower() in t:
                                        group_hashtag = True
                                        break
                                if group_hashtag:
                                    self._parsing_group_hashtag_paid_counter += 1
                                    every = config.get('paid_content_every', 1)
                                    try:
                                        every = int(every)
                                    except Exception:
                                        every = 1
                                    if every > 0 and (self._parsing_group_hashtag_paid_counter % every == 0):
                                        group_is_paid = True
                            else:
                                group_is_paid = False
                            
                            logger.info(f"[FORWARDER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É {group_id} —Å {len(group_msgs)} —Ñ–∞–π–ª–∞–º–∏, –ø–ª–∞—Ç–Ω–∞—è: {group_is_paid}")
                            
                            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                            try:
                                await self.forward_media_group(
                                    channel_id,
                                    group_id,
                                    target_channel,
                                    text_mode,
                                    add_footer,
                                    forward_mode,
                                    hide_sender,
                                    max_posts,
                                    callback,
                                    paid_content_stars if group_is_paid else 0,
                                    group_msgs,
                                    config
                                )
                                forwarded_count += 1
                                logger.info(f"[FORWARDER] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} —Å {len(group_msgs)} —Ñ–∞–π–ª–∞–º–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ {target_channel}")
                            except Exception as e:
                                logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {e}")
                                logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                            
                            processed_groups.add(group_id)
                            
                        else:
                            # --- –û–ë–†–ê–ë–û–¢–ö–ê –û–î–ò–ù–û–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
                            # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ö—ç—à—Ç–µ–≥—É ---
                            if parse_mode == "hashtags" and hashtag_filter and hashtag_filter.strip():
                                text = (message.text or message.caption or "").lower()
                                if hashtag_filter.lower() not in text:
                                    logger.info(f"[FORWARDER] –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö—ç—à—Ç–µ–≥ '{hashtag_filter}', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                    continue
                            
                            # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–Ω–æ—Å—Ç—å –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
                            is_paid = False
                            text = (message.text or message.caption or "").lower()
                            if paid_content_mode == "off" or not paid_content_mode:
                                is_paid = False
                            elif paid_content_mode == "hashtag":
                                if paid_content_hashtag and paid_content_hashtag.lower() in text:
                                    is_paid = True
                            elif paid_content_mode == "random":
                                import random
                                if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                    is_paid = True
                            elif paid_content_mode == "hashtag_random":
                                import random
                                if paid_content_hashtag and paid_content_hashtag.lower() in text:
                                    if paid_content_chance and random.randint(1, 10) <= int(paid_content_chance):
                                        is_paid = True
                            elif paid_content_mode == "select":
                                select_paid_counter += 1
                                every = config.get('paid_content_every', 1)
                                try:
                                    every = int(every)
                                except Exception:
                                    every = 1
                                if every > 0 and (select_paid_counter % every == 0):
                                    is_paid = True
                            elif paid_content_mode == "hashtag_select":
                                if paid_content_hashtag and paid_content_hashtag.lower() in text:
                                    hashtag_paid_counter += 1
                                    every = config.get('paid_content_every', 1)
                                    try:
                                        every = int(every)
                                    except Exception:
                                        every = 1
                                    if every > 0 and (hashtag_paid_counter % every == 0):
                                        is_paid = True
                            else:
                                is_paid = False
                            
                            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            try:
                                await self._forward_single_message(
                                    message,
                                    target_channel,
                                    hide_sender,
                                    add_footer,
                                    forward_mode,
                                    text_mode,
                                    paid_content_stars if is_paid else 0
                                )
                                forwarded_count += 1
                                logger.info(f"[FORWARDER] –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {target_channel}")
                            except Exception as e:
                                logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                                logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                            
                            if delay_seconds and delay_seconds > 0:
                                await asyncio.sleep(delay_seconds)
                        
                        last_message_id = message.id
                        
                    except Exception as e:
                        logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                        logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
                task_info["status"] = "completed"
                task_info["completed_at"] = datetime.now().isoformat()
                logger.info(f"[FORWARDER] ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ü–µ—Ä–µ—Å–ª–∞–Ω–æ {forwarded_count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
                
            except Exception as e:
                logger.error(f"[FORWARDER] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
                logger.error(f"[FORWARDER] –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")
                task_info["status"] = "error"
                task_info["error"] = str(e)
                task_info["completed_at"] = datetime.now().isoformat()
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º background task
        task = asyncio.create_task(run_parse_forward())
        task_info["task"] = task
        
        return task_id

    async def get_forwarding_config(self, user_id: int, source_channel_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from sqlalchemy import create_engine
            from sqlalchemy.orm import sessionmaker
            from models import ForwardingConfig
            
            engine = create_engine('sqlite:///parser.db')
            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
            db = SessionLocal()
            
            try:
                config = db.query(ForwardingConfig).filter_by(
                    user_id=user_id,
                    source_channel_id=source_channel_id
                ).first()
                
                if config:
                    return {
                        'hide_sender': config.hide_sender,
                        'footer_text': config.footer_text,
                        'max_posts': config.max_posts,
                        'forward_mode': 'copy',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        'parse_mode': config.parse_mode,
                        'hashtag_filter': config.hashtag_filter,
                        'text_mode': config.text_mode,
                        'delay_seconds': config.delay_seconds,
                        'paid_content_stars': config.paid_content_stars
                    }
                else:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    return {
                        'hide_sender': True,
                        'footer_text': '',
                        'max_posts': 0,
                        'forward_mode': 'copy',
                        'parse_mode': 'all',
                        'hashtag_filter': '',
                        'text_mode': 'hashtags_only',
                        'delay_seconds': 0,
                        'paid_content_stars': 0
                    }
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"[FORWARDER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'hide_sender': True,
                'footer_text': '',
                'max_posts': 0,
                'forward_mode': 'copy',
                'parse_mode': 'all',
                'hashtag_filter': '',
                'text_mode': 'hashtags_only',
                'delay_seconds': 0,
                'paid_content_stars': 0
            }

    def _should_use_parse_mode(self, entities):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å—Ä–µ–¥–∏ entities –µ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—â–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏, –∏–Ω–∞—á–µ False"""
        if not entities or len(entities) == 0:
            return False
        allowed_types = {
            'MessageEntityType.BOLD', 'MessageEntityType.ITALIC', 'MessageEntityType.URL', 'MessageEntityType.TEXT_LINK',
            'MessageEntityType.PRE', 'MessageEntityType.CODE', 'MessageEntityType.UNDERLINE', 'MessageEntityType.STRIKETHROUGH', 'MessageEntityType.SPOILER',
            'bold', 'italic', 'url', 'text_link', 'pre', 'code', 'underline', 'strikethrough', 'spoiler'
        }
        for e in entities:
            t = getattr(e, 'type', None)
            if t and str(t) in allowed_types:
                return True
        return False

    def group_has_hashtag(self, group_messages, hashtag):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º —Ö—ç—à—Ç–µ–≥–æ–º (–≤ caption, text, entities, caption_entities).
        –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True (–≥—Ä—É–ø–ø–∞ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Ü–µ–ª–∏–∫–æ–º).
        """
        hashtag_lower = hashtag.lower()
        for m in group_messages:
            t = (getattr(m, 'caption', None) or getattr(m, 'text', None) or "").lower()
            if hashtag_lower in t:
                return True
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º entities –∏ caption_entities
            for ent in list(getattr(m, 'entities', []) or []) + list(getattr(m, 'caption_entities', []) or []):
                if getattr(ent, 'type', None) in ('hashtag', 'MessageEntityType.HASHTAG'):
                    value = None
                    if hasattr(m, 'text') and m.text and ent.offset + ent.length <= len(m.text):
                        value = m.text[ent.offset:ent.offset+ent.length]
                    elif hasattr(m, 'caption') and m.caption and ent.offset + ent.length <= len(m.caption):
                        value = m.caption[ent.offset:ent.offset+ent.length]
                    if value and hashtag_lower in value.lower():
                        return True
        return False

    async def _is_bot_admin(self, channel_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Bot API"""
        if not self.tg_bot:
            return False
        try:
            admins = await self.tg_bot.get_chat_administrators(channel_id)
            me = await self.tg_bot.get_me()
            for admin in admins:
                if admin.user.id == me.id:
                    return True
            return False
        except Exception as e:
            logger.warning(f"[FORWARDER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω—Å—Ç–≤–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
            return False

    def get_all_monitoring_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ —Å –ø–æ–ª–Ω—ã–º config –∫–∞–∂–¥–æ–≥–æ."""
        result = []
        for (channel_id, target_channel_id), task in self._monitoring_tasks.items():
            active = self._forwarding_active.get(channel_id, False)
            config = self._forwarding_settings.get(channel_id, {})
            target_channel = self._monitoring_targets.get((channel_id, target_channel_id))
            result.append({
                "channel_id": channel_id,
                "active": active,
                "config": config,
                "task_running": task is not None and not task.done(),
                "target_channel": target_channel_id
            })
        return result

    def _generate_task_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π task_id –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏."""
        self._task_counter += 1
        return f"parse_forward_{self._task_counter}_{int(asyncio.get_event_loop().time())}"

    def create_parse_forward_task(self, source_channel: str, target_channel: str, config: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç task_id."""
        task_id = self._generate_task_id()
        task_info = {
            "task_id": task_id,
            "source_channel": source_channel,
            "target_channel": target_channel,
            "config": config,
            "status": "running",
            "started_at": datetime.now().isoformat(),
            "completed_at": None,
            "error": None,
            "task": None  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        }
        self._parse_forward_tasks[task_id] = task_info
        return task_id

    def get_parse_forward_task_status(self, task_id: str) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ task_id."""
        task_info = self._parse_forward_tasks.get(task_id)
        if not task_info:
            return {"error": "Task not found"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ task
        if task_info["task"] and task_info["task"].done():
            if task_info["status"] == "running":
                task_info["status"] = "completed"
                task_info["completed_at"] = datetime.now().isoformat()
        
        return {
            "task_id": task_id,
            "source_channel": task_info["source_channel"],
            "target_channel": task_info["target_channel"],
            "status": task_info["status"],
            "started_at": task_info["started_at"],
            "completed_at": task_info["completed_at"],
            "error": task_info["error"]
        }

    def stop_parse_forward_task(self, task_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ task_id."""
        task_info = self._parse_forward_tasks.get(task_id)
        if not task_info:
            return False
        
        if task_info["status"] == "running" and task_info["task"]:
            task_info["task"].cancel()
            task_info["status"] = "stopped"
            task_info["completed_at"] = datetime.now().isoformat()
            return True
        return False

    def get_all_parse_forward_tasks(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–∞—Ä—Å–∏–Ω–≥+–ø–µ—Ä–µ—Å—ã–ª–∫–∏."""
        result = []
        for task_id, task_info in self._parse_forward_tasks.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ task
            if task_info["task"] and task_info["task"].done():
                if task_info["status"] == "running":
                    task_info["status"] = "completed"
                    task_info["completed_at"] = datetime.now().isoformat()
            
            result.append({
                "task_id": task_id,
                "source_channel": task_info["source_channel"],
                "target_channel": task_info["target_channel"],
                "status": task_info["status"],
                "started_at": task_info["started_at"],
                "completed_at": task_info["completed_at"],
                "error": task_info["error"]
            })
        return result

    def _update_source_handler(self, channel_id):
        # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π handler, –µ—Å–ª–∏ –µ—Å—Ç—å
        if channel_id in self._handlers:
            self.userbot.remove_handler(self._handlers[channel_id])
            del self._handlers[channel_id]
        # –ù–∞–π—Ç–∏ –≤—Å–µ target_channel –¥–ª—è —ç—Ç–æ–≥–æ source_channel
        targets = [tgt_id for (src_id, tgt_id) in self._monitoring_tasks.keys() if src_id == channel_id]
        if not targets:
            return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ ‚Äî handler –Ω–µ –Ω—É–∂–µ–Ω
        @self.userbot.on_message(filters.chat(channel_id))
        async def handle_new_message(client, message):
            logger.info(f"[FORWARDER][HANDLER] –í—ã–∑–≤–∞–Ω handler –¥–ª—è channel_id={channel_id}, message_id={getattr(message, 'id', None)}")
            # --- –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã ---
            if getattr(message, 'media_group_id', None):
                group_id = str(message.media_group_id)
                if group_id not in self.media_groups:
                    self.media_groups[group_id] = []
                self.media_groups[group_id].append(message)
                logger.info(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id} –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É {group_id}, —Ç–µ–ø–µ—Ä—å —Ñ–∞–π–ª–æ–≤: {len(self.media_groups[group_id])}")
                if group_id not in self.media_group_timeouts:
                    async def send_group_later():
                        await asyncio.sleep(2.5)
                        group_messages = self.media_groups.get(group_id, [])
                        logger.info(f"[DEBUG] –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id}: {len(group_messages)} —Ñ–∞–π–ª–æ–≤")
                        # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç–Ω–æ—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –û–î–ò–ù –†–ê–ó ---
                        config = self._forwarding_settings.get(channel_id, {})
                        paid_content_mode = config.get('paid_content_mode', 'off')
                        paid_content_every = config.get('paid_content_every', 1)
                        paid_content_stars = config.get('paid_content_stars', 0)
                        group_is_paid = False
                        if paid_content_mode == "select":
                            counters = self._counters[channel_id]
                            counters['media_group_paid_counter'] += 1
                            every = paid_content_every
                            try:
                                every = int(every)
                            except Exception:
                                every = 1
                            if every > 0 and (counters['media_group_paid_counter'] % every == 0):
                                group_is_paid = True
                        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –≤–æ –≤—Å–µ target_channel ---
                        for (src_id2, tgt_id2), task2 in self._monitoring_tasks.items():
                            if src_id2 == channel_id:
                                try:
                                    await self.forward_media_group(
                                        channel_id,
                                        group_id,
                                        tgt_id2,
                                        config.get('text_mode', 'hashtags_only'),
                                        config.get('footer_text', ''),
                                        config.get('forward_mode', 'copy'),
                                        config.get('hide_sender', True),
                                        config.get('max_posts', 0),
                                        None,
                                        paid_content_stars if group_is_paid else 0,
                                        group_messages
                                    )
                                    logger.info(f"[FORWARDER][HANDLER] –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ {group_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–∞ –≤ {tgt_id2}")
                                except Exception as e:
                                    logger.error(f"[FORWARDER][HANDLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã {group_id} –≤ {tgt_id2}: {e}")
                        self.media_groups.pop(group_id, None)
                        self.media_group_timeouts.pop(group_id, None)
                    self.media_group_timeouts[group_id] = asyncio.create_task(send_group_later())
                return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # --- –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
            for (src_id, tgt_id), task in self._monitoring_tasks.items():
                if src_id == channel_id:
                    config = self._forwarding_settings.get(channel_id, {})
                    hide_sender = config.get("hide_sender", True)
                    add_footer = config.get("footer_text", "")
                    max_posts = config.get("max_posts", 0)
                    forward_mode = config.get("forward_mode", "copy")
                    parse_mode = config.get("parse_mode", "all")
                    hashtag_filter = config.get("hashtag_filter", "")
                    text_mode = config.get("text_mode", "hashtags_only")
                    delay_seconds = config.get("delay_seconds", 0)
                    paid_content_stars = config.get("paid_content_stars", 0)
                    # --- –û–¥–∏–Ω–æ—á–Ω—ã–µ paid_content_mode == 'select' ---
                    is_paid = False
                    if config.get('paid_content_mode') == 'select':
                        counters = self._counters[channel_id]
                        if 'single_paid_counter' not in counters:
                            counters['single_paid_counter'] = 0
                        counters['single_paid_counter'] += 1
                        every = config.get('paid_content_every', 1)
                        try:
                            every = int(every)
                        except Exception:
                            every = 1
                        if every > 0 and (counters['single_paid_counter'] % every == 0):
                            is_paid = True
                    try:
                        await self._forward_single_message(
                            message,
                            tgt_id,
                            hide_sender,
                            add_footer,
                            forward_mode,
                            text_mode,
                            paid_content_stars if is_paid else 0
                        )
                        logger.info(f"[FORWARDER][HANDLER] –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {getattr(message, 'id', None)} –≤ {tgt_id}")
                    except Exception as e:
                        logger.error(f"[FORWARDER][HANDLER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –≤ {tgt_id}: {e}")
        self._handlers[channel_id] = handle_new_message

