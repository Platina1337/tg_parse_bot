import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from database import Database
from session_manager import SessionManager

async def test_sessions():
    print("=== –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ ===")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    await db.init()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏—è–º
    sessions_dir = os.path.abspath("../sessions")
    print(f"üìÅ –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏—è–º: {sessions_dir}")
    print(f"üìÅ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(sessions_dir)}")
    
    if os.path.exists(sessions_dir):
        files = [f for f in os.listdir(sessions_dir) if f.endswith('.session')]
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª–æ–≤: {len(files)}")
        for file in files:
            print(f"   - {file}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º session manager
    session_manager = SessionManager(db=db, session_dir=sessions_dir)
    print("‚úÖ SessionManager —Å–æ–∑–¥–∞–Ω")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
    imported = await session_manager.import_sessions_from_files()
    print(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Å—Å–∏–π: {imported}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    await session_manager.load_clients()
    print("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
    sessions = await session_manager.get_all_sessions()
    print(f"üìã –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –ë–î: {len(sessions)}")
    for session in sessions:
        print(f"   - {session.alias} (–∞–∫—Ç–∏–≤–Ω–∞: {session.is_active})")
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –Ω–∞ –∑–∞–¥–∞—á–∏
    if sessions:
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ parsing
        result = await session_manager.assign_task(sessions[0].alias, "parsing")
        print(f"üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ parsing: {result}")
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é –Ω–∞ monitoring
        result = await session_manager.assign_task(sessions[0].alias, "monitoring")
        print(f"üìù –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ monitoring: {result}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –∑–∞–¥–∞—á
    parsing_sessions = await session_manager.get_sessions_for_task("parsing")
    print(f"üîç –°–µ—Å—Å–∏–π –¥–ª—è parsing: {len(parsing_sessions)}")
    
    monitoring_sessions = await session_manager.get_sessions_for_task("monitoring")
    print(f"üîç –°–µ—Å—Å–∏–π –¥–ª—è monitoring: {len(monitoring_sessions)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    if sessions:
        client = await session_manager.get_client(sessions[0].alias)
        print(f"üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω: {client is not None}")
        if client:
            print(f"   - –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {getattr(client, 'name', 'N/A')}")
    
    await db.close()
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_sessions()) 