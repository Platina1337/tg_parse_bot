#!/usr/bin/env python3
"""
–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –ø–æ—Å—Ç–∞—Ö –∫–∞–Ω–∞–ª–∞
–ó–∞–º–µ–Ω—è–µ—Ç —Å—Å—ã–ª–∫—É "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –Ω–∞ –Ω–æ–≤—É—é, –æ—Å—Ç–∞–≤–ª—è—è _TSSH_Fans_ –Ω–µ—Ç—Ä–æ–Ω—É—Ç–æ–π
"""

import asyncio
import re
import logging
import sys
import os
from typing import List, Optional
from pyrogram import Client, filters
from pyrogram.types import Message

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class BulkLinkUpdater:
    def __init__(self, session_path: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞ —Å—Å—ã–ª–æ–∫
        
        Args:
            session_path: –ü—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sessions/egor_ka.session)
        """
        if session_path is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
            project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
            session_path = os.path.join(project_root, "sessions", "egor_ka.session")
        
        self.session_path = session_path
        self.client = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–º–µ–Ω—ã —Å—Å—ã–ª–æ–∫ –¥–ª—è "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        self.old_link = "https://t.me/+ArzlAnjllm5iNmI6"
        self.new_link = "https://t.me/+ybzXQhwkAio4ZGYy"
        self.target_text = "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è "üåê _TSSH_Fans_"
        self.tsh_fans_text = "üåê _TSSH_Fans_"
        self.tsh_fans_link = "https://t.me/TESAMSH/4026"
        
        logger.info(f"[BULK_UPDATER] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Å–µ—Å—Å–∏–µ–π: {session_path}")
        logger.info(f"[BULK_UPDATER] –°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞: {self.old_link}")
        logger.info(f"[BULK_UPDATER] –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {self.new_link}")
        logger.info(f"[BULK_UPDATER] –¶–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç: {self.target_text}")
        logger.info(f"[BULK_UPDATER] TSSH Fans —Ç–µ–∫—Å—Ç: {self.tsh_fans_text}")
        logger.info(f"[BULK_UPDATER] TSSH Fans —Å—Å—ã–ª–∫–∞: {self.tsh_fans_link}")
    
    async def start_client(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º API_ID –∏ API_HASH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            api_id = os.getenv("API_ID")
            api_hash = os.getenv("API_HASH")
            
            if not api_id or not api_hash:
                logger.error("[BULK_UPDATER] ‚ùå API_ID –∏–ª–∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.client = Client(
                name="egor_ka",  # –ò–º—è —Å–µ—Å—Å–∏–∏
                api_id=int(api_id),
                api_hash=api_hash,
                workdir=os.path.dirname(self.session_path)  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
            )
            
            await self.client.start()
            logger.info("[BULK_UPDATER] ‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"[BULK_UPDATER] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    async def stop_client(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        if self.client:
            try:
                await self.client.stop()
                logger.info("[BULK_UPDATER] –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"[BULK_UPDATER] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    
    def should_update_message(self, text: str, message=None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–æ–π
        """
        if not text:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        has_target_text = self.target_text in text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        has_old_link = self.old_link in text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏ –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ
        html_pattern = f'href="{self.old_link}"'
        has_html_link = html_pattern in text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏ –≤ —Å–∫–æ–±–∫–∞—Ö –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        target_with_old_link_pattern = rf'{re.escape(self.target_text)}\s*\({re.escape(self.old_link)}\)'
        has_target_with_old_link_pattern = bool(re.search(target_with_old_link_pattern, text))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
        has_old_link_in_entities = False
        if message:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º entities
            if hasattr(message, 'entities') and message.entities:
                for entity in message.entities:
                    if hasattr(entity, 'url') and entity.url == self.old_link:
                        has_old_link_in_entities = True
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º caption_entities
            if hasattr(message, 'caption_entities') and message.caption_entities:
                for entity in message.caption_entities:
                    if hasattr(entity, 'url') and entity.url == self.old_link:
                        has_old_link_in_entities = True
                        break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        has_correct_target_link = f'<a href="{self.new_link}">{self.target_text}</a>' in text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–æ–π (—ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å)
        has_target_with_old_link = has_target_text and (has_old_link or has_html_link or has_target_with_old_link_pattern or has_old_link_in_entities) and not has_correct_target_link
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞
        if has_target_text or has_old_link or has_html_link or has_target_with_old_link_pattern or has_old_link_in_entities:
            logger.info(f"[BULK_UPDATER] üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞:")
            logger.info(f"[BULK_UPDATER]   –¶–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç: {has_target_text}")
            logger.info(f"[BULK_UPDATER]   –û–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {has_old_link}")
            logger.info(f"[BULK_UPDATER]   HTML —Å—Å—ã–ª–∫–∞: {has_html_link}")
            logger.info(f"[BULK_UPDATER]   –¶–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–æ–π –≤ —Å–∫–æ–±–∫–∞—Ö: {has_target_with_old_link_pattern}")
            logger.info(f"[BULK_UPDATER]   –°—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –≤ —Å—É—â–Ω–æ—Å—Ç—è—Ö: {has_old_link_in_entities}")
            logger.info(f"[BULK_UPDATER]   –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ü–µ–ª–∏: {has_correct_target_link}")
            logger.info(f"[BULK_UPDATER]   –¶–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–æ–π: {has_target_with_old_link}")
            logger.info(f"[BULK_UPDATER]   –¢–µ–∫—Å—Ç: {text[:200]}...")
        
        return has_target_with_old_link
    
    def update_message_text(self, text: str) -> str:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—É—é –¥–ª—è "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        –∏ –¥–æ–±–∞–≤–ª—è—è —Å—Å—ã–ª–∫—É –∫ "üåê _TSSH_Fans_" –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return text
        
        updated_text = text
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Å–∫–æ–±–∫–∞—Ö –¥–ª—è "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
        pattern = rf'({re.escape(self.target_text)})\s*\({re.escape(self.old_link)}\)'
        replacement = rf'\1({self.new_link})'
        updated_text = re.sub(pattern, replacement, updated_text)
        
        # –ó–∞–º–µ–Ω—è–µ–º HTML-—Å—Å—ã–ª–∫—É –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏
        html_pattern = f'href="{self.old_link}"'
        html_replacement = f'href="{self.new_link}"'
        updated_text = updated_text.replace(html_pattern, html_replacement)
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
        updated_text = updated_text.replace(self.old_link, self.new_link)
        
        # –î–æ–±–∞–≤–ª—è–µ–º HTML-–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –∫ —Ç–µ–∫—Å—Ç—É "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª / –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –±–µ–∑ —Å—Å—ã–ª–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        correct_target_link = f'<a href="{self.new_link}">{self.target_text}</a>'
        if self.target_text in updated_text and correct_target_link not in updated_text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if f'<a href="' in updated_text and self.target_text in updated_text:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ–ª—å–∫–æ –∫ —Ü–µ–ª–µ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ look-behind
                pattern = rf'({re.escape(self.target_text)})'
                replacement = rf'<a href="{self.new_link}">\1</a>'
                updated_text = re.sub(pattern, replacement, updated_text)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º
                pattern = rf'({re.escape(self.target_text)})'
                replacement = rf'<a href="{self.new_link}">\1</a>'
                updated_text = re.sub(pattern, replacement, updated_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º HTML-–≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫—É –∫ —Ç–µ–∫—Å—Ç—É "üåê _TSSH_Fans_" –±–µ–∑ —Å—Å—ã–ª–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        correct_tsh_fans_link = f'<a href="{self.tsh_fans_link}">{self.tsh_fans_text}</a>'
        if self.tsh_fans_text in updated_text and correct_tsh_fans_link not in updated_text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            if f'<a href="' in updated_text and self.tsh_fans_text in updated_text:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ–ª—å–∫–æ –∫ —Ü–µ–ª–µ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ look-behind
                pattern = rf'({re.escape(self.tsh_fans_text)})'
                replacement = rf'<a href="{self.tsh_fans_link}">\1</a>'
                updated_text = re.sub(pattern, replacement, updated_text)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º
                pattern = rf'({re.escape(self.tsh_fans_text)})'
                replacement = rf'<a href="{self.tsh_fans_link}">\1</a>'
                updated_text = re.sub(pattern, replacement, updated_text)
        
        if updated_text != text:
            logger.info(f"[BULK_UPDATER] üîÑ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:")
            logger.info(f"[BULK_UPDATER]   –ë—ã–ª–æ: {text}")
            logger.info(f"[BULK_UPDATER]   –°—Ç–∞–ª–æ: {updated_text}")
        
        return updated_text
    
    async def get_channel_messages(self, channel_id: str, limit: int = 1000) -> List[Message]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            messages = []
            async for message in self.client.get_chat_history(channel_id, limit=limit):
                if message.text or message.caption:
                    messages.append(message)
            
            logger.info(f"[BULK_UPDATER] üìä –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id}")
            return messages
        except Exception as e:
            logger.error(f"[BULK_UPDATER] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    async def update_channel_messages(self, channel_id: str, dry_run: bool = True) -> dict:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞
        
        Args:
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            dry_run: –ï—Å–ª–∏ True, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç
            
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        logger.info(f"[BULK_UPDATER] üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        if dry_run:
            logger.info("[BULK_UPDATER] üîç –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê - –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = await self.get_channel_messages(channel_id)
        if not messages:
            logger.warning(f"[BULK_UPDATER] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ {channel_id}")
            return {"total": 0, "updated": 0, "errors": 0}
        
        stats = {
            "total": len(messages),
            "updated": 0,
            "errors": 0,
            "skipped": 0
        }
        
        for message in messages:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                text = message.text or message.caption or ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                if stats["total"] <= 5 or stats["skipped"] < 5:
                    logger.info(f"[BULK_UPDATER] üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {text}")
                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
                    import re
                    links = re.findall(r'https://t\.me/[^\s\)]+', text)
                    if links:
                        logger.info(f"[BULK_UPDATER] üîó –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {links}")
                
                if not self.should_update_message(text, message):
                    stats["skipped"] += 1
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                updated_text = self.update_message_text(text)
                
                if updated_text != text:
                    stats["updated"] += 1
                    
                    if not dry_run:
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            if message.text:
                                await self.client.edit_message_text(
                                    chat_id=channel_id,
                                    message_id=message.id,
                                    text=updated_text
                                )
                            elif message.caption:
                                # –î–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
                                await self.client.edit_message_caption(
                                    chat_id=channel_id,
                                    message_id=message.id,
                                    caption=updated_text
                                )
                            logger.info(f"[BULK_UPDATER] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                        except Exception as e:
                            logger.error(f"[BULK_UPDATER] ‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                            stats["errors"] += 1
                    else:
                        logger.info(f"[BULK_UPDATER] üîç –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}")
                
            except Exception as e:
                logger.error(f"[BULK_UPDATER] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}: {e}")
                stats["errors"] += 1
        
        logger.info(f"[BULK_UPDATER] üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:")
        logger.info(f"[BULK_UPDATER]   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total']}")
        logger.info(f"[BULK_UPDATER]   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}")
        logger.info(f"[BULK_UPDATER]   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
        logger.info(f"[BULK_UPDATER]   –û—à–∏–±–æ–∫: {stats['errors']}")
        
        return stats

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –∫–∞–Ω–∞–ª–µ")
    parser.add_argument("channel_id", help="ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    parser.add_argument("--session", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏")
    parser.add_argument("--dry-run", action="store_true", help="–¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    parser.add_argument("--limit", type=int, default=1000, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä
    updater = BulkLinkUpdater(session_path=args.session)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if not await updater.start_client():
            logger.error("[BULK_UPDATER] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        stats = await updater.update_channel_messages(args.channel_id, dry_run=args.dry_run)
        
        if args.dry_run:
            logger.info("[BULK_UPDATER] üîç –†–ï–ñ–ò–ú –ü–†–ï–î–ü–†–û–°–ú–û–¢–†–ê –ó–ê–í–ï–†–®–ï–ù")
            logger.info("[BULK_UPDATER] –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run")
        else:
            logger.info("[BULK_UPDATER] ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    
    except KeyboardInterrupt:
        logger.info("[BULK_UPDATER] ‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"[BULK_UPDATER] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await updater.stop_client()

if __name__ == "__main__":
    asyncio.run(main()) 